// Generated by IcedCoffeeScript 1.6.3-i
(function() {
  var GPG, TmpGPG, env, log, obj,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  GPG = require('gpg-wrapper').GPG;

  env = require('./env').env;

  log = require('./log');

  TmpGPG = (function(_super) {
    __extends(TmpGPG, _super);

    function TmpGPG() {
      return TmpGPG.__super__.constructor.apply(this, arguments);
    }

    TmpGPG.prototype.mutate_args = function(inargs) {
      log.debug("| old args: " + (inargs.args.join(' ')));
      log.debug("| Accessing the temporary keychain");
      inargs.args = ["--keyring", env().get_tmp_gpg_pub_keyring(), "--secret-keyring", env().get_tmp_gpg_sec_keyring(), "--trustdb-name", env().get_tmp_gpg_trustdb(), "--no-default-keyring", "--no-random-seed-file"].concat(inargs.args);
      return log.debug("| new args: " + (inargs.args.join(' ')));
    };

    return TmpGPG;

  })(GPG);

  exports.obj = obj = function(tmp) {
    var klass;
    klass = tmp ? TmpGPG : GPG;
    return new klass();
  };

  exports.assert_no_collision = function(_arg, cb) {
    var short_id, tmp;
    tmp = _arg.tmp, short_id = _arg.short_id;
    return obj(tmp).assert_no_collision(short_id, cb);
  };

  exports.assert_exactly_one = function(_arg, cb) {
    var short_id, tmp;
    tmp = _arg.tmp, short_id = _arg.short_id;
    return obj(tmp).assert_exactly_one(short_id, cb);
  };

  exports.read_uids_from_key = function(args, cb) {
    return obj(args.tmp).read_uids_from_key(args, cb);
  };

  exports.gpg = function(inargs, cb) {
    log.debug("| Call to gpg: " + (JSON.stringify(inargs)));
    if (inargs.quiet && env().get_debug()) {
      inargs.quiet = false;
    }
    return obj(inargs.tmp).run(inargs, cb);
  };

}).call(this);
