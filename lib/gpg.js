// Generated by IcedCoffeeScript 1.6.3-g
(function() {
  var E, Engine, bufferify, gpg, iced, log, spawn, stream, __iced_k, __iced_k_noop;

  iced = require('iced-coffee-script/lib/coffee-script/iced').runtime;
  __iced_k = __iced_k_noop = function() {};

  spawn = require('child_process').spawn;

  stream = require('./stream');

  log = require('./log');

  E = require('./err').E;

  Engine = (function() {
    function Engine(_arg) {
      this.args = _arg.args, this.stdin = _arg.stdin, this.stdout = _arg.stdout, this.stderr = _arg.stderr;
      this.name = "gpg";
      this.stderr || (this.stderr = new stream.FnOutStream(log.warn));
      this.stdin || (this.stdin = new stream.NullInStream());
      this.stdout || (this.stdout = new stream.NullOutStream());
      this._exit_code = null;
      this._exit_cb = null;
    }

    Engine.prototype.run = function() {
      var _this = this;
      this.proc = spawn(this.name, this.args);
      this.stdin.pipe(this.proc.stdin);
      this.proc.stdout.pipe(this.stdout);
      this.proc.stderr.pipe(this.stderr);
      this.pid = this.proc.pid;
      this.proc.on('exit', function(status) {
        return _this._got_exit(status);
      });
      return this;
    };

    Engine.prototype._got_exit = function(status) {
      var ecb;
      this._exit_code = status;
      this.proc = null;
      if ((ecb = this._exit_cb) != null) {
        this._exit_cb = null;
        ecb(status);
      }
      return this.pid = -1;
    };

    Engine.prototype.wait = function(cb) {
      if (this._exit_code) {
        return cb(this._exit_code);
      } else {
        return this._exit_cb = cb;
      }
    };

    return Engine;

  })();

  bufferify = function(x) {
    if (x == null) {
      return null;
    } else if (typeof x === 'string') {
      return new Buffer(x, 'utf8');
    } else if (Buffer.isBuffer(x)) {
      return x;
    } else {
      return null;
    }
  };

  exports.gpg = gpg = function(_arg, cb) {
    var args, b, def_out, err, out, quiet, rc, stderr, stdin, stdout, ___iced_passed_deferral, __iced_deferrals, __iced_k,
      _this = this;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    args = _arg.args, stdin = _arg.stdin, stdout = _arg.stdout, stderr = _arg.stderr, quiet = _arg.quiet;
    if ((b = bufferify(stdin)) != null) {
      stdin = new stream.BufferInStream(b);
    }
    if (quiet) {
      stderr = new stream.NullOutStream();
    }
    if (stdout == null) {
      def_out = true;
      stdout = new stream.BufferOutStream();
    } else {
      def_out = false;
    }
    err = null;
    (function(__iced_k) {
      __iced_deferrals = new iced.Deferrals(__iced_k, {
        parent: ___iced_passed_deferral,
        filename: "src/gpg.iced",
        funcname: "gpg"
      });
      (new Engine({
        args: args,
        stdin: stdin,
        stdout: stdout,
        stderr: stderr
      })).run().wait(__iced_deferrals.defer({
        assign_fn: (function() {
          return function() {
            return rc = arguments[0];
          };
        })(),
        lineno: 64
      }));
      __iced_deferrals._fulfill();
    })(function() {
      if (rc !== 0) {
        err = new E.GpgError("exit code " + rc);
        err.rc = rc;
      }
      out = def_out != null ? stdout.data() : null;
      return cb(err, out);
    });
  };

}).call(this);
