// Generated by IcedCoffeeScript 1.6.3-i
(function() {
  var E, GPG, env, log, util;

  GPG = require('gpg-wrapper').GPG;

  env = require('./env').env;

  log = require('./log');

  util = require('util');

  E = require('./err').E;

  exports.gpg = function(inargs, cb) {
    log.debug("| Call to gpg: " + (util.inspect(inargs)));
    if (inargs.quiet && env().get_debug()) {
      inargs.quiet = false;
    }
    return (new GPG).run(inargs, cb);
  };

  exports.parse_signature = function(lines) {
    var ends_in, err, m, ret, rxx, strip;
    strip = function(m) {
      return m.split(/\s+/).join('');
    };
    ends_in = function(a, b) {
      return a.slice(-b.length) === b;
    };
    rxx = /\ngpg:\sSignature\smade.*\ngpg:\s+using\s[RD]SA\skey\s([A-F0-9]{16})\n(.*\n)*gpg:\sGood\ssignature\sfrom.*\nPrimary\skey\sfingerprint:\s([A-F0-9\s]+)\n\s+Subkey\sfingerprint:\s([A-F0-9\s]+)\n/;
    err = ret = null;
    if ((m = lines.match(rxx)) == null) {
      err = new E.NotFoundError("no signature found");
    } else {
      ret = {
        primary: strip(m[3]),
        subkey: strip(m[4])
      };
      if (!(ends_in(ret.primary, m[1]) || ends_in(ret.subkey, m[1]))) {
        err = new E.VerifyError("key ID didn't match fingerprint");
        ret = null;
      }
    }
    return [err, ret];
  };

}).call(this);
