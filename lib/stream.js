// Generated by IcedCoffeeScript 1.6.3-g
(function() {
  var BufferInStream, BufferOutStream, FnOutStream, NullInStream, NullOutStream, log, stream, _ref, _ref1,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };



  stream = require('stream');

  log = require('./log');

  exports.NullInStream = NullInStream = (function(_super) {
    __extends(NullInStream, _super);

    function NullInStream() {
      _ref = NullInStream.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    NullInStream.prototype._read = function(sz) {
      this.push(null);
      return true;
    };

    return NullInStream;

  })(stream.Readable);

  exports.NullOutStream = NullOutStream = (function(_super) {
    __extends(NullOutStream, _super);

    function NullOutStream() {
      _ref1 = NullOutStream.__super__.constructor.apply(this, arguments);
      return _ref1;
    }

    NullOutStream.prototype._write = function(dat) {
      return true;
    };

    return NullOutStream;

  })(stream.Writable);

  exports.BufferInStream = BufferInStream = (function(_super) {
    __extends(BufferInStream, _super);

    function BufferInStream(buf, options) {
      this.buf = buf;
      BufferInStream.__super__.constructor.call(this, options);
    }

    BufferInStream.prototype._read = function(sz) {
      var n, push_me;
      push_me = null;
      if (this.buf.length > 0) {
        n = Math.min(sz, this.buf.length);
        push_me = this.buf.slice(0, n);
        this.buf = this.buf.slice(n);
      }
      this.push(push_me);
      return true;
    };

    return BufferInStream;

  })(stream.Readable);

  exports.BufferOutStream = BufferOutStream = (function(_super) {
    __extends(BufferOutStream, _super);

    function BufferOutStream(options) {
      this._v = [];
      BufferOutStream.__super__.constructor.call(this, options);
    }

    BufferOutStream.prototype._write = function(dat, encoding, cb) {
      this._v.push(dat);
      return cb();
    };

    BufferOutStream.prototype.data = function() {
      return Buffer.concat(this._v);
    };

    return BufferOutStream;

  })(stream.Writable);

  exports.FnOutStream = FnOutStream = (function(_super) {
    __extends(FnOutStream, _super);

    function FnOutStream(fn, options) {
      this.fn = fn;
      FnOutStream.__super__.constructor.call(this, options);
    }

    FnOutStream.prototype._write = function(dat) {
      return this.fn(dat);
    };

    return FnOutStream;

  })(stream.Writable);

}).call(this);
