// Generated by IcedCoffeeScript 1.6.3-g
(function() {
  var E, User, constants, db, iced, make_esc, req, __iced_k, __iced_k_noop;

  iced = require('iced-coffee-script/lib/coffee-script/iced').runtime;
  __iced_k = __iced_k_noop = function() {};

  req = require('./req');

  db = require('./db');

  constants = require('./constants').constants;

  make_esc = require('iced-error').make_esc;

  E = require('./err').E;

  exports.User = User = (function() {
    function User(_arg) {
      this.basics = _arg.basics, this.public_keys = _arg.public_keys, this.id = _arg.id, this.sigs = _arg.sigs;
    }

    User.prototype.to_obj = function() {
      return {
        basics: this.basics,
        public_keys: this.public_keys,
        id: this.id,
        sigs: this.sigs
      };
    };

    User.prototype.name = function() {
      return {
        type: constants.lookups.username,
        name: this.basics.username
      };
    };

    User.prototype.store = function(cb) {
      var err, ___iced_passed_deferral, __iced_deferrals, __iced_k,
        _this = this;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "src/user.iced",
          funcname: "User.store"
        });
        db.put({
          key: _this.id,
          value: _this.to_obj(),
          name: _this.name()
        }, __iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              return err = arguments[0];
            };
          })(),
          lineno: 26
        }));
        __iced_deferrals._fulfill();
      })(function() {
        return cb(err);
      });
    };

    User.prototype.check_self = function(a, remote, cb) {
      var b, err, _ref;
      err = null;
      if ((b = (_ref = remote.basics) != null ? _ref.id_version : void 0) == null) {
        err = new E.NotLoggedInError("are you logged in? no remote ID version given");
      } else if (a > b) {
        err = new E.VersionRollback("Server version-rollback suspected: Local " + a + " > " + b);
      }
      return cb(err);
    };

    User.prototype.update_with = function(remote, cb) {
      var err, esc, v, ___iced_passed_deferral, __iced_deferrals, __iced_k,
        _this = this;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      esc = make_esc(cb, "update_with");
      (function(__iced_k) {
        var _ref;
        if ((v = (_ref = _this.basics) != null ? _ref.id_version : void 0) != null) {
          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "src/user.iced",
              funcname: "User.update_with"
            });
            _this.check_self(v, remote, esc(__iced_deferrals.defer({
              assign_fn: (function() {
                return function() {
                  return err = arguments[0];
                };
              })(),
              lineno: 44
            })));
            __iced_deferrals._fulfill();
          })(__iced_k);
        } else {
          return __iced_k();
        }
      })(function() {
        return cb(null);
      });
    };

    User.load = function(_arg, cb) {
      var changed, err, esc, local, remote, username, ___iced_passed_deferral, __iced_deferrals, __iced_k,
        _this = this;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      username = _arg.username;
      esc = make_esc(cb, "User::load");
      (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "src/user.iced",
          funcname: "User.load"
        });
        User.load_from_server({
          username: username
        }, esc(__iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              return remote = arguments[0];
            };
          })(),
          lineno: 51
        })));
        __iced_deferrals._fulfill();
      })(function() {
        (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "src/user.iced",
            funcname: "User.load"
          });
          User.load_from_storage({
            username: username
          }, esc(__iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                return local = arguments[0];
              };
            })(),
            lineno: 52
          })));
          __iced_deferrals._fulfill();
        })(function() {
          changed = true;
          (function(__iced_k) {
            if (typeof local !== "undefined" && local !== null) {
              (function(__iced_k) {
                __iced_deferrals = new iced.Deferrals(__iced_k, {
                  parent: ___iced_passed_deferral,
                  filename: "src/user.iced",
                  funcname: "User.load"
                });
                local.update_with(remote, esc(__iced_deferrals.defer({
                  assign_fn: (function() {
                    return function() {
                      return changed = arguments[0];
                    };
                  })(),
                  lineno: 55
                })));
                __iced_deferrals._fulfill();
              })(__iced_k);
            } else {
              return __iced_k(typeof remote !== "undefined" && remote !== null ? local = remote : err = new E.UserNotFoundError("User " + username + " wasn't found"));
            }
          })(function() {
            (function(__iced_k) {
              if ((typeof err === "undefined" || err === null) && changed) {
                (function(__iced_k) {
                  __iced_deferrals = new iced.Deferrals(__iced_k, {
                    parent: ___iced_passed_deferral,
                    filename: "src/user.iced",
                    funcname: "User.load"
                  });
                  local.store(esc(__iced_deferrals.defer({
                    lineno: 61
                  })));
                  __iced_deferrals._fulfill();
                })(__iced_k);
              } else {
                return __iced_k();
              }
            })(function() {
              return cb(err);
            });
          });
        });
      });
    };

    User.load_from_server = function(_arg, cb) {
      var args, body, err, ret, username, ___iced_passed_deferral, __iced_deferrals, __iced_k,
        _this = this;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      username = _arg.username;
      args = {
        endpoint: "user/lookup",
        args: {
          username: username
        }
      };
      (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "src/user.iced",
          funcname: "User.load_from_server"
        });
        req.get(args, __iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              err = arguments[0];
              return body = arguments[1];
            };
          })(),
          lineno: 70
        }));
        __iced_deferrals._fulfill();
      })(function() {
        ret = null;
        if (typeof err === "undefined" || err === null) {
          ret = new User(body.them);
        }
        return cb(err, ret);
      });
    };

    User.load_from_storage = function(_arg, cb) {
      var err, ret, row, username, ___iced_passed_deferral, __iced_deferrals, __iced_k,
        _this = this;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      username = _arg.username;
      ret = null;
      (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "src/user.iced",
          funcname: "User.load_from_storage"
        });
        db.lookup({
          type: constants.lookups.username,
          name: username
        }, __iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              err = arguments[0];
              return row = arguments[1];
            };
          })(),
          lineno: 80
        }));
        __iced_deferrals._fulfill();
      })(function() {
        if ((typeof err === "undefined" || err === null) && (typeof row !== "undefined" && row !== null)) {
          ret = new User(row.value);
        }
        return cb(err, ret);
      });
    };

    return User;

  })();

}).call(this);
