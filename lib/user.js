// Generated by IcedCoffeeScript 1.6.3-g
(function() {
  var E, KeyManager, SigChain, TrackWrapper, TrackerProofGen, UntrackerProofGen, User, constants, db, deepeq, env, filter, gpg, iced, log, make_esc, req, session, __iced_k, __iced_k_noop, _ref;

  iced = require('iced-coffee-script/lib/coffee-script/iced').runtime;
  __iced_k = __iced_k_noop = function() {};

  req = require('./req');

  gpg = require('./gpg').gpg;

  db = require('./db');

  constants = require('./constants').constants;

  make_esc = require('iced-error').make_esc;

  E = require('./err').E;

  deepeq = require('deep-equal');

  SigChain = require('./sigchain').SigChain;

  log = require('./log');

  _ref = require('./sigs'), UntrackerProofGen = _ref.UntrackerProofGen, TrackerProofGen = _ref.TrackerProofGen;

  KeyManager = require('./keymanager').KeyManager;

  session = require('./session').session;

  env = require('./env').env;

  TrackWrapper = require('./track').TrackWrapper;

  filter = function(d, v) {
    var k, out, _i, _len;
    out = {};
    for (_i = 0, _len = v.length; _i < _len; _i++) {
      k = v[_i];
      if (d != null) {
        out[k] = d[k];
      }
    }
    return out;
  };

  exports.User = User = (function() {
    User.FIELDS = ["basics", "public_keys", "id", "sigs"];

    function User(args) {
      var k, _i, _len, _ref1;
      _ref1 = User.FIELDS;
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        k = _ref1[_i];
        this[k] = args[k];
      }
      this._dirty = false;
      this.sig_chain = null;
    }

    User.prototype.set_is_self = function(b) {
      return this._is_self = b;
    };

    User.prototype.to_obj = function() {
      var k, out, _i, _len, _ref1;
      out = {};
      _ref1 = User.FIELDS;
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        k = _ref1[_i];
        out[k] = this[k];
      }
      return out;
    };

    User.prototype.name = function() {
      return {
        type: constants.lookups.username,
        name: this.basics.username
      };
    };

    User.prototype.store = function(force_store, cb) {
      var err, un, ___iced_passed_deferral, __iced_deferrals, __iced_k,
        _this = this;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      err = null;
      un = this.username();
      (function(__iced_k) {
        if (force_store || _this._dirty) {
          log.debug("+ " + un + ": storing user to local DB");
          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "src/user.iced",
              funcname: "User.store"
            });
            db.put({
              key: _this.id,
              value: _this.to_obj(),
              name: _this.name()
            }, __iced_deferrals.defer({
              assign_fn: (function() {
                return function() {
                  return err = arguments[0];
                };
              })(),
              lineno: 63
            }));
            __iced_deferrals._fulfill();
          })(function() {
            return __iced_k(log.debug("+ " + un + ": storing user to local DB"));
          });
        } else {
          return __iced_k();
        }
      })(function() {
        (function(__iced_k) {
          if ((_this.sig_chain != null) && (err == null)) {
            log.debug("+ " + un + ": storing signature chain");
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "src/user.iced",
                funcname: "User.store"
              });
              _this.sig_chain.store(__iced_deferrals.defer({
                assign_fn: (function() {
                  return function() {
                    return err = arguments[0];
                  };
                })(),
                lineno: 67
              }));
              __iced_deferrals._fulfill();
            })(function() {
              return __iced_k(log.debug("- " + un + ": stored signature chain"));
            });
          } else {
            return __iced_k();
          }
        })(function() {
          return cb(err);
        });
      });
    };

    User.prototype.update_fields = function(remote) {
      var k, _i, _len, _ref1;
      _ref1 = User.FIELDS;
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        k = _ref1[_i];
        this.update_field(remote, k);
      }
      return true;
    };

    User.prototype.update_field = function(remote, which) {
      if (!(deepeq(this[which], remote[which]))) {
        this[which] = remote[which];
        return this._dirty = true;
      }
    };

    User.prototype.load_sig_chain_from_storage = function(cb) {
      var err, ph, ___iced_passed_deferral, __iced_deferrals, __iced_k, _ref1,
        _this = this;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      err = null;
      log.debug("+ load sig chain from local storage");
      this.last_sig = ((_ref1 = this.sigs) != null ? _ref1.last : void 0) || {
        seqno: 0
      };
      (function(__iced_k) {
        if ((ph = _this.last_sig.payload_hash) != null) {
          log.debug("| loading sig chain w/ payload hash " + ph);
          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "src/user.iced",
              funcname: "User.load_sig_chain_from_storage"
            });
            SigChain.load(_this.id, ph, __iced_deferrals.defer({
              assign_fn: (function(__slot_1) {
                return function() {
                  err = arguments[0];
                  return __slot_1.sig_chain = arguments[1];
                };
              })(_this),
              lineno: 93
            }));
            __iced_deferrals._fulfill();
          })(__iced_k);
        } else {
          return __iced_k(_this.sig_chain = new SigChain(_this.id));
        }
      })(function() {
        log.debug("- loaded sig chain from local storage");
        return cb(err);
      });
    };

    User.prototype.load_full_sig_chain = function(cb) {
      var err, sc, ___iced_passed_deferral, __iced_deferrals, __iced_k,
        _this = this;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      log.debug("+ load full sig chain");
      sc = new SigChain(this.id);
      (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "src/user.iced",
          funcname: "User.load_full_sig_chain"
        });
        sc.update(null, __iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              return err = arguments[0];
            };
          })(),
          lineno: 104
        }));
        __iced_deferrals._fulfill();
      })(function() {
        if (typeof err === "undefined" || err === null) {
          _this.sig_chain = sc;
        }
        log.debug("| loaded full sig chain");
        return cb(err);
      });
    };

    User.prototype.update_sig_chain = function(remote, cb) {
      var err, seqno, ___iced_passed_deferral, __iced_deferrals, __iced_k, _ref1, _ref2,
        _this = this;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      seqno = remote != null ? (_ref1 = remote.sigs) != null ? (_ref2 = _ref1.last) != null ? _ref2.seqno : void 0 : void 0 : void 0;
      log.debug("+ update sig chain; seqno=" + seqno);
      (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "src/user.iced",
          funcname: "User.update_sig_chain"
        });
        _this.sig_chain.update(seqno, __iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              return err = arguments[0];
            };
          })(),
          lineno: 114
        }));
        __iced_deferrals._fulfill();
      })(function() {
        log.debug("- updated sig chain");
        return cb(err);
      });
    };

    User.prototype.update_with = function(remote, cb) {
      var a, b, err, ___iced_passed_deferral, __iced_deferrals, __iced_k, _ref1, _ref2,
        _this = this;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      err = null;
      log.debug("+ updating local user w/ remote");
      a = (_ref1 = this.basics) != null ? _ref1.id_version : void 0;
      b = remote != null ? (_ref2 = remote.basics) != null ? _ref2.id_version : void 0 : void 0;
      if ((b == null) || a > b) {
        err = new E.VersionRollbackError("Server version-rollback suspected: Local " + a + " > " + b);
      } else if ((a == null) || a < b) {
        log.debug("| version update needed: " + a + " vs. " + b);
        this.update_fields(remote);
      } else if (a !== b) {
        err = new E.CorruptionError("Bad ids on user objects: " + a.id + " != " + b.id);
      }
      (function(__iced_k) {
        if (err == null) {
          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "src/user.iced",
              funcname: "User.update_with"
            });
            _this.update_sig_chain(remote, __iced_deferrals.defer({
              assign_fn: (function() {
                return function() {
                  return err = arguments[0];
                };
              })(),
              lineno: 136
            }));
            __iced_deferrals._fulfill();
          })(__iced_k);
        } else {
          return __iced_k();
        }
      })(function() {
        log.debug("- finished update");
        return cb(err);
      });
    };

    User.load = function(_arg, cb) {
      var changed, err, esc, force_store, local, remote, username, ___iced_passed_deferral, __iced_deferrals, __iced_k,
        _this = this;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      username = _arg.username;
      esc = make_esc(cb, "User::load");
      log.debug("+ " + username + ": load user");
      (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "src/user.iced",
          funcname: "User.load"
        });
        User.load_from_server({
          username: username
        }, esc(__iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              return remote = arguments[0];
            };
          })(),
          lineno: 147
        })));
        __iced_deferrals._fulfill();
      })(function() {
        (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "src/user.iced",
            funcname: "User.load"
          });
          User.load_from_storage({
            username: username
          }, esc(__iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                return local = arguments[0];
              };
            })(),
            lineno: 148
          })));
          __iced_deferrals._fulfill();
        })(function() {
          changed = true;
          force_store = false;
          (function(__iced_k) {
            if (typeof local !== "undefined" && local !== null) {
              (function(__iced_k) {
                __iced_deferrals = new iced.Deferrals(__iced_k, {
                  parent: ___iced_passed_deferral,
                  filename: "src/user.iced",
                  funcname: "User.load"
                });
                local.update_with(remote, esc(__iced_deferrals.defer({
                  lineno: 152
                })));
                __iced_deferrals._fulfill();
              })(__iced_k);
            } else {
              (function(__iced_k) {
                if (typeof remote !== "undefined" && remote !== null) {
                  local = remote;
                  (function(__iced_k) {
                    __iced_deferrals = new iced.Deferrals(__iced_k, {
                      parent: ___iced_passed_deferral,
                      filename: "src/user.iced",
                      funcname: "User.load"
                    });
                    local.load_full_sig_chain(esc(__iced_deferrals.defer({
                      lineno: 155
                    })));
                    __iced_deferrals._fulfill();
                  })(function() {
                    return __iced_k(force_store = true);
                  });
                } else {
                  return __iced_k(err = new E.UserNotFoundError("User " + username + " wasn't found"));
                }
              })(__iced_k);
            }
          })(function() {
            (function(__iced_k) {
              if (typeof err === "undefined" || err === null) {
                (function(__iced_k) {
                  __iced_deferrals = new iced.Deferrals(__iced_k, {
                    parent: ___iced_passed_deferral,
                    filename: "src/user.iced",
                    funcname: "User.load"
                  });
                  local.store(force_store, esc(__iced_deferrals.defer({
                    lineno: 160
                  })));
                  __iced_deferrals._fulfill();
                })(__iced_k);
              } else {
                return __iced_k();
              }
            })(function() {
              log.debug("- " + username + ": loaded user");
              return cb(err, local);
            });
          });
        });
      });
    };

    User.load_from_server = function(_arg, cb) {
      var args, body, err, ret, username, ___iced_passed_deferral, __iced_deferrals, __iced_k,
        _this = this;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      username = _arg.username;
      log.debug("+ " + username + ": load user from server");
      args = {
        endpoint: "user/lookup",
        args: {
          username: username
        }
      };
      (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "src/user.iced",
          funcname: "User.load_from_server"
        });
        req.get(args, __iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              err = arguments[0];
              return body = arguments[1];
            };
          })(),
          lineno: 171
        }));
        __iced_deferrals._fulfill();
      })(function() {
        ret = null;
        if (typeof err === "undefined" || err === null) {
          ret = new User(body.them);
        }
        log.debug("- " + username + ": loaded user from server");
        return cb(err, ret);
      });
    };

    User.load_from_storage = function(_arg, cb) {
      var err, ret, row, username, ___iced_passed_deferral, __iced_deferrals, __iced_k,
        _this = this;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      username = _arg.username;
      log.debug("+ " + username + ": load user from local storage");
      ret = null;
      (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "src/user.iced",
          funcname: "User.load_from_storage"
        });
        db.lookup({
          type: constants.lookups.username,
          name: username
        }, __iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              err = arguments[0];
              return row = arguments[1];
            };
          })(),
          lineno: 183
        }));
        __iced_deferrals._fulfill();
      })(function() {
        (function(__iced_k) {
          if ((typeof err === "undefined" || err === null) && (typeof row !== "undefined" && row !== null)) {
            ret = new User(row.value);
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "src/user.iced",
                funcname: "User.load_from_storage"
              });
              ret.load_sig_chain_from_storage(__iced_deferrals.defer({
                assign_fn: (function() {
                  return function() {
                    return err = arguments[0];
                  };
                })(),
                lineno: 186
              }));
              __iced_deferrals._fulfill();
            })(function() {
              return __iced_k(typeof err !== "undefined" && err !== null ? ret = null : void 0);
            });
          } else {
            return __iced_k();
          }
        })(function() {
          log.debug("- " + username + ": loaded user from local storage");
          return cb(err, ret);
        });
      });
    };

    User.prototype.fingerprint = function(upper_case) {
      var _ref1, _ref2, _ref3, _ref4;
      if (upper_case == null) {
        upper_case = false;
      }
      if (this._fingerprint == null) {
        this._fingerprint = {
          lc: (_ref1 = this.public_keys) != null ? (_ref2 = _ref1.primary) != null ? (_ref3 = _ref2.key_fingerprint) != null ? _ref3.toLowerCase() : void 0 : void 0 : void 0
        };
        this._fingerprint.uc = (_ref4 = this._fingerprint.lc) != null ? _ref4.toUpperCase() : void 0;
      }
      return this._fingerprint[upper_case ? 'uc' : 'lc'];
    };

    User.prototype.query_key = function(_arg, cb) {
      var args, err, fp, out, secret, ___iced_passed_deferral, __iced_deferrals, __iced_k,
        _this = this;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      secret = _arg.secret;
      (function(__iced_k) {
        if ((fp = _this.fingerprint(true)) != null) {
          args = ["-" + (secret ? 'K' : 'k'), fp];
          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "src/user.iced",
              funcname: "User.query_key"
            });
            gpg({
              args: args,
              quiet: true
            }, __iced_deferrals.defer({
              assign_fn: (function() {
                return function() {
                  err = arguments[0];
                  return out = arguments[1];
                };
              })(),
              lineno: 206
            }));
            __iced_deferrals._fulfill();
          })(function() {
            return __iced_k(typeof err !== "undefined" && err !== null ? err = new E.NoLocalKeyError((_this._is_self ? "You don't have a local key!" : "the user " + (_this.username()) + " doesn't have a local key")) : void 0);
          });
        } else {
          return __iced_k(err = new E.NoRemoteKeyError((_this._is_self ? "You don't have a registered remote key! Try `keybase push`" : "the user " + (_this.username()) + " doesn't have a remote key")));
        }
      })(function() {
        return cb(err);
      });
    };

    User.load_me = function(cb) {
      var esc, me, ___iced_passed_deferral, __iced_deferrals, __iced_k,
        _this = this;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      esc = make_esc(cb, "User::load_me");
      log.debug("+ User::load_me");
      (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "src/user.iced",
          funcname: "User.load_me"
        });
        User.load({
          username: env().get_username()
        }, esc(__iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              return me = arguments[0];
            };
          })(),
          lineno: 224
        })));
        __iced_deferrals._fulfill();
      })(function() {
        me.set_is_self(true);
        (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "src/user.iced",
            funcname: "User.load_me"
          });
          me.check_public_key(esc(__iced_deferrals.defer({
            lineno: 226
          })));
          __iced_deferrals._fulfill();
        })(function() {
          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "src/user.iced",
              funcname: "User.load_me"
            });
            me.verify(esc(__iced_deferrals.defer({
              lineno: 227
            })));
            __iced_deferrals._fulfill();
          })(function() {
            log.debug("- User::load_me");
            return cb(null, me);
          });
        });
      });
    };

    User.prototype.check_public_key = function(cb) {
      var err, un, ___iced_passed_deferral, __iced_deferrals, __iced_k,
        _this = this;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      un = this.username();
      log.debug("+ " + un + ": checking public key");
      (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "src/user.iced",
          funcname: "User.check_public_key"
        });
        _this.query_key({
          secret: false
        }, __iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              return err = arguments[0];
            };
          })(),
          lineno: 236
        }));
        __iced_deferrals._fulfill();
      })(function() {
        log.debug("- " + un + ": checked public key");
        return cb(err);
      });
    };

    User.prototype.load_public_key = function(cb) {
      var err, ___iced_passed_deferral, __iced_deferrals, __iced_k,
        _this = this;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      err = null;
      (function(__iced_k) {
        if (_this.km == null) {
          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "src/user.iced",
              funcname: "User.load_public_key"
            });
            KeyManager.load(_this.fingerprint(), __iced_deferrals.defer({
              assign_fn: (function(__slot_1) {
                return function() {
                  err = arguments[0];
                  return __slot_1.km = arguments[1];
                };
              })(_this),
              lineno: 244
            }));
            __iced_deferrals._fulfill();
          })(__iced_k);
        } else {
          return __iced_k();
        }
      })(function() {
        return cb(err, _this.km);
      });
    };

    User.prototype.username = function() {
      return this.basics.username;
    };

    User.prototype.import_public_key = function(cb) {
      var args, data, err, fingerprint, found, out, state, uid, un, ___iced_passed_deferral, __iced_deferrals, __iced_k,
        _this = this;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      un = this.username();
      log.debug("+ " + un + ": import public key");
      uid = this.id;
      found = false;
      fingerprint = this.fingerprint();
      (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "src/user.iced",
          funcname: "User.import_public_key"
        });
        _this.query_key({
          secret: false
        }, __iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              return err = arguments[0];
            };
          })(),
          lineno: 259
        }));
        __iced_deferrals._fulfill();
      })(function() {
        (function(__iced_k) {
          if (typeof err === "undefined" || err === null) {
            log.debug("| found locally");
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "src/user.iced",
                funcname: "User.import_public_key"
              });
              db.get_import_state({
                uid: uid,
                fingerprint: fingerprint
              }, __iced_deferrals.defer({
                assign_fn: (function() {
                  return function() {
                    err = arguments[0];
                    return state = arguments[1];
                  };
                })(),
                lineno: 262
              }));
              __iced_deferrals._fulfill();
            })(function() {
              log.debug("| read state from DB as " + state);
              return __iced_k(found = state !== constants.import_state.TEMPORARY);
            });
          } else {
            (function(__iced_k) {
              if ((err instanceof E.NoLocalKeyError) == null) {
                return __iced_k();
              } else {
                (function(__iced_k) {
                  var _ref1, _ref2;
                  if ((data = (_ref1 = _this.public_keys) != null ? (_ref2 = _ref1.primary) != null ? _ref2.bundle : void 0 : void 0) == null) {
                    return __iced_k(err = new E.ImportError("no public key found for " + un));
                  } else {
                    state = constants.import_state.TEMPORARY;
                    log.debug("| temporarily importing key to local GPG");
                    (function(__iced_k) {
                      __iced_deferrals = new iced.Deferrals(__iced_k, {
                        parent: ___iced_passed_deferral,
                        filename: "src/user.iced",
                        funcname: "User.import_public_key"
                      });
                      db.log_key_import({
                        uid: uid,
                        state: state,
                        fingerprint: fingerprint
                      }, __iced_deferrals.defer({
                        assign_fn: (function() {
                          return function() {
                            return err = arguments[0];
                          };
                        })(),
                        lineno: 271
                      }));
                      __iced_deferrals._fulfill();
                    })(function() {
                      (function(__iced_k) {
                        if (err == null) {
                          args = ["--import"];
                          (function(__iced_k) {
                            __iced_deferrals = new iced.Deferrals(__iced_k, {
                              parent: ___iced_passed_deferral,
                              filename: "src/user.iced",
                              funcname: "User.import_public_key"
                            });
                            gpg({
                              args: args,
                              stdin: data,
                              quiet: true
                            }, __iced_deferrals.defer({
                              assign_fn: (function() {
                                return function() {
                                  err = arguments[0];
                                  return out = arguments[1];
                                };
                              })(),
                              lineno: 274
                            }));
                            __iced_deferrals._fulfill();
                          })(function() {
                            return __iced_k(err != null ? err = new E.ImportError("" + un + ": key import error: {err.message}") : void 0);
                          });
                        } else {
                          return __iced_k();
                        }
                      })(__iced_k);
                    });
                  }
                })(__iced_k);
              }
            })(__iced_k);
          }
        })(function() {
          log.debug("- " + un + ": imported public key (found=" + found + ")");
          return cb(err, found);
        });
      });
    };

    User.prototype.commit_key = function(cb) {
      var err, ___iced_passed_deferral, __iced_deferrals, __iced_k,
        _this = this;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "src/user.iced",
          funcname: "User.commit_key"
        });
        db.log_key_import({
          uid: _this.id,
          state: constants.import_state.FINAL,
          fingerprint: _this.fingerprint()
        }, __iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              return err = arguments[0];
            };
          })(),
          lineno: 287
        }));
        __iced_deferrals._fulfill();
      })(function() {
        return cb(err);
      });
    };

    User.prototype.remove_key = function(cb) {
      var args, esc, fingerprint, state, uid, un, ___iced_passed_deferral, __iced_deferrals, __iced_k,
        _this = this;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      un = this.username();
      uid = this.id;
      fingerprint = this.fingerprint();
      esc = make_esc(cb, "SigChain::remove_key");
      log.debug("+ " + un + ": remove temporarily imported public key");
      args = ["--batch", "--delete-keys", this.fingerprint(true)];
      state = constants.import_state.CANCELED;
      (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "src/user.iced",
          funcname: "User.remove_key"
        });
        gpg({
          args: args
        }, esc(__iced_deferrals.defer({
          lineno: 300
        })));
        __iced_deferrals._fulfill();
      })(function() {
        (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "src/user.iced",
            funcname: "User.remove_key"
          });
          db.log_key_import({
            uid: uid,
            state: state,
            fingerprint: fingerprint
          }, esc(__iced_deferrals.defer({
            lineno: 301
          })));
          __iced_deferrals._fulfill();
        })(function() {
          log.debug("- " + un + ": removed temporarily imported public key");
          return cb(null);
        });
      });
    };

    User.prototype.check_remote_proofs = function(skip, cb) {
      var err, warnings, ___iced_passed_deferral, __iced_deferrals, __iced_k,
        _this = this;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "src/user.iced",
          funcname: "User.check_remote_proofs"
        });
        _this.sig_chain.check_remote_proofs({
          skip: skip,
          username: _this.username()
        }, __iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              err = arguments[0];
              return warnings = arguments[1];
            };
          })(),
          lineno: 308
        }));
        __iced_deferrals._fulfill();
      })(function() {
        return cb(err, warnings);
      });
    };

    User.prototype.verify = function(cb) {
      var err, ___iced_passed_deferral, __iced_deferrals, __iced_k,
        _this = this;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "src/user.iced",
          funcname: "User.verify"
        });
        _this.sig_chain.verify_sig({
          username: _this.username()
        }, __iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              return err = arguments[0];
            };
          })(),
          lineno: 315
        }));
        __iced_deferrals._fulfill();
      })(function() {
        return cb(err);
      });
    };

    User.prototype.gen_track_proof_gen = function(_arg, cb) {
      var arg, esc, g, klass, last_link, track_obj, uid, untrack_obj, ___iced_passed_deferral, __iced_deferrals, __iced_k,
        _this = this;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      uid = _arg.uid, track_obj = _arg.track_obj, untrack_obj = _arg.untrack_obj;
      esc = make_esc(cb, "User::gen_track_proof_gen");
      (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "src/user.iced",
          funcname: "User.gen_track_proof_gen"
        });
        _this.load_public_key(esc(__iced_deferrals.defer({
          lineno: 322
        })));
        __iced_deferrals._fulfill();
      })(function() {
        var _ref1;
        last_link = (_ref1 = _this.sig_chain) != null ? _ref1.last() : void 0;
        klass = untrack_obj != null ? UntrackerProofGen : TrackerProofGen;
        arg = {
          km: _this.km,
          seqno: (last_link != null ? last_link.seqno() + 1 : 1),
          prev: (last_link != null ? last_link.id : null),
          uid: uid
        };
        if (track_obj != null) {
          arg.track = track_obj;
        }
        if (untrack_obj != null) {
          arg.untrack = untrack_obj;
        }
        g = new klass(arg);
        return cb(null, g);
      });
    };

    User.prototype.assert_tracking = function(them, cb) {
      var err, trackw, ___iced_passed_deferral, __iced_deferrals, __iced_k,
        _this = this;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "src/user.iced",
          funcname: "User.assert_tracking"
        });
        TrackWrapper.load({
          tracker: _this,
          trackee: them
        }, __iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              err = arguments[0];
              return trackw = arguments[1];
            };
          })(),
          lineno: 338
        }));
        __iced_deferrals._fulfill();
      })(function() {
        if ((typeof err === "undefined" || err === null) && !trackw.is_tracking()) {
          err = new E.UntrackError("You're not tracking '" + (them.username()) + "'!");
        }
        return cb(err);
      });
    };

    User.prototype.gen_track_obj = function() {
      var out, pkp, _ref1, _ref2;
      pkp = this.public_keys.primary;
      out = {
        basics: filter(this.basics, ["id_version", "last_id_change", "username"]),
        id: this.id,
        key: filter(pkp, ["kid", "key_fingerprint"]),
        seq_tail: (_ref1 = this.sig_chain) != null ? _ref1.last().to_track_obj() : void 0,
        remote_proofs: (_ref2 = this.sig_chain) != null ? _ref2.remote_proofs_to_track_obj() : void 0
      };
      return out;
    };

    User.prototype.gen_untrack_obj = function() {
      var out, pkp;
      pkp = this.public_keys.primary;
      out = {
        basics: filter(this.basics, ["id_version", "last_id_change", "username"]),
        id: this.id,
        key: filter(pkp, ["kid", "key_fingerprint"])
      };
      return out;
    };

    return User;

  })();

}).call(this);
