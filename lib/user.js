// Generated by IcedCoffeeScript 1.6.3-i
(function() {
  var E, SigChain, User, constants, db, deepeq, iced, make_esc, req, __iced_k, __iced_k_noop;

  iced = require('iced-coffee-script/lib/coffee-script/iced').runtime;
  __iced_k = __iced_k_noop = function() {};

  req = require('./req');

  db = require('./db');

  constants = require('./constants').constants;

  make_esc = require('iced-error').make_esc;

  E = require('./err').E;

  deepeq = require('deep-equal');

  SigChain = require('./sigchain').SigChain;

  exports.User = User = (function() {
    User.FIELDS = ["basics", "public_keys", "id", "sigs"];

    function User(args) {
      var k, _i, _len, _ref;
      _ref = User.FIELDS;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        k = _ref[_i];
        this[k] = args[k];
      }
      this._dirty = false;
    }

    User.prototype.to_obj = function() {
      var k, out, _i, _len, _ref;
      out = {};
      _ref = User.FIELDS;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        k = _ref[_i];
        out[k] = this[k];
      }
      return out;
    };

    User.prototype.name = function() {
      return {
        type: constants.lookups.username,
        name: this.basics.username
      };
    };

    User.prototype.store = function(force_store, cb) {
      var err, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      err = null;
      (function(_this) {
        return (function(__iced_k) {
          if (force_store || _this._dirty) {
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "/Users/max/src/keybase-node-client/src/user.iced",
                funcname: "User.store"
              });
              db.put({
                key: _this.id,
                value: _this.to_obj(),
                name: _this.name()
              }, __iced_deferrals.defer({
                assign_fn: (function() {
                  return function() {
                    return err = arguments[0];
                  };
                })(),
                lineno: 41
              }));
              __iced_deferrals._fulfill();
            })(__iced_k);
          } else {
            return __iced_k();
          }
        });
      })(this)((function(_this) {
        return function() {
          (function(__iced_k) {
            if ((_this.sig_chain != null) && (err == null)) {
              (function(__iced_k) {
                __iced_deferrals = new iced.Deferrals(__iced_k, {
                  parent: ___iced_passed_deferral,
                  filename: "/Users/max/src/keybase-node-client/src/user.iced",
                  funcname: "User.store"
                });
                _this.sig_chain.store(__iced_deferrals.defer({
                  assign_fn: (function() {
                    return function() {
                      return err = arguments[0];
                    };
                  })(),
                  lineno: 43
                }));
                __iced_deferrals._fulfill();
              })(__iced_k);
            } else {
              return __iced_k();
            }
          })(function() {
            return cb(err);
          });
        };
      })(this));
    };

    User.prototype.update_fields = function(remote) {
      var k, _i, _len, _ref;
      _ref = User.FIELDS;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        k = _ref[_i];
        this.update_field(remote, k);
      }
      return true;
    };

    User.prototype.update_field = function(remote, which) {
      if (!(deepeq(this[which], remote[which]))) {
        this[which] = remote[which];
        return this._dirty = true;
      }
    };

    User.prototype.load_sig_chain_from_storage = function(cb) {
      var err, ph, ___iced_passed_deferral, __iced_deferrals, __iced_k, _ref;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      err = null;
      this.last_sig = ((_ref = this.sigs) != null ? _ref.last : void 0) || {
        seqno: 0
      };
      (function(_this) {
        return (function(__iced_k) {
          if ((ph = _this.last_sig.payload_hash) != null) {
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "/Users/max/src/keybase-node-client/src/user.iced",
                funcname: "User.load_sig_chain_from_storage"
              });
              SigChain.load(_this.id, ph, __iced_deferrals.defer({
                assign_fn: (function(__slot_1) {
                  return function() {
                    err = arguments[0];
                    return __slot_1.sig_chain = arguments[1];
                  };
                })(_this),
                lineno: 66
              }));
              __iced_deferrals._fulfill();
            })(__iced_k);
          } else {
            return __iced_k(_this.sig_chain = new SigChain(_this.id));
          }
        });
      })(this)((function(_this) {
        return function() {
          return cb(err);
        };
      })(this));
    };

    User.prototype.update_sig_chain = function(remote, cb) {
      var err, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      (function(_this) {
        return (function(__iced_k) {
          var _ref, _ref1;
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/max/src/keybase-node-client/src/user.iced",
            funcname: "User.update_sig_chain"
          });
          _this.sig_chain.update(remote != null ? (_ref = remote.sigs) != null ? (_ref1 = _ref.last) != null ? _ref1.seqno : void 0 : void 0 : void 0, __iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                return err = arguments[0];
              };
            })(),
            lineno: 74
          }));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          return cb(err);
        };
      })(this));
    };

    User.prototype.update_with = function(remote, cb) {
      var a, b, err, ___iced_passed_deferral, __iced_deferrals, __iced_k, _ref, _ref1;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      err = null;
      a = (_ref = this.basics) != null ? _ref.id_version : void 0;
      b = remote != null ? (_ref1 = remote.basics) != null ? _ref1.id_version : void 0 : void 0;
      if ((b == null) || a > b) {
        err = new E.VersionRollbackError("Server version-rollback suspected: Local " + a + " > " + b);
      } else if (a.id !== b.id) {
        err = new E.CorruptionError("Bad ids on user objects: " + a.id + " != " + b.id);
      } else if ((a == null) || a < b) {
        this.update_fields(remote);
      }
      (function(_this) {
        return (function(__iced_k) {
          if (err == null) {
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "/Users/max/src/keybase-node-client/src/user.iced",
                funcname: "User.update_with"
              });
              _this.update_sig_chain(remote, __iced_deferrals.defer({
                assign_fn: (function() {
                  return function() {
                    return err = arguments[0];
                  };
                })(),
                lineno: 93
              }));
              __iced_deferrals._fulfill();
            })(__iced_k);
          } else {
            return __iced_k();
          }
        });
      })(this)((function(_this) {
        return function() {
          return cb(err);
        };
      })(this));
    };

    User.load = function(_arg, cb) {
      var changed, err, esc, force_store, local, remote, username, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      username = _arg.username;
      esc = make_esc(cb, "User::load");
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/max/src/keybase-node-client/src/user.iced",
            funcname: "User.load"
          });
          User.load_from_server({
            username: username
          }, esc(__iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                return remote = arguments[0];
              };
            })(),
            lineno: 101
          })));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "/Users/max/src/keybase-node-client/src/user.iced",
              funcname: "User.load"
            });
            User.load_from_storage({
              username: username
            }, esc(__iced_deferrals.defer({
              assign_fn: (function() {
                return function() {
                  return local = arguments[0];
                };
              })(),
              lineno: 102
            })));
            __iced_deferrals._fulfill();
          })(function() {
            changed = true;
            force_store = false;
            (function(__iced_k) {
              if (typeof local !== "undefined" && local !== null) {
                (function(__iced_k) {
                  __iced_deferrals = new iced.Deferrals(__iced_k, {
                    parent: ___iced_passed_deferral,
                    filename: "/Users/max/src/keybase-node-client/src/user.iced",
                    funcname: "User.load"
                  });
                  local.update_with(remote, esc(__iced_deferrals.defer({
                    lineno: 106
                  })));
                  __iced_deferrals._fulfill();
                })(__iced_k);
              } else {
                return __iced_k(typeof remote !== "undefined" && remote !== null ? (local = remote, force_store = true) : err = new E.UserNotFoundError("User " + username + " wasn't found"));
              }
            })(function() {
              (function(__iced_k) {
                if (typeof err === "undefined" || err === null) {
                  (function(__iced_k) {
                    __iced_deferrals = new iced.Deferrals(__iced_k, {
                      parent: ___iced_passed_deferral,
                      filename: "/Users/max/src/keybase-node-client/src/user.iced",
                      funcname: "User.load"
                    });
                    local.store(force_store, esc(__iced_deferrals.defer({
                      lineno: 113
                    })));
                    __iced_deferrals._fulfill();
                  })(__iced_k);
                } else {
                  return __iced_k();
                }
              })(function() {
                return cb(err);
              });
            });
          });
        };
      })(this));
    };

    User.load_from_server = function(_arg, cb) {
      var args, body, err, ret, username, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      username = _arg.username;
      args = {
        endpoint: "user/lookup",
        args: {
          username: username
        }
      };
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/max/src/keybase-node-client/src/user.iced",
            funcname: "User.load_from_server"
          });
          req.get(args, __iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                err = arguments[0];
                return body = arguments[1];
              };
            })(),
            lineno: 122
          }));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          ret = null;
          if (typeof err === "undefined" || err === null) {
            ret = new User(body.them);
          }
          return cb(err, ret);
        };
      })(this));
    };

    User.load_from_storage = function(_arg, cb) {
      var err, ret, row, username, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      username = _arg.username;
      ret = null;
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/max/src/keybase-node-client/src/user.iced",
            funcname: "User.load_from_storage"
          });
          db.lookup({
            type: constants.lookups.username,
            name: username
          }, __iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                err = arguments[0];
                return row = arguments[1];
              };
            })(),
            lineno: 132
          }));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          (function(__iced_k) {
            if ((typeof err === "undefined" || err === null) && (typeof row !== "undefined" && row !== null)) {
              ret = new User(row.value);
              (function(__iced_k) {
                __iced_deferrals = new iced.Deferrals(__iced_k, {
                  parent: ___iced_passed_deferral,
                  filename: "/Users/max/src/keybase-node-client/src/user.iced",
                  funcname: "User.load_from_storage"
                });
                ret.load_sig_chain_from_storage(__iced_deferrals.defer({
                  assign_fn: (function() {
                    return function() {
                      return err = arguments[0];
                    };
                  })(),
                  lineno: 135
                }));
                __iced_deferrals._fulfill();
              })(function() {
                return __iced_k(typeof err !== "undefined" && err !== null ? ret = null : void 0);
              });
            } else {
              return __iced_k();
            }
          })(function() {
            return cb(err, ret);
          });
        };
      })(this));
    };

    return User;

  })();

}).call(this);
