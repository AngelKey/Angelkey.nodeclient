// Generated by IcedCoffeeScript 1.6.3-g
(function() {
  var BufferOutStream, E, SigChain, User, constants, db, deepeq, gpg, grep, iced, make_email, make_esc, parse, req, strip, __iced_k, __iced_k_noop, _ref;

  iced = require('iced-coffee-script/lib/coffee-script/iced').runtime;
  __iced_k = __iced_k_noop = function() {};

  req = require('./req');

  gpg = require('./gpg').gpg;

  db = require('./db');

  constants = require('./constants').constants;

  make_esc = require('iced-error').make_esc;

  E = require('./err').E;

  deepeq = require('deep-equal');

  SigChain = require('./sigchain').SigChain;

  _ref = require('./stream'), BufferOutStream = _ref.BufferOutStream, grep = _ref.grep;

  parse = require('pgp-utils').userid.parse;

  strip = function(x) {
    return x.replace(/\s+/g, '');
  };

  exports.make_email = make_email = function(un) {
    return un + "@" + constants.canonical_host;
  };

  exports.User = User = (function() {
    User.FIELDS = ["basics", "public_keys", "id", "sigs"];

    function User(args) {
      var k, _i, _len, _ref1;
      _ref1 = User.FIELDS;
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        k = _ref1[_i];
        this[k] = args[k];
      }
      this._dirty = false;
      this.sig_chain = null;
    }

    User.prototype.to_obj = function() {
      var k, out, _i, _len, _ref1;
      out = {};
      _ref1 = User.FIELDS;
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        k = _ref1[_i];
        out[k] = this[k];
      }
      return out;
    };

    User.prototype.name = function() {
      return {
        type: constants.lookups.username,
        name: this.basics.username
      };
    };

    User.prototype.store = function(force_store, cb) {
      var err, ___iced_passed_deferral, __iced_deferrals, __iced_k,
        _this = this;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      err = null;
      (function(__iced_k) {
        if (force_store || _this._dirty) {
          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "src/user.iced",
              funcname: "User.store"
            });
            db.put({
              key: _this.id,
              value: _this.to_obj(),
              name: _this.name()
            }, __iced_deferrals.defer({
              assign_fn: (function() {
                return function() {
                  return err = arguments[0];
                };
              })(),
              lineno: 53
            }));
            __iced_deferrals._fulfill();
          })(__iced_k);
        } else {
          return __iced_k();
        }
      })(function() {
        (function(__iced_k) {
          if ((_this.sig_chain != null) && (err == null)) {
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "src/user.iced",
                funcname: "User.store"
              });
              _this.sig_chain.store(__iced_deferrals.defer({
                assign_fn: (function() {
                  return function() {
                    return err = arguments[0];
                  };
                })(),
                lineno: 55
              }));
              __iced_deferrals._fulfill();
            })(__iced_k);
          } else {
            return __iced_k();
          }
        })(function() {
          return cb(err);
        });
      });
    };

    User.prototype.update_fields = function(remote) {
      var k, _i, _len, _ref1;
      _ref1 = User.FIELDS;
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        k = _ref1[_i];
        this.update_field(remote, k);
      }
      return true;
    };

    User.prototype.update_field = function(remote, which) {
      if (!(deepeq(this[which], remote[which]))) {
        this[which] = remote[which];
        return this._dirty = true;
      }
    };

    User.prototype.load_sig_chain_from_storage = function(cb) {
      var err, ph, ___iced_passed_deferral, __iced_deferrals, __iced_k, _ref1,
        _this = this;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      err = null;
      this.last_sig = ((_ref1 = this.sigs) != null ? _ref1.last : void 0) || {
        seqno: 0
      };
      (function(__iced_k) {
        if ((ph = _this.last_sig.payload_hash) != null) {
          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "src/user.iced",
              funcname: "User.load_sig_chain_from_storage"
            });
            SigChain.load(_this.id, ph, __iced_deferrals.defer({
              assign_fn: (function(__slot_1) {
                return function() {
                  err = arguments[0];
                  return __slot_1.sig_chain = arguments[1];
                };
              })(_this),
              lineno: 78
            }));
            __iced_deferrals._fulfill();
          })(__iced_k);
        } else {
          return __iced_k(_this.sig_chain = new SigChain(_this.id));
        }
      })(function() {
        return cb(err);
      });
    };

    User.prototype.load_full_sig_chain = function(cb) {
      var err, sc, ___iced_passed_deferral, __iced_deferrals, __iced_k,
        _this = this;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      sc = new SigChain(this.id);
      (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "src/user.iced",
          funcname: "User.load_full_sig_chain"
        });
        sc.update(null, __iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              return err = arguments[0];
            };
          })(),
          lineno: 87
        }));
        __iced_deferrals._fulfill();
      })(function() {
        if (typeof err === "undefined" || err === null) {
          _this.sig_chain = sc;
        }
        return cb(err);
      });
    };

    User.prototype.update_sig_chain = function(remote, cb) {
      var err, ___iced_passed_deferral, __iced_deferrals, __iced_k,
        _this = this;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      (function(__iced_k) {
        var _ref1, _ref2;
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "src/user.iced",
          funcname: "User.update_sig_chain"
        });
        _this.sig_chain.update(remote != null ? (_ref1 = remote.sigs) != null ? (_ref2 = _ref1.last) != null ? _ref2.seqno : void 0 : void 0 : void 0, __iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              return err = arguments[0];
            };
          })(),
          lineno: 94
        }));
        __iced_deferrals._fulfill();
      })(function() {
        return cb(err);
      });
    };

    User.prototype.update_with = function(remote, cb) {
      var a, b, err, ___iced_passed_deferral, __iced_deferrals, __iced_k, _ref1, _ref2,
        _this = this;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      err = null;
      a = (_ref1 = this.basics) != null ? _ref1.id_version : void 0;
      b = remote != null ? (_ref2 = remote.basics) != null ? _ref2.id_version : void 0 : void 0;
      if ((b == null) || a > b) {
        err = new E.VersionRollbackError("Server version-rollback suspected: Local " + a + " > " + b);
      } else if ((a == null) || a < b) {
        this.update_fields(remote);
      } else if (a !== b) {
        err = new E.CorruptionError("Bad ids on user objects: " + a.id + " != " + b.id);
      }
      (function(__iced_k) {
        if (err == null) {
          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "src/user.iced",
              funcname: "User.update_with"
            });
            _this.update_sig_chain(remote, __iced_deferrals.defer({
              assign_fn: (function() {
                return function() {
                  return err = arguments[0];
                };
              })(),
              lineno: 113
            }));
            __iced_deferrals._fulfill();
          })(__iced_k);
        } else {
          return __iced_k();
        }
      })(function() {
        return cb(err);
      });
    };

    User.load = function(_arg, cb) {
      var changed, err, esc, force_store, local, remote, username, ___iced_passed_deferral, __iced_deferrals, __iced_k,
        _this = this;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      username = _arg.username;
      esc = make_esc(cb, "User::load");
      (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "src/user.iced",
          funcname: "User.load"
        });
        User.load_from_server({
          username: username
        }, esc(__iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              return remote = arguments[0];
            };
          })(),
          lineno: 121
        })));
        __iced_deferrals._fulfill();
      })(function() {
        (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "src/user.iced",
            funcname: "User.load"
          });
          User.load_from_storage({
            username: username
          }, esc(__iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                return local = arguments[0];
              };
            })(),
            lineno: 122
          })));
          __iced_deferrals._fulfill();
        })(function() {
          changed = true;
          force_store = false;
          (function(__iced_k) {
            if (typeof local !== "undefined" && local !== null) {
              (function(__iced_k) {
                __iced_deferrals = new iced.Deferrals(__iced_k, {
                  parent: ___iced_passed_deferral,
                  filename: "src/user.iced",
                  funcname: "User.load"
                });
                local.update_with(remote, esc(__iced_deferrals.defer({
                  lineno: 126
                })));
                __iced_deferrals._fulfill();
              })(__iced_k);
            } else {
              (function(__iced_k) {
                if (typeof remote !== "undefined" && remote !== null) {
                  local = remote;
                  (function(__iced_k) {
                    __iced_deferrals = new iced.Deferrals(__iced_k, {
                      parent: ___iced_passed_deferral,
                      filename: "src/user.iced",
                      funcname: "User.load"
                    });
                    local.load_full_sig_chain(esc(__iced_deferrals.defer({
                      lineno: 129
                    })));
                    __iced_deferrals._fulfill();
                  })(function() {
                    return __iced_k(force_store = true);
                  });
                } else {
                  return __iced_k(err = new E.UserNotFoundError("User " + username + " wasn't found"));
                }
              })(__iced_k);
            }
          })(function() {
            (function(__iced_k) {
              if (typeof err === "undefined" || err === null) {
                (function(__iced_k) {
                  __iced_deferrals = new iced.Deferrals(__iced_k, {
                    parent: ___iced_passed_deferral,
                    filename: "src/user.iced",
                    funcname: "User.load"
                  });
                  local.store(force_store, esc(__iced_deferrals.defer({
                    lineno: 134
                  })));
                  __iced_deferrals._fulfill();
                })(__iced_k);
              } else {
                return __iced_k();
              }
            })(function() {
              return cb(err, local);
            });
          });
        });
      });
    };

    User.load_from_server = function(_arg, cb) {
      var args, body, err, ret, username, ___iced_passed_deferral, __iced_deferrals, __iced_k,
        _this = this;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      username = _arg.username;
      args = {
        endpoint: "user/lookup",
        args: {
          username: username
        }
      };
      (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "src/user.iced",
          funcname: "User.load_from_server"
        });
        req.get(args, __iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              err = arguments[0];
              return body = arguments[1];
            };
          })(),
          lineno: 143
        }));
        __iced_deferrals._fulfill();
      })(function() {
        ret = null;
        if (typeof err === "undefined" || err === null) {
          ret = new User(body.them);
        }
        return cb(err, ret);
      });
    };

    User.load_from_storage = function(_arg, cb) {
      var err, ret, row, username, ___iced_passed_deferral, __iced_deferrals, __iced_k,
        _this = this;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      username = _arg.username;
      ret = null;
      (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "src/user.iced",
          funcname: "User.load_from_storage"
        });
        db.lookup({
          type: constants.lookups.username,
          name: username
        }, __iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              err = arguments[0];
              return row = arguments[1];
            };
          })(),
          lineno: 153
        }));
        __iced_deferrals._fulfill();
      })(function() {
        (function(__iced_k) {
          if ((typeof err === "undefined" || err === null) && (typeof row !== "undefined" && row !== null)) {
            ret = new User(row.value);
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "src/user.iced",
                funcname: "User.load_from_storage"
              });
              ret.load_sig_chain_from_storage(__iced_deferrals.defer({
                assign_fn: (function() {
                  return function() {
                    return err = arguments[0];
                  };
                })(),
                lineno: 156
              }));
              __iced_deferrals._fulfill();
            })(function() {
              return __iced_k(typeof err !== "undefined" && err !== null ? ret = null : void 0);
            });
          } else {
            return __iced_k();
          }
        })(function() {
          return cb(err, ret);
        });
      });
    };

    User.prototype.query_key = function(_arg, cb) {
      var args, err, out, secret, ___iced_passed_deferral, __iced_deferrals, __iced_k,
        _this = this;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      secret = _arg.secret;
      (function(__iced_k) {
        var _ref1, _ref2, _ref3;
        if ((_this.fingerprint = (_ref1 = _this.public_keys) != null ? (_ref2 = _ref1.primary) != null ? (_ref3 = _ref2.key_fingerprint) != null ? _ref3.toUpperCase() : void 0 : void 0 : void 0) != null) {
          args = ["-" + (secret ? 'K' : 'k'), _this.fingerprint];
          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "src/user.iced",
              funcname: "User.query_key"
            });
            gpg({
              args: args,
              quiet: true
            }, __iced_deferrals.defer({
              assign_fn: (function() {
                return function() {
                  err = arguments[0];
                  return out = arguments[1];
                };
              })(),
              lineno: 166
            }));
            __iced_deferrals._fulfill();
          })(function() {
            return __iced_k(typeof err !== "undefined" && err !== null ? err = new E.NoLocalKeyError("the user " + (_this.username()) + " doesn't have a local key") : void 0);
          });
        } else {
          return __iced_k(err = new E.NoRemoteKeyError("the user " + (_this.username()) + " doesn't have a remote key"));
        }
      })(function() {
        return cb(err);
      });
    };

    User.prototype.check_public_key = function(cb) {
      var err, ___iced_passed_deferral, __iced_deferrals, __iced_k,
        _this = this;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "src/user.iced",
          funcname: "User.check_public_key"
        });
        _this.query_key({
          secret: false
        }, __iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              return err = arguments[0];
            };
          })(),
          lineno: 176
        }));
        __iced_deferrals._fulfill();
      })(function() {
        return cb(err);
      });
    };

    User.prototype.username = function() {
      return this.basics.username;
    };

    User.prototype.import_public_key = function(cb) {
      var args, data, err, found, out, state, uid, ___iced_passed_deferral, __iced_deferrals, __iced_k,
        _this = this;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      found = false;
      (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "src/user.iced",
          funcname: "User.import_public_key"
        });
        _this.query_key({
          secret: false
        }, __iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              return err = arguments[0];
            };
          })(),
          lineno: 187
        }));
        __iced_deferrals._fulfill();
      })(function() {
        (function(__iced_k) {
          if (typeof err === "undefined" || err === null) {
            return __iced_k(found = true);
          } else {
            (function(__iced_k) {
              if ((err instanceof E.NoLocalKeyError) == null) {
                return __iced_k();
              } else {
                (function(__iced_k) {
                  var _ref1, _ref2;
                  if ((data = (_ref1 = _this.public_keys) != null ? (_ref2 = _ref1.primary) != null ? _ref2.bundle : void 0 : void 0) == null) {
                    return __iced_k(err = new E.ImportError("no public key found for " + (_this.username())));
                  } else {
                    uid = _this.id;
                    state = constants.import_state.TEMPORARY;
                    (function(__iced_k) {
                      __iced_deferrals = new iced.Deferrals(__iced_k, {
                        parent: ___iced_passed_deferral,
                        filename: "src/user.iced",
                        funcname: "User.import_public_key"
                      });
                      db.log_key_import({
                        uid: uid,
                        state: state,
                        fingerprint: _this.fingerprint
                      }, __iced_deferrals.defer({
                        assign_fn: (function() {
                          return function() {
                            return err = arguments[0];
                          };
                        })(),
                        lineno: 195
                      }));
                      __iced_deferrals._fulfill();
                    })(function() {
                      (function(__iced_k) {
                        if (err == null) {
                          args = ["--import"];
                          (function(__iced_k) {
                            __iced_deferrals = new iced.Deferrals(__iced_k, {
                              parent: ___iced_passed_deferral,
                              filename: "src/user.iced",
                              funcname: "User.import_public_key"
                            });
                            gpg({
                              args: args,
                              stdin: data
                            }, __iced_deferrals.defer({
                              assign_fn: (function() {
                                return function() {
                                  err = arguments[0];
                                  return out = arguments[1];
                                };
                              })(),
                              lineno: 198
                            }));
                            __iced_deferrals._fulfill();
                          })(function() {
                            return __iced_k(err != null ? err = new E.ImportError("" + (_this.username()) + ": key import error: {err.message}") : void 0);
                          });
                        } else {
                          return __iced_k();
                        }
                      })(__iced_k);
                    });
                  }
                })(__iced_k);
              }
            })(__iced_k);
          }
        })(function() {
          return cb(err, found);
        });
      });
    };

    User.prototype.verify_sig = function(cb) {
      var a, args, b, err, last, m, out, stderr, ___iced_passed_deferral, __iced_deferrals, __iced_k,
        _this = this;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      err = null;
      (function(__iced_k) {
        if ((last = _this.sig_chain.last()) != null) {
          args = ["--decrypt"];
          stderr = new BufferOutStream();
          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "src/user.iced",
              funcname: "User.verify_sig"
            });
            gpg({
              args: args,
              stdin: last.sig(),
              stderr: stderr
            }, __iced_deferrals.defer({
              assign_fn: (function() {
                return function() {
                  err = arguments[0];
                  return out = arguments[1];
                };
              })(),
              lineno: 210
            }));
            __iced_deferrals._fulfill();
          })(function() {
            if (err != null) {
              err = new E.VerifyError("" + (_this.username()) + ": failed to verify signature");
            } else if ((m = stderr.data().toString('utf8').match(/Primary key fingerprint: (.*)/)) == null) {
              err = new E.VerifyError("" + (_this.username()) + ": can't parse PGP output in verify signature");
            } else if ((a = strip(m[1]).toLowerCase()) !== (b = last.fingerprint())) {
              err = new E.VerifyError("" + (_this.username()) + ": bad key: " + a + " != " + b);
            } else if ((a = out.toString('utf8')) !== (b = last.payload_json())) {
              err = new E.VerifyError("" + (_this.username()) + ": payload was wrong: " + a + " != " + b);
            }
            return __iced_k(err == null ? _this._fingerprint = last.fingerprint() : void 0);
          });
        } else {
          return __iced_k();
        }
      })(function() {
        return cb(err);
      });
    };

    User.prototype.read_uids_from_key = function(cb) {
      var args, err, line, lines, m, out, pattern, u, ___iced_passed_deferral, __iced_deferrals, __iced_k,
        _this = this;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      args = ["-k", this._fingerprint];
      (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "src/user.iced",
          funcname: "User.read_uids_from_key"
        });
        gpg({
          args: args,
          quiet: true
        }, __iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              err = arguments[0];
              return out = arguments[1];
            };
          })(),
          lineno: 229
        }));
        __iced_deferrals._fulfill();
      })(function() {
        if (typeof err === "undefined" || err === null) {
          pattern = /^uid\s+(.*)$/;
          lines = grep({
            buffer: out,
            pattern: pattern
          });
          out = (function() {
            var _i, _len, _results;
            _results = [];
            for (_i = 0, _len = lines.length; _i < _len; _i++) {
              line = lines[_i];
              if (((m = line.match(pattern)) != null) && ((u = parse(m[1])) != null)) {
                _results.push(u);
              }
            }
            return _results;
          })();
        }
        return cb(err, out);
      });
    };

    User.prototype.verify_userid = function(cb) {
      var email, emails, err, found, search_for, uids, ___iced_passed_deferral, __iced_deferrals, __iced_k,
        _this = this;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "src/user.iced",
          funcname: "User.verify_userid"
        });
        _this.read_uids_from_key(__iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              err = arguments[0];
              return uids = arguments[1];
            };
          })(),
          lineno: 239
        }));
        __iced_deferrals._fulfill();
      })(function() {
        found = null;
        if (typeof err === "undefined" || err === null) {
          search_for = make_email(_this.username());
          emails = (function() {
            var _i, _len, _results;
            _results = [];
            for (_i = 0, _len = uids.length; _i < _len; _i++) {
              email = uids[_i].email;
              _results.push(email);
            }
            return _results;
          })();
          found = emails.indexOf(search_for) >= 0;
        }
        if ((typeof err === "undefined" || err === null) && !found) {
          err = new E.VerifyError("could not find self signature of username '" + (_this.username()) + "'");
        }
        return cb(err);
      });
    };

    User.prototype.verify_signed_key = function(cb) {
      return cb(new E.NotImplementedError("not implemented"));
    };

    User.prototype.compress = function(cb) {
      var err, ___iced_passed_deferral, __iced_deferrals, __iced_k,
        _this = this;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      err = null;
      (function(__iced_k) {
        if (_this.sig_chain) {
          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "src/user.iced",
              funcname: "User.compress"
            });
            _this.sig_chain.compress(__iced_deferrals.defer({
              assign_fn: (function() {
                return function() {
                  return err = arguments[0];
                };
              })(),
              lineno: 258
            }));
            __iced_deferrals._fulfill();
          })(__iced_k);
        } else {
          return __iced_k();
        }
      })(function() {
        return cb(err);
      });
    };

    return User;

  })();

}).call(this);
