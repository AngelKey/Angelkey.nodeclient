// Generated by IcedCoffeeScript 1.7.1-a
(function() {
  var E, KeyManager, KeyPull, User, env, iced, log, make_esc, master_ring, req, session, __iced_k, __iced_k_noop;

  iced = require('iced-coffee-script').iced;
  __iced_k = __iced_k_noop = function() {};

  session = require('./session').session;

  make_esc = require('iced-error').make_esc;

  env = require('./env').env;

  log = require('./log');

  User = require('./user').User;

  req = require('./req');

  KeyManager = require('./keymanager').KeyManager;

  E = require('./err').E;

  master_ring = require('./keyring').master_ring;

  exports.KeyPull = KeyPull = (function() {
    function KeyPull(_arg) {
      this.force = _arg.force;
    }

    KeyPull.prototype.get_private_key = function(cb) {
      var body, err, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      log.debug("+ Fetching me.json from server");
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/max/src/keybase/node-client/src/keypull.iced",
            funcname: "KeyPull.get_private_key"
          });
          req.get({
            endpoint: "me"
          }, __iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                err = arguments[0];
                return body = arguments[1];
              };
            })(),
            lineno: 22
          }));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          var _ref, _ref1;
          if ((typeof err === "undefined" || err === null) && ((_this.p3skb = (_ref = body.me.private_keys) != null ? (_ref1 = _ref.primary) != null ? _ref1.bundle : void 0 : void 0) == null)) {
            err = new E.NoRemoteKeyError("no private key found on server");
          }
          log.debug("- fetched me");
          return cb(err);
        };
      })(this));
    };

    KeyPull.prototype.prompt_passphrase = function(cb) {
      var err, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/max/src/keybase/node-client/src/keypull.iced",
            funcname: "KeyPull.prompt_passphrase"
          });
          session.get_passphrase(__iced_deferrals.defer({
            assign_fn: (function(__slot_1) {
              return function() {
                err = arguments[0];
                return __slot_1.passphrase = arguments[1];
              };
            })(_this),
            lineno: 31
          }));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          return cb(err, _this.passphrase);
        };
      })(this));
    };

    KeyPull.prototype.unlock_key = function(cb) {
      var err, prompter, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      prompter = this.prompt_passphrase.bind(this);
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/max/src/keybase/node-client/src/keypull.iced",
            funcname: "KeyPull.unlock_key"
          });
          KeyManager.import_from_p3skb({
            raw: _this.p3skb,
            prompter: prompter
          }, __iced_deferrals.defer({
            assign_fn: (function(__slot_1) {
              return function() {
                err = arguments[0];
                return __slot_1.km = arguments[1];
              };
            })(_this),
            lineno: 38
          }));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          return cb(err);
        };
      })(this));
    };

    KeyPull.prototype.save = function(cb) {
      var err, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/max/src/keybase/node-client/src/keypull.iced",
            funcname: "KeyPull.save"
          });
          _this.km.save_to_ring({
            passphrase: _this.passphrase
          }, __iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                return err = arguments[0];
              };
            })(),
            lineno: 44
          }));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          return cb(err);
        };
      })(this));
    };

    KeyPull.prototype.check_key_exists = function(cb) {
      var err, esc, found, fp, key, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      log.debug("+ KeyPull::check_key_exists");
      esc = make_esc(cb, "KeyPull::check_key_exists");
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/max/src/keybase/node-client/src/keypull.iced",
            funcname: "KeyPull.check_key_exists"
          });
          User.load_me({
            secret: false,
            install_key: true
          }, esc(__iced_deferrals.defer({
            assign_fn: (function(__slot_1) {
              return function() {
                return __slot_1.me = arguments[0];
              };
            })(_this),
            lineno: 52
          })));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          key = master_ring().make_key_from_user(_this.me, true);
          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "/Users/max/src/keybase/node-client/src/keypull.iced",
              funcname: "KeyPull.check_key_exists"
            });
            key.find(__iced_deferrals.defer({
              assign_fn: (function() {
                return function() {
                  return err = arguments[0];
                };
              })(),
              lineno: 54
            }));
            __iced_deferrals._fulfill();
          })(function() {
            fp = _this.me.fingerprint(true);
            if ((typeof err !== "undefined" && err !== null) && (err instanceof E.NoLocalKeyError)) {
              found = false;
              if (_this.force) {
                log.debug("Couldn't find secret key w/ fingerprint " + fp);
              }
            } else if (typeof err === "undefined" || err === null) {
              found = true;
              if (_this.force) {
                log.info("Will overwrite existing secret key w/ fingerprint " + fp);
              }
            }
            log.debug("- KeyPull::check_key_exists -> " + found);
            return cb(err, found);
          });
        };
      })(this));
    };

    KeyPull.prototype.load_user = function(cb) {
      var ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      log.debug("+ KeyPull::load_user");
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/max/src/keybase/node-client/src/keypull.iced",
            funcname: "KeyPull.load_user"
          });
          User.load({
            username: env().get_username(),
            require_public_key: false
          }, esc(__iced_deferrals.defer({
            assign_fn: (function(__slot_1) {
              return function() {
                return __slot_1.me = arguments[0];
              };
            })(_this),
            lineno: 69
          })));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          log.debug("- KeyPull::load_user");
          return cb(null);
        };
      })(this));
    };

    KeyPull.prototype.run = function(cb) {
      var esc, skip, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      esc = make_esc(cb, "Command::run");
      log.debug("+ KeyPull::run");
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/max/src/keybase/node-client/src/keypull.iced",
            funcname: "KeyPull.run"
          });
          _this.check_key_exists(esc(__iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                return skip = arguments[0];
              };
            })(),
            lineno: 79
          })));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          if (_this.force) {
            skip = false;
          }
          (function(__iced_k) {
            if (!skip) {
              (function(__iced_k) {
                __iced_deferrals = new iced.Deferrals(__iced_k, {
                  parent: ___iced_passed_deferral,
                  filename: "/Users/max/src/keybase/node-client/src/keypull.iced",
                  funcname: "KeyPull.run"
                });
                _this.get_private_key(esc(__iced_deferrals.defer({
                  lineno: 82
                })));
                __iced_deferrals._fulfill();
              })(function() {
                (function(__iced_k) {
                  __iced_deferrals = new iced.Deferrals(__iced_k, {
                    parent: ___iced_passed_deferral,
                    filename: "/Users/max/src/keybase/node-client/src/keypull.iced",
                    funcname: "KeyPull.run"
                  });
                  _this.unlock_key(esc(__iced_deferrals.defer({
                    lineno: 83
                  })));
                  __iced_deferrals._fulfill();
                })(function() {
                  (function(__iced_k) {
                    __iced_deferrals = new iced.Deferrals(__iced_k, {
                      parent: ___iced_passed_deferral,
                      filename: "/Users/max/src/keybase/node-client/src/keypull.iced",
                      funcname: "KeyPull.run"
                    });
                    _this.save(esc(__iced_deferrals.defer({
                      lineno: 84
                    })));
                    __iced_deferrals._fulfill();
                  })(__iced_k);
                });
              });
            } else {
              return __iced_k();
            }
          })(function() {
            log.debug("- KeyPull::run");
            return cb(null);
          });
        };
      })(this));
    };

    return KeyPull;

  })();

}).call(this);
