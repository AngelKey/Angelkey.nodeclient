// Generated by IcedCoffeeScript 1.6.3-i
(function() {
  var Env, FN, RunMode, SRV, constants, home, join, _env;

  home = require('./path').home;

  join = require('path').join;

  constants = require('./constants').constants;

  FN = constants.filenames;

  SRV = constants.server;

  RunMode = (function() {
    RunMode.prototype.DEVEL = 0;

    RunMode.prototype.PROD = 1;

    function RunMode(s) {
      var m, t, _ref;
      t = {
        devel: this.DEVEL,
        prod: this.PROD
      };
      _ref = (s != null) && ((m = t[s]) != null) ? [m, s, true] : [this.PROD, "prod", false], this._v = _ref[0], this._name = _ref[1], this._chosen = _ref[2];
    }

    RunMode.prototype.is_devel = function() {
      return this._v === this.DEVEL;
    };

    RunMode.prototype.is_prod = function() {
      return this._v === this.PROD;
    };

    RunMode.prototype.toString = function() {
      return this._name;
    };

    RunMode.prototype.chosen = function() {
      return this._chosen;
    };

    RunMode.prototype.config_dir = function() {
      return this._name;
    };

    return RunMode;

  })();

  Env = (function() {
    function Env() {
      this.env = process.env;
      this.argv = null;
      this.config = null;
      this.session = null;
    }

    Env.prototype.set_config = function(c) {
      return this.config = c;
    };

    Env.prototype.set_session = function(s) {
      return this.session = s;
    };

    Env.prototype.set_argv = function(a) {
      return this.argv = a;
    };

    Env.prototype.get_opt = function(_arg) {
      var arg, co, config, dflt, env, _ref;
      env = _arg.env, arg = _arg.arg, config = _arg.config, dflt = _arg.dflt;
      co = (_ref = this.config) != null ? _ref.obj() : void 0;
      return (typeof env === "function" ? env(this.env) : void 0) || (typeof arg === "function" ? arg(this.argv) : void 0) || ((co != null) && (typeof config === "function" ? config(co) : void 0)) || (typeof dflt === "function" ? dflt() : void 0) || null;
    };

    Env.prototype.get_port = function() {
      return this.get_opt({
        env: function(e) {
          return e.KEYBASE_PORT;
        },
        arg: function(a) {
          return a.port;
        },
        config: function(c) {
          var _ref;
          return (_ref = c.server) != null ? _ref.port : void 0;
        },
        dflt: function() {
          return SRV.port;
        }
      });
    };

    Env.prototype.get_config_filename = function() {
      return this.get_opt({
        env: function(e) {
          return e.KEYBASE_CONFIG_FILE;
        },
        arg: function(a) {
          return a.config;
        },
        dflt: function() {
          return join(home(), FN.config_dir, FN.config_file);
        }
      });
    };

    Env.prototype.get_session_filename = function() {
      return this.get_opt({
        env: function(e) {
          return e.KEYBASE_SESSION_FILE;
        },
        arg: function(a) {
          return a["session-file"];
        },
        config: function(c) {
          var _ref;
          return c != null ? (_ref = c.files) != null ? _ref.session : void 0 : void 0;
        },
        dflt: function() {
          return join(home(), FN.config_dir, FN.session_file);
        }
      });
    };

    Env.prototype.get_db_filename = function() {
      return this.get_opt({
        env: function(e) {
          return e.KEYBASE_DB_FILE;
        },
        arg: function(a) {
          return a["db-file"];
        },
        config: function(c) {
          var _ref;
          return c != null ? (_ref = c.files) != null ? _ref.db : void 0 : void 0;
        },
        dflt: function() {
          return join(home(), FN.config_dir, FN.db_file);
        }
      });
    };

    Env.prototype.get_host = function() {
      return this.get_opt({
        env: function(e) {
          return e.KEYBASE_HOST;
        },
        arg: function(a) {
          return a.host;
        },
        config: function(c) {
          var _ref;
          return (_ref = c.server) != null ? _ref.host : void 0;
        },
        dflt: function() {
          return SRV.host;
        }
      });
    };

    Env.prototype.get_debug = function() {
      return this.get_opt({
        env: function(e) {
          return e.KEYBASE_DEBUG;
        },
        arg: function(a) {
          return a.debug;
        },
        config: function(c) {
          var _ref;
          return (_ref = c.run) != null ? _ref.d : void 0;
        },
        dflt: function() {
          return false;
        }
      });
    };

    Env.prototype.get_no_tls = function() {
      return this.get_opt({
        env: function(e) {
          return e.KEYBASE_NO_TLS;
        },
        arg: function(a) {
          return a["no-tls"];
        },
        config: function(c) {
          var _ref;
          return (_ref = c.server) != null ? _ref.no_tls : void 0;
        },
        dflt: function() {
          return SRV.no_tls;
        }
      });
    };

    Env.prototype.get_api_uri_prefix = function() {
      return this.get_opt({
        env: function(e) {
          return e.KEYBASE_API_URI_PREFIX;
        },
        arg: function(a) {
          return a["api-uri-prefix"];
        },
        config: function(c) {
          var _ref;
          return (_ref = c.server) != null ? _ref.api_uri_prefix : void 0;
        },
        dflt: function() {
          return SRV.api_uri_prefix;
        }
      });
    };

    Env.prototype.get_run_mode = function() {
      var raw;
      if (!this._run_mode) {
        raw = this.get_opt({
          env: function(e) {
            return e.KEYBASE_RUN_MODE;
          },
          arg: function(a) {
            return a.m;
          },
          config: function(c) {
            var _ref;
            return (_ref = c.run) != null ? _ref.mode : void 0;
          },
          dflt: null
        });
        this._run_mode = new RunMode(raw);
      }
      return this._run_mode;
    };

    Env.prototype.get_log_level = function() {
      return this.get_opt({
        env: function(e) {
          return e.KEYBASE_LOG_LEVEL;
        },
        arg: function(a) {
          return a.l;
        },
        config: function(c) {
          var _ref;
          return (_ref = c.run) != null ? _ref.log_level : void 0;
        },
        dflt: function() {
          return null;
        }
      });
    };

    Env.prototype.get_passphrase = function() {
      return this.get_opt({
        env: function(e) {
          return e.KEYBASE_PASSPHRASE;
        },
        arg: function(a) {
          return a.passphrase;
        },
        config: function(c) {
          var _ref;
          return (_ref = c.user) != null ? _ref.passphrase : void 0;
        },
        dflt: function() {
          return null;
        }
      });
    };

    Env.prototype.get_username = function() {
      return this.get_opt({
        env: function(e) {
          return e.KEYBASE_USERNAME;
        },
        arg: function(a) {
          return a.username;
        },
        config: function(c) {
          var _ref;
          return (_ref = c.user) != null ? _ref.name : void 0;
        },
        dflt: function() {
          return null;
        }
      });
    };

    Env.prototype.get_uid = function() {
      return this.get_opt({
        env: function(e) {
          return e.KEYBASE_UID;
        },
        arg: function(a) {
          return a.uid;
        },
        config: function(c) {
          var _ref;
          return (_ref = c.user) != null ? _ref.id : void 0;
        },
        dflt: function() {
          return null;
        }
      });
    };

    Env.prototype.get_email = function() {
      return this.get_opt({
        env: function(e) {
          return e.KEYBASE_EMAIL;
        },
        arg: function(a) {
          return a.email;
        },
        config: function(c) {
          var _ref;
          return (_ref = c.user) != null ? _ref.email : void 0;
        },
        dflt: function() {
          return null;
        }
      });
    };

    Env.prototype.get_args = function() {
      return this.argv._;
    };

    Env.prototype.get_argv = function() {
      return this.argv;
    };

    return Env;

  })();

  _env = null;

  exports.init_env = function(a) {
    return _env = new Env;
  };

  exports.env = function() {
    return _env;
  };

}).call(this);
