// Generated by IcedCoffeeScript 1.6.3-g
(function() {
  var Config, fs, iced, log, mkdirp, path, util, __iced_k, __iced_k_noop;

  iced = require('iced-coffee-script/lib/coffee-script/iced').runtime;
  __iced_k = __iced_k_noop = function() {};

  path = require('path');

  fs = require('fs');

  log = require('./log');

  util = require('util');

  mkdirp = require('mkdirp');

  exports.Config = Config = (function() {
    function Config() {
      this.json = null;
      this.loaded = false;
      this.cache = {};
    }

    Config.prototype.init = function(fn) {
      var f;
      return this.filename = fn != null ? fn : (f = process.env.MKB_CONFIG) != null ? f : path.join(process.env.HOME, ".mkb.conf");
    };

    Config.prototype.find = function(file, cb) {
      var ___iced_passed_deferral, __iced_deferrals, __iced_k,
        _this = this;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      this.init(file);
      (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "src/config.iced",
          funcname: "Config.find"
        });
        fs.exists(_this.filename, __iced_deferrals.defer({
          assign_fn: (function(__slot_1) {
            return function() {
              return __slot_1.found = arguments[0];
            };
          })(_this),
          lineno: 29
        }));
        __iced_deferrals._fulfill();
      })(function() {
        return cb(_this.found);
      });
    };

    Config.prototype.write = function(cb) {
      var dat, err, ok, ___iced_passed_deferral, __iced_deferrals, __iced_k,
        _this = this;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      dat = JSON.stringify(this.json, null, "    ");
      (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "src/config.iced",
          funcname: "Config.write"
        });
        fs.writeFile(_this.filename, dat, {
          mode: 0x180
        }, __iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              return err = arguments[0];
            };
          })(),
          lineno: 36
        }));
        __iced_deferrals._fulfill();
      })(function() {
        ok = true;
        if (typeof err !== "undefined" && err !== null) {
          log.error("Error writing to " + _this.filename + ": " + err);
          ok = false;
        }
        return cb(ok);
      });
    };

    Config.prototype.set = function(key, val) {
      var d, p, parts, _i, _len, _ref;
      parts = key.split(".");
      if (this.json == null) {
        this.json = {};
      }
      d = this.json;
      _ref = parts.slice(0, parts.length - 1);
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        p = _ref[_i];
        if (d[p] == null) {
          d[p] = {};
        }
        d = d[p];
      }
      return d[parts[parts.length - 1]] = val;
    };

    Config.prototype.load = function(cb) {
      var e, err, file, key, ok, ___iced_passed_deferral, __iced_deferrals, __iced_k,
        _this = this;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      ok = true;
      (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "src/config.iced",
          funcname: "Config.load"
        });
        fs.readFile(_this.filename, __iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              err = arguments[0];
              return file = arguments[1];
            };
          })(),
          lineno: 59
        }));
        __iced_deferrals._fulfill();
      })(function() {
        var _i, _len, _ref, _ref1, _ref2;
        if (typeof err !== "undefined" && err !== null) {
          log.error("Cannot read file " + _this.filename + ": " + err);
          ok = false;
        }
        if (ok) {
          try {
            _this.json = JSON.parse(file);
          } catch (_error) {
            e = _error;
            log.error("Invalid json in " + _this.filename + ": " + e);
            ok = false;
          }
        }
        if (ok) {
          _ref = ['aws', 'vault'];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            key = _ref[_i];
            if (((_ref1 = _this.json) != null ? _ref1[key] : void 0) == null) {
              if (((_ref2 = _this.json) != null ? _ref2[key] : void 0) == null) {
                log.error("Missing JSON component '" + key + "' in " + _this.filename);
              }
              ok = false;
            }
          }
        }
        if (!ok) {
          log.warn("Failed to load config");
        }
        return cb(ok);
      });
    };

    Config.prototype.tmpdir = function() {
      var _ref, _ref1, _ref2;
      if (this._tmpdir == null) {
        this._tmpdir = ((_ref = this.config) != null ? (_ref1 = _ref.json) != null ? (_ref2 = _ref1.files) != null ? _ref2.dir : void 0 : void 0 : void 0) || (path.join(path.sep, "tmp", "mkb"));
      }
      return this._tmpdir;
    };

    Config.prototype._get_file = function(which) {
      var f, _ref, _ref1, _ref2;
      if ((f = this.cache[which]) == null) {
        f = ((_ref = this.config) != null ? (_ref1 = _ref.json) != null ? (_ref2 = _ref1.files) != null ? _ref2[which] : void 0 : void 0 : void 0) || path.join(this.tmpdir(), "mkb." + which);
        this.cache[which] = f;
      }
      return f;
    };

    Config.prototype.sockfile = function() {
      return this._get_file("sock");
    };

    Config.prototype.pidfile = function() {
      return this._get_file("pid");
    };

    Config.prototype.logfile = function() {
      return this._get_file("log");
    };

    Config.prototype.pidfile = function(cb) {
      var _ref, _ref1, _ref2;
      if (this._pidfile == null) {
        this._pidfile = ((_ref = this.config) != null ? (_ref1 = _ref.json) != null ? (_ref2 = _ref1.files) != null ? _ref2.pid : void 0 : void 0 : void 0) || (path.join(this.tmpdir(), "mkb.pid"));
      }
      return this._pidfile;
    };

    Config.prototype.make_tmpdir = function(cb) {
      var err, n, ___iced_passed_deferral, __iced_deferrals, __iced_k,
        _this = this;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      n = this.tmpdir();
      (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "src/config.iced",
          funcname: "Config.make_tmpdir"
        });
        mkdirp(n, __iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              return err = arguments[0];
            };
          })(),
          lineno: 111
        }));
        __iced_deferrals._fulfill();
      })(function() {
        if (typeof err !== "undefined" && err !== null) {
          log.error("Error making temp dir " + n + ": " + err);
        }
        return cb(typeof err === "undefined" || err === null);
      });
    };

    Config.prototype.file_extension = function() {
      return this.json.file_extension || "mke";
    };

    Config.prototype.obj = function() {
      return this.json;
    };

    Config.prototype.email = function() {
      return this.json.email;
    };

    Config.prototype.salt = function() {
      return this.json.salt;
    };

    Config.prototype.password = function() {
      return this.json.password;
    };

    return Config;

  })();

}).call(this);
