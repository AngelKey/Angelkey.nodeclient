// Generated by IcedCoffeeScript 1.6.3-g
(function() {
  var Prompter, checkers, d, err, iced, log, p, read, __iced_deferrals, __iced_k, __iced_k_noop,
    _this = this;

  iced = require('iced-coffee-script/lib/coffee-script/iced').runtime;
  __iced_k = __iced_k_noop = function() {};

  read = require('read');

  checkers = require('./checkers').checkers;

  log = require('./log');

  Prompter = (function() {
    function Prompter(_fields) {
      this._fields = _fields;
      this._data = {};
    }

    Prompter.prototype.data = function() {
      return this._data;
    };

    Prompter.prototype.clear = function(k) {
      return delete this._data[k];
    };

    Prompter.prototype.run = function(cb) {
      var err, k, v, ___iced_passed_deferral, __iced_deferrals, __iced_k,
        _this = this;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      err = null;
      (function(__iced_k) {
        var _i, _k, _keys, _ref, _results, _while;
        _ref = _this._fields;
        _keys = (function() {
          var _results1;
          _results1 = [];
          for (_k in _ref) {
            _results1.push(_k);
          }
          return _results1;
        })();
        _i = 0;
        _results = [];
        _while = function(__iced_k) {
          var _break, _continue, _next;
          _break = function() {
            return __iced_k(_results);
          };
          _continue = function() {
            return iced.trampoline(function() {
              ++_i;
              return _while(__iced_k);
            });
          };
          _next = function(__iced_next_arg) {
            _results.push(__iced_next_arg);
            return _continue();
          };
          if (!(_i < _keys.length)) {
            return _break();
          } else {
            k = _keys[_i];
            v = _ref[k];
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "src/prompter.iced",
                funcname: "Prompter.run"
              });
              _this.read_field(k, v, __iced_deferrals.defer({
                assign_fn: (function() {
                  return function() {
                    return err = arguments[0];
                  };
                })(),
                lineno: 18
              }));
              __iced_deferrals._fulfill();
            })(function() {
              (function(__iced_k) {
                if (err != null) {
                  (function(__iced_k) {
_break()
                  })(__iced_k);
                } else {
                  return __iced_k();
                }
              })(_next);
            });
          }
        };
        _while(__iced_k);
      })(function() {
        return cb(err);
      });
    };

    Prompter.prototype.read_field = function(k, _arg, cb) {
      var checker, confirm, d, err, first, isDefault, obj, ok, p, password, prompt, res, res2, ___iced_passed_deferral, __iced_deferrals, __iced_k,
        _this = this;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      prompt = _arg.prompt, password = _arg.password, checker = _arg.checker, confirm = _arg.confirm;
      err = null;
      ok = false;
      first = true;
      (function(__iced_k) {
        var _results, _while;
        _results = [];
        _while = function(__iced_k) {
          var _break, _continue, _next;
          _break = function() {
            return __iced_k(_results);
          };
          _continue = function() {
            return iced.trampoline(function() {
              return _while(__iced_k);
            });
          };
          _next = function(__iced_next_arg) {
            _results.push(__iced_next_arg);
            return _continue();
          };
          if (!!ok) {
            return _break();
          } else {
            p = first ? prompt + ": " : prompt + " (" + checker.hint + "): ";
            first = false;
            obj = {
              prompt: p
            };
            if (password) {
              obj.silent = true;
              obj.replace = "*";
            }
            if ((d = _this._data[k]) != null) {
              obj["default"] = d;
              obj.edit = true;
            }
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "src/prompter.iced",
                funcname: "Prompter.read_field"
              });
              read(obj, __iced_deferrals.defer({
                assign_fn: (function() {
                  return function() {
                    err = arguments[0];
                    res = arguments[1];
                    return isDefault = arguments[2];
                  };
                })(),
                lineno: 41
              }));
              __iced_deferrals._fulfill();
            })(function() {
              (function(__iced_k) {
                if (err != null) {
                  (function(__iced_k) {
_break()
                  })(__iced_k);
                } else {
                  return __iced_k();
                }
              })(function() {
                (function(__iced_k) {
                  if (((checker != null ? checker.f : void 0) != null) && !checker.f(res)) {
                    return __iced_k(ok = false);
                  } else {
                    (function(__iced_k) {
                      if ((confirm == null) || isDefault) {
                        return __iced_k(ok = true);
                      } else {
                        delete obj["default"];
                        obj.edit = false;
                        obj.prompt = confirm.prompt + ": ";
                        (function(__iced_k) {
                          __iced_deferrals = new iced.Deferrals(__iced_k, {
                            parent: ___iced_passed_deferral,
                            filename: "src/prompter.iced",
                            funcname: "Prompter.read_field"
                          });
                          read(obj, __iced_deferrals.defer({
                            assign_fn: (function() {
                              return function() {
                                err = arguments[0];
                                return res2 = arguments[1];
                              };
                            })(),
                            lineno: 50
                          }));
                          __iced_deferrals._fulfill();
                        })(function() {
                          return __iced_k(res2 !== res ? (ok = false, log.warn("Passphrases didn't match! Try again.")) : ok = true);
                        });
                      }
                    })(__iced_k);
                  }
                })(function() {
                  return _next(ok ? !isDefault ? _this._data[k] = res : void 0 : void 0);
                });
              });
            });
          }
        };
        _while(__iced_k);
      })(function() {
        return cb(err);
      });
    };

    return Prompter;

  })();

  d = {
    username: {
      prompt: "Your desired username",
      checker: checkers.username
    },
    password: {
      prompt: "Your passphrase",
      password: true,
      checker: checkers.password,
      confirm: {
        prompt: "confirm passphrase"
      }
    },
    email: {
      prompt: "Your email",
      checker: checkers.email
    }
  };

  p = new Prompter(d);

  (function(__iced_k) {
    __iced_deferrals = new iced.Deferrals(__iced_k, {
      filename: "src/prompter.iced"
    });
    p.run(__iced_deferrals.defer({
      assign_fn: (function() {
        return function() {
          return err = arguments[0];
        };
      })(),
      lineno: 78
    }));
    __iced_deferrals._fulfill();
  })(function() {
    console.log(p.data());
    p.clear("email");
    (function(__iced_k) {
      __iced_deferrals = new iced.Deferrals(__iced_k, {
        filename: "src/prompter.iced"
      });
      p.run(__iced_deferrals.defer({
        assign_fn: (function() {
          return function() {
            return err = arguments[0];
          };
        })(),
        lineno: 81
      }));
      __iced_deferrals._fulfill();
    })(function() {
      return console.log(p.data());
    });
  });

}).call(this);
