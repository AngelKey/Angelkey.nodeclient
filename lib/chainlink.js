// Generated by IcedCoffeeScript 1.7.1-c
(function() {
  var ACCTYPES, BTC, CHECK, Cryptocurrency, E, Link, RemoteProof, Revoke, SHA256, ST, SelfSig, Track, Untrack, Warnings, asyncify, athrow, bitcoyne, cheerio, colors, constants, date_to_unix, db, deq, dict_union, env, format_fingerprint, iced, log, make_email, make_esc, merkle_client, proofs, req, request, scrapemod, util, __iced_k, __iced_k_noop, _ref, _ref1, _ref2,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  iced = require('iced-runtime').iced;
  __iced_k = __iced_k_noop = function() {};

  db = require('./db');

  req = require('./req');

  log = require('./log');

  constants = require('./constants').constants;

  SHA256 = require('./keyutils').SHA256;

  E = require('./err').E;

  _ref = require('pgp-utils').util, format_fingerprint = _ref.format_fingerprint, Warnings = _ref.Warnings, asyncify = _ref.asyncify;

  make_esc = require('iced-error').make_esc;

  ST = constants.signature_types;

  ACCTYPES = constants.allowed_cryptocurrency_types;

  _ref1 = require('./util'), dict_union = _ref1.dict_union, date_to_unix = _ref1.date_to_unix, make_email = _ref1.make_email;

  proofs = require('keybase-proofs');

  cheerio = require('cheerio');

  request = require('request');

  colors = require('./colors');

  deq = require('deep-equal');

  util = require('util');

  env = require('./env').env;

  scrapemod = require('./scrapers');

  _ref2 = require('./display'), CHECK = _ref2.CHECK, BTC = _ref2.BTC;

  athrow = require('iced-utils').util.athrow;

  merkle_client = require('./merkle_client').merkle_client;

  bitcoyne = require('bitcoyne');

  exports.Link = Link = (function() {
    Link.ID_TYPE = constants.ids.sig_chain_link;

    function Link(_arg) {
      this.id = _arg.id, this.obj = _arg.obj;
      this.id || (this.id = this.obj.payload_hash);
      this._revoked = false;
    }

    Link.prototype.export_to_user = function() {
      return {
        seqno: this.seqno(),
        payload_hash: this.id,
        sig_id: this.sig_id()
      };
    };

    Link.prototype.prev = function() {
      return this.obj.prev;
    };

    Link.prototype.seqno = function() {
      return this.obj.seqno;
    };

    Link.prototype.sig = function() {
      return this.obj.sig;
    };

    Link.prototype.payload_json_str = function() {
      return this.obj.payload_json;
    };

    Link.prototype.fingerprint = function() {
      return this.obj.fingerprint.toLowerCase();
    };

    Link.prototype.short_key_id = function() {
      return this.fingerprint().slice(-8).toUpperCase();
    };

    Link.prototype.is_self_sig = function() {
      var _ref3;
      return (_ref3 = this.sig_type()) === ST.SELF_SIG || _ref3 === ST.REMOTE_PROOF || _ref3 === ST.TRACK;
    };

    Link.prototype.self_signer = function() {
      var _ref3, _ref4, _ref5;
      return (_ref3 = this.payload_json()) != null ? (_ref4 = _ref3.body) != null ? (_ref5 = _ref4.key) != null ? _ref5.username : void 0 : void 0 : void 0;
    };

    Link.prototype.proof_service_object = function() {
      var _ref3, _ref4;
      return (_ref3 = this.payload_json()) != null ? (_ref4 = _ref3.body) != null ? _ref4.service : void 0 : void 0;
    };

    Link.prototype.remote_username = function() {
      var _ref3;
      return (_ref3 = this.proof_service_object()) != null ? _ref3.username : void 0;
    };

    Link.prototype.sig_type = function() {
      return this.obj.sig_type;
    };

    Link.prototype.proof_type = function() {
      return this.obj.proof_type;
    };

    Link.prototype.proof_state = function() {
      return this.obj.proof_state;
    };

    Link.prototype.sig_id = function() {
      return this.obj.sig_id;
    };

    Link.prototype.api_url = function() {
      return this.obj.api_url;
    };

    Link.prototype.human_url = function() {
      return this.obj.human_url;
    };

    Link.prototype.proof_text_check = function() {
      return this.obj.proof_text_check;
    };

    Link.prototype.remote_id = function() {
      return this.obj.remote_id;
    };

    Link.prototype.body = function() {
      var _ref3;
      return (_ref3 = this.payload_json()) != null ? _ref3.body : void 0;
    };

    Link.prototype.ctime = function() {
      return date_to_unix(this.obj.ctime);
    };

    Link.prototype.revoke = function() {
      return this._revoked = true;
    };

    Link.prototype.is_revoked = function() {
      return this._revoked;
    };

    Link.prototype.get_sub_id = function() {
      var _ref3;
      return (_ref3 = scrapemod.alloc_stub(this.proof_type())) != null ? _ref3.get_sub_id(this.proof_service_object()) : void 0;
    };

    Link.prototype.to_cryptocurrency = function(opts) {
      var _ref3;
      return (_ref3 = this.body()) != null ? _ref3.cryptocurrency : void 0;
    };

    Link.prototype.to_list_display = function(opts) {
      var name, _ref3;
      name = (_ref3 = scrapemod.alloc_stub(this.proof_type())) != null ? _ref3.to_list_display(this.proof_service_object()) : void 0;
      if ((opts != null ? opts.with_sig_ids : void 0) || ((opts != null ? opts.with_proof_states : void 0) != null)) {
        return {
          name: name,
          sig_id: this.sig_id(),
          proof_state: this.proof_state()
        };
      } else {
        return name;
      }
    };

    Link.prototype.to_table_obj = function() {
      var ret;
      ret = this.body().track;
      ret.ctime = this.ctime();
      return ret;
    };

    Link.prototype.to_track_obj = function() {
      return {
        seqno: this.seqno(),
        sig_id: this.sig_id(),
        payload_hash: this.id
      };
    };

    Link.prototype.payload_json = function() {
      var e, ret, s;
      if (this._payload_obj == null) {
        s = this.payload_json_str();
        ret = {};
        try {
          ret = JSON.parse(s);
        } catch (_error) {
          e = _error;
          log.error("Error parsing JSON " + s + ": " + e.message);
        }
        this._payload_obj = ret;
      }
      return this._payload_obj;
    };

    Link.prototype.verify = function() {
      var a, b, err, j;
      err = null;
      if ((a = this.obj.payload_hash) !== (b = this.id)) {
        err = new E.CorruptionError("Link ID mismatch: " + a + " != " + b);
      } else if ((j = SHA256(this.payload_json_str()).toString('hex')) !== this.id) {
        err = new E.CorruptionError("Link has wrong id: " + this.id + " != " + this.j);
      }
      return err;
    };

    Link.prototype.store = function(cb) {
      var err, ___iced_passed_deferral, __iced_deferrals, __iced_k, _ref3;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      if (((_ref3 = this.obj.prev) != null ? _ref3.length : void 0) === 0) {
        this.obj.prev = null;
      }
      log.debug("| putting link: " + this.id);
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/max/src/keybase/node-client/src/chainlink.iced",
            funcname: "Link.store"
          });
          db.put({
            type: Link.ID_TYPE,
            key: _this.id,
            value: _this.obj
          }, __iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                return err = arguments[0];
              };
            })(),
            lineno: 129
          }));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          return cb(err);
        };
      })(this));
    };

    Link.prototype.refresh = function(cb) {
      var arg, body, err, row, u, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      log.debug("+ refresh link");
      (function(_this) {
        return (function(__iced_k) {
          if ((_this.sig_type() === ST.REMOTE_PROOF) && (_this.api_url() == null)) {
            log.debug("| Proof_id = " + _this.obj.proof_id);
            arg = {
              endpoint: "sig/remote_proof",
              args: {
                proof_id: _this.obj.proof_id
              }
            };
            log.debug("| request proof refresh for id=" + _this.obj.proof_id);
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "/Users/max/src/keybase/node-client/src/chainlink.iced",
                funcname: "Link.refresh"
              });
              req.get(arg, __iced_deferrals.defer({
                assign_fn: (function() {
                  return function() {
                    err = arguments[0];
                    return body = arguments[1];
                  };
                })(),
                lineno: 144
              }));
              __iced_deferrals._fulfill();
            })(function() {
              (function(__iced_k) {
                if ((typeof err === "undefined" || err === null) && ((row = typeof body !== "undefined" && body !== null ? body.row : void 0) != null) && ((u = row.api_url) != null)) {
                  log.debug("| Refreshed with api_url -> " + u);
                  _this.obj.api_url = u;
                  _this.obj.human_url = row.human_url;
                  (function(__iced_k) {
                    __iced_deferrals = new iced.Deferrals(__iced_k, {
                      parent: ___iced_passed_deferral,
                      filename: "/Users/max/src/keybase/node-client/src/chainlink.iced",
                      funcname: "Link.refresh"
                    });
                    _this.store(__iced_deferrals.defer({
                      assign_fn: (function() {
                        return function() {
                          return err = arguments[0];
                        };
                      })(),
                      lineno: 149
                    }));
                    __iced_deferrals._fulfill();
                  })(__iced_k);
                } else {
                  return __iced_k();
                }
              })(__iced_k);
            });
          } else {
            return __iced_k();
          }
        });
      })(this)((function(_this) {
        return function() {
          log.debug("- refresh_link");
          return cb(err);
        };
      })(this));
    };

    Link.alloc = function(_arg) {
      var id, klass, obj;
      obj = _arg.obj, id = _arg.id;
      klass = (function() {
        switch (obj.sig_type) {
          case ST.SELF_SIG:
            return SelfSig;
          case ST.REMOTE_PROOF:
            return RemoteProof;
          case ST.TRACK:
            return Track;
          case ST.CRYPTOCURRENCY:
            return Cryptocurrency;
          case ST.REVOKE:
            return Revoke;
          case ST.UNTRACK:
            return Untrack;
          default:
            return Link;
        }
      })();
      return new klass({
        obj: obj,
        id: id
      });
    };

    Link.load = function(id, cb) {
      var err, obj, ret, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      ret = null;
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/max/src/keybase/node-client/src/chainlink.iced",
            funcname: "Link.load"
          });
          db.get({
            type: Link.ID_TYPE,
            key: id
          }, __iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                err = arguments[0];
                return obj = arguments[1];
              };
            })(),
            lineno: 170
          }));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          if (typeof err !== "undefined" && err !== null) {

          } else if (typeof obj !== "undefined" && obj !== null) {
            ret = Link.alloc({
              id: id,
              obj: obj
            });
            if ((err = ret.verify()) != null) {
              ret = null;
            }
          }
          return cb(err, ret);
        };
      })(this));
    };

    Link.prototype.verify_sig = function(_arg, cb) {
      var pubkey, which;
      which = _arg.which, pubkey = _arg.pubkey;
      return pubkey.verify_sig({
        which: which,
        sig: this.sig(),
        payload: this.payload_json_str()
      }, cb);
    };

    Link.prototype.display_cryptocurrency = function(opts, cb) {
      var cc, msg;
      cc = this.to_cryptocurrency(opts);
      msg = [BTC, cc.type, colors.green(cc.address), "(" + (colors.italic('unverified')) + ")"];
      log.lconsole("error", log["package"]().INFO, msg.join(' '));
      return cb(null);
    };

    Link.prototype.check_remote_proof = function(_arg, cb) {
      var arg, assert, assertions, e2, err, errmsg, esc, msg, ok, pubkey, rc, rsc, scraper, skip, type, type_s, username, warnings, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      skip = _arg.skip, pubkey = _arg.pubkey, type = _arg.type, warnings = _arg.warnings, assertions = _arg.assertions;
      username = pubkey.username();
      esc = make_esc(cb, "SigChain::Link::check_remote_proof'");
      (function(_this) {
        return (function(__iced_k) {
          if ((type_s = proofs.proof_type_to_string[type]) == null) {
            err = new E.VerifyError("Unknown proof type (" + type + ") found; consider a `keybase update`");
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "/Users/max/src/keybase/node-client/src/chainlink.iced",
                funcname: "Link.check_remote_proof"
              });
              athrow(err, esc(__iced_deferrals.defer({
                lineno: 200
              })));
              __iced_deferrals._fulfill();
            })(__iced_k);
          } else {
            return __iced_k();
          }
        });
      })(this)((function(_this) {
        return function() {
          log.debug("+ " + username + ": checking remote " + type_s + " proof");
          assert = assertions != null ? assertions.found(type_s) : void 0;
          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "/Users/max/src/keybase/node-client/src/chainlink.iced",
              funcname: "Link.check_remote_proof"
            });
            _this.verify_sig({
              which: "" + username + "@" + type_s,
              pubkey: pubkey
            }, esc(__iced_deferrals.defer({
              lineno: 206
            })));
            __iced_deferrals._fulfill();
          })(function() {
            if (assert != null) {
              assert.set_payload(_this.payload_json());
            }
            (function(__iced_k) {
              if (!skip && !_this.api_url()) {
                (function(__iced_k) {
                  __iced_deferrals = new iced.Deferrals(__iced_k, {
                    parent: ___iced_passed_deferral,
                    filename: "/Users/max/src/keybase/node-client/src/chainlink.iced",
                    funcname: "Link.check_remote_proof"
                  });
                  _this.refresh(__iced_deferrals.defer({
                    assign_fn: (function() {
                      return function() {
                        return e2 = arguments[0];
                      };
                    })(),
                    lineno: 211
                  }));
                  __iced_deferrals._fulfill();
                })(function() {
                  return __iced_k(typeof e2 !== "undefined" && e2 !== null ? log.warn("Error fetching URL for proof: " + e2.message) : void 0);
                });
              } else {
                return __iced_k();
              }
            })(function() {
              rsc = JSON.stringify(_this.proof_service_object());
              log.debug("| remote service desc is " + rsc);
              (function(__iced_k) {
                __iced_deferrals = new iced.Deferrals(__iced_k, {
                  parent: ___iced_passed_deferral,
                  filename: "/Users/max/src/keybase/node-client/src/chainlink.iced",
                  funcname: "Link.check_remote_proof"
                });
                scrapemod.alloc(type, esc(__iced_deferrals.defer({
                  assign_fn: (function() {
                    return function() {
                      return scraper = arguments[0];
                    };
                  })(),
                  lineno: 218
                })));
                __iced_deferrals._fulfill();
              })(function() {
                arg = {
                  api_url: _this.api_url(),
                  signature: _this.sig(),
                  proof_text_check: _this.proof_text_check(),
                  remote_id: "" + _this.remote_id(),
                  human_url: _this.human_url()
                };
                arg = dict_union(arg, _this.proof_service_object());
                errmsg = "";
                (function(__iced_k) {
                  if (skip) {
                    return __iced_k(rc = proofs.constants.v_codes.OK);
                  } else {
                    (function(__iced_k) {
                      if (!_this.api_url()) {
                        return __iced_k(rc = proofs.constants.v_codes.NOT_FOUND);
                      } else {
                        log.debug("+ Calling into scraper -> " + rsc + "@" + type_s + " -> " + (_this.api_url()));
                        (function(__iced_k) {
                          __iced_deferrals = new iced.Deferrals(__iced_k, {
                            parent: ___iced_passed_deferral,
                            filename: "/Users/max/src/keybase/node-client/src/chainlink.iced",
                            funcname: "Link.check_remote_proof"
                          });
                          scraper.validate(arg, __iced_deferrals.defer({
                            assign_fn: (function() {
                              return function() {
                                err = arguments[0];
                                return rc = arguments[1];
                              };
                            })(),
                            lineno: 234
                          }));
                          __iced_deferrals._fulfill();
                        })(function() {
                          log.debug("- Called scraper -> " + rc);
                          return __iced_k(typeof err !== "undefined" && err !== null ? errmsg = ": " + err.message : void 0);
                        });
                      }
                    })(__iced_k);
                  }
                })(function() {
                  ok = false;
                  if (rc !== proofs.constants.v_codes.OK) {
                    warnings.push(new E.RemoteCheckError("Remote check failed (code: " + rc + ")"));
                    _this.obj.proof_state = rc;
                  } else {
                    ok = true;
                    log.debug("| proof checked out");
                  }
                  msg = scraper.format_msg({
                    arg: arg,
                    ok: ok
                  });
                  if (skip) {
                    msg.push("(you've recently OK'ed this proof)");
                  }
                  if (!ok) {
                    msg.push("(failed with code " + rc + errmsg + ")");
                  }
                  log.lconsole("error", log["package"]().INFO, msg.join(' '));
                  log.debug("- " + username + ": checked remote " + type_s + " proof");
                  if (assert != null) {
                    assert.success(_this.human_url());
                  }
                  return cb(null);
                });
              });
            });
          });
        };
      })(this));
    };

    Link.prototype.remote_proof_to_track_obj = function() {
      var _ref3, _ref4;
      return {
        ctime: this.obj.ctime,
        etime: this.obj.etime,
        seqno: this.obj.seqno,
        curr: this.id,
        sig_type: this.obj.sig_type,
        sig_id: this.obj.sig_id,
        remote_key_proof: {
          check_data_json: (_ref3 = this.payload_json()) != null ? (_ref4 = _ref3.body) != null ? _ref4.service : void 0 : void 0,
          state: this.obj.proof_state,
          proof_type: this.obj.proof_type
        }
      };
    };

    return Link;

  })();

  SelfSig = (function(_super) {
    __extends(SelfSig, _super);

    function SelfSig() {
      return SelfSig.__super__.constructor.apply(this, arguments);
    }

    return SelfSig;

  })(Link);

  RemoteProof = (function(_super) {
    __extends(RemoteProof, _super);

    function RemoteProof() {
      return RemoteProof.__super__.constructor.apply(this, arguments);
    }

    return RemoteProof;

  })(Link);

  Track = (function(_super) {
    __extends(Track, _super);

    function Track() {
      return Track.__super__.constructor.apply(this, arguments);
    }

    return Track;

  })(Link);

  Cryptocurrency = (function(_super) {
    __extends(Cryptocurrency, _super);

    function Cryptocurrency() {
      return Cryptocurrency.__super__.constructor.apply(this, arguments);
    }

    return Cryptocurrency;

  })(Link);

  Revoke = (function(_super) {
    __extends(Revoke, _super);

    function Revoke() {
      return Revoke.__super__.constructor.apply(this, arguments);
    }

    return Revoke;

  })(Link);

  Untrack = (function(_super) {
    __extends(Untrack, _super);

    function Untrack() {
      return Untrack.__super__.constructor.apply(this, arguments);
    }

    return Untrack;

  })(Link);

  exports.alloc = function(obj) {};

}).call(this);
