// Generated by IcedCoffeeScript 1.6.3-g
(function() {
  var PackageJson, fs, iced, log, path, __iced_k, __iced_k_noop;

  iced = require('iced-coffee-script/lib/coffee-script/iced').runtime;
  __iced_k = __iced_k_noop = function() {};

  path = require('path');

  fs = require('fs');

  log = require('./log');

  exports.PackageJson = PackageJson = (function() {
    function PackageJson() {
      this.path = path.join(__dirname, '..', 'package.json');
    }

    PackageJson.prototype.read = function(cb) {
      var data, e, err, ok, ___iced_passed_deferral, __iced_deferrals, __iced_k,
        _this = this;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "src/package.iced",
          funcname: "PackageJson.read"
        });
        fs.readFile(_this.path, __iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              err = arguments[0];
              return data = arguments[1];
            };
          })(),
          lineno: 17
        }));
        __iced_deferrals._fulfill();
      })(function() {
        if (typeof err !== "undefined" && err !== null) {
          log.error("cannot open package.json: " + err);
        } else {
          try {
            _this.json = JSON.parse(data);
            ok = true;
          } catch (_error) {
            e = _error;
            log.error("Bad json in package.json: " + e);
          }
        }
        return cb(ok);
      });
    };

    PackageJson.prototype.version = function() {
      var _ref;
      return (_ref = this.json) != null ? _ref.version : void 0;
    };

    PackageJson.prototype.bin = function() {
      var k, v, _ref;
      _ref = this.json.bin;
      for (k in _ref) {
        v = _ref[k];
        return k;
      }
    };

    return PackageJson;

  })();

}).call(this);
