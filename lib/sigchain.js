// Generated by IcedCoffeeScript 1.6.3-g
(function() {
  var BufferOutStream, E, Link, SHA256, ST, SigChain, asyncify, constants, db, gpg, iced, log, make_email, make_esc, read_uids_from_key, req, strip, __iced_k, __iced_k_noop, _ref;

  iced = require('iced-coffee-script/lib/coffee-script/iced').runtime;
  __iced_k = __iced_k_noop = function() {};

  db = require('./db');

  req = require('./req');

  log = require('./log');

  constants = require('./constants').constants;

  SHA256 = require('./keyutils').SHA256;

  E = require('./err').E;

  asyncify = require('pgp-utils').util.asyncify;

  make_esc = require('iced-error').make_esc;

  ST = constants.signature_types;

  BufferOutStream = require('./stream').BufferOutStream;

  _ref = require('./gpg'), gpg = _ref.gpg, read_uids_from_key = _ref.read_uids_from_key;

  make_email = require('./util').make_email;

  strip = function(x) {
    return x.replace(/\s+/g, '');
  };

  exports.Link = Link = (function() {
    Link.ID_TYPE = constants.ids.sig_chain_link;

    function Link(_arg) {
      this.id = _arg.id, this.obj = _arg.obj;
      this.id || (this.id = this.obj.payload_hash);
    }

    Link.prototype.prev = function() {
      return this.obj.prev;
    };

    Link.prototype.seqno = function() {
      return this.obj.seqno;
    };

    Link.prototype.sig = function() {
      return this.obj.sig;
    };

    Link.prototype.payload_json_str = function() {
      return this.obj.payload_json;
    };

    Link.prototype.fingerprint = function() {
      return this.obj.fingerprint.toLowerCase();
    };

    Link.prototype.is_self_sig = function() {
      var _ref1;
      return (_ref1 = this.obj.sig_type) === ST.SELF_SIG || _ref1 === ST.REMOTE_PROOF || _ref1 === ST.TRACK;
    };

    Link.prototype.self_signer = function() {
      var _ref1, _ref2, _ref3;
      return (_ref1 = this.payload_json()) != null ? (_ref2 = _ref1.body) != null ? (_ref3 = _ref2.key) != null ? _ref3.username : void 0 : void 0 : void 0;
    };

    Link.prototype.payload_json = function() {
      var e, ret, s;
      if (this._payload_obj == null) {
        s = this.payload_json_str();
        ret = {};
        try {
          ret = JSON.parse(s);
        } catch (_error) {
          e = _error;
          log.error("Error parsing JSON " + s + ": " + e.message);
        }
        this._payload_obj = ret;
      }
      return this._payload_obj;
    };

    Link.prototype.verify = function() {
      var a, b, err, j;
      err = null;
      if ((a = this.obj.payload_hash) !== (b = this.id)) {
        err = new E.CorruptionError("Link ID mismatch: " + a + " != " + b);
      } else if ((j = SHA256(this.payload_json_str()).toString('hex')) !== this.id) {
        err = new E.CorruptionError("Link has wrong id: " + this.id + " != " + this.j);
      }
      return err;
    };

    Link.prototype.store = function(cb) {
      var err, ___iced_passed_deferral, __iced_deferrals, __iced_k, _ref1,
        _this = this;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      if (((_ref1 = this.obj.prev) != null ? _ref1.length : void 0) === 0) {
        this.obj.prev = null;
      }
      (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "src/sigchain.iced",
          funcname: "Link.store"
        });
        db.put({
          type: Link.ID_TYPE,
          key: _this.id,
          value: _this.obj
        }, __iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              return err = arguments[0];
            };
          })(),
          lineno: 66
        }));
        __iced_deferrals._fulfill();
      })(function() {
        return cb(err);
      });
    };

    Link.load = function(id, cb) {
      var err, obj, ret, ___iced_passed_deferral, __iced_deferrals, __iced_k,
        _this = this;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      ret = null;
      (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "src/sigchain.iced",
          funcname: "Link.load"
        });
        db.get({
          type: Link.ID_TYPE,
          key: id
        }, __iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              err = arguments[0];
              return obj = arguments[1];
            };
          })(),
          lineno: 73
        }));
        __iced_deferrals._fulfill();
      })(function() {
        if (typeof err !== "undefined" && err !== null) {

        } else if (typeof obj !== "undefined" && obj !== null) {
          ret = new Link({
            id: id,
            obj: obj
          });
          if ((err = ret.verify()) != null) {
            ret = null;
          }
        }
        return cb(err, ret);
      });
    };

    Link.prototype.verify_sig = function(_arg, cb) {
      var a, args, b, err, m, out, stderr, username, ___iced_passed_deferral, __iced_deferrals, __iced_k,
        _this = this;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      username = _arg.username;
      args = ["--decrypt"];
      stderr = new BufferOutStream();
      (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "src/sigchain.iced",
          funcname: "Link.verify_sig"
        });
        gpg({
          args: args,
          stdin: _this.sig(),
          stderr: stderr
        }, __iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              err = arguments[0];
              return out = arguments[1];
            };
          })(),
          lineno: 85
        }));
        __iced_deferrals._fulfill();
      })(function() {
        if (typeof err !== "undefined" && err !== null) {
          err = new E.VerifyError("" + username + ": failed to verify signature");
        } else if ((m = stderr.data().toString('utf8').match(/Primary key fingerprint: (.*)/)) == null) {
          err = new E.VerifyError("" + username + ": can't parse PGP output in verify signature");
        } else if ((a = strip(m[1]).toLowerCase()) !== (b = _this.fingerprint())) {
          err = new E.VerifyError("" + username + ": bad key: " + a + " != " + b);
        } else if ((a = out.toString('utf8')) !== (b = _this.payload_json_str())) {
          err = new E.VerifyError("" + username + ": payload was wrong: " + a + " != " + b);
        }
        return cb(err);
      });
    };

    return Link;

  })();

  exports.SigChain = SigChain = (function() {
    function SigChain(uid, _links) {
      this.uid = uid;
      this._links = _links != null ? _links : [];
    }

    SigChain.load = function(uid, curr, cb) {
      var err, link, links, ret, ___iced_passed_deferral, __iced_deferrals, __iced_k,
        _this = this;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      links = [];
      err = null;
      ret = null;
      (function(__iced_k) {
        var _results, _while;
        _results = [];
        _while = function(__iced_k) {
          var _break, _continue, _next;
          _break = function() {
            return __iced_k(_results);
          };
          _continue = function() {
            return iced.trampoline(function() {
              return _while(__iced_k);
            });
          };
          _next = function(__iced_next_arg) {
            _results.push(__iced_next_arg);
            return _continue();
          };
          if (!(curr && (err == null))) {
            return _break();
          } else {
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "src/sigchain.iced",
                funcname: "SigChain.load"
              });
              Link.load(curr, __iced_deferrals.defer({
                assign_fn: (function() {
                  return function() {
                    err = arguments[0];
                    return link = arguments[1];
                  };
                })(),
                lineno: 109
              }));
              __iced_deferrals._fulfill();
            })(function() {
              return _next(err != null ? log.error("Couldn't find link: " + last) : typeof link !== "undefined" && link !== null ? (links.push(link), curr = link.prev()) : curr = null);
            });
          }
        };
        _while(__iced_k);
      })(function() {
        if (err == null) {
          ret = new SigChain(uid, links.reverse());
          if ((err = ret.check_chain(true)) != null) {
            ret = null;
          }
        }
        return cb(err, ret);
      });
    };

    SigChain.prototype.last_seqno = function() {
      var l;
      if ((l = this.last()) != null) {
        return l.seqno();
      } else {
        return null;
      }
    };

    SigChain.prototype.check_chain = function(first, links) {
      var i, link, prev, _i, _len;
      links || (links = this._links);
      prev = null;
      i = 0;
      for (_i = 0, _len = links.length; _i < _len; _i++) {
        link = links[_i];
        if (((prev != null) && (prev !== link.prev())) || ((prev == null) && first && link.prev())) {
          return new E.CorruptionError("Bad chain link in " + (link.seqno()) + ": " + prev + " != " + (link.prev()));
        }
        prev = link.id;
      }
      return null;
    };

    SigChain.prototype._update = function(cb) {
      var args, body, esc, link, new_links, obj, ___iced_passed_deferral, __iced_deferrals, __iced_k,
        _this = this;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      esc = make_esc(cb, "_update");
      args = {
        uid: this.uid,
        low: this.last_seqno() + 1
      };
      (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "src/sigchain.iced",
          funcname: "SigChain._update"
        });
        req.get({
          endpoint: "sig/get",
          args: args
        }, esc(__iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              return body = arguments[0];
            };
          })(),
          lineno: 143
        })));
        __iced_deferrals._fulfill();
      })(function() {
        new_links = [];
        (function(__iced_k) {
          var _i, _len, _ref1, _results, _while;
          _ref1 = body.sigs;
          _len = _ref1.length;
          _i = 0;
          _results = [];
          _while = function(__iced_k) {
            var _break, _continue, _next;
            _break = function() {
              return __iced_k(_results);
            };
            _continue = function() {
              return iced.trampoline(function() {
                ++_i;
                return _while(__iced_k);
              });
            };
            _next = function(__iced_next_arg) {
              _results.push(__iced_next_arg);
              return _continue();
            };
            if (!(_i < _len)) {
              return _break();
            } else {
              obj = _ref1[_i];
              link = new Link({
                obj: obj
              });
              (function(__iced_k) {
                __iced_deferrals = new iced.Deferrals(__iced_k, {
                  parent: ___iced_passed_deferral,
                  filename: "src/sigchain.iced",
                  funcname: "SigChain._update"
                });
                asyncify(link.verify(), esc(__iced_deferrals.defer({
                  lineno: 147
                })));
                __iced_deferrals._fulfill();
              })(function() {
                return _next(new_links.push(link));
              });
            }
          };
          _while(__iced_k);
        })(function() {
          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "src/sigchain.iced",
              funcname: "SigChain._update"
            });
            asyncify(_this.check_chain(_this._links.length === 0, new_links), esc(__iced_deferrals.defer({
              lineno: 149
            })));
            __iced_deferrals._fulfill();
          })(function() {
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "src/sigchain.iced",
                funcname: "SigChain._update"
              });
              asyncify(_this.check_chain(false, _this._links.slice(-1).concat(new_links.slice(0, 1))), esc(__iced_deferrals.defer({
                lineno: 150
              })));
              __iced_deferrals._fulfill();
            })(function() {
              _this._links = _this._links.concat(new_links);
              _this._new_links = new_links;
              return cb(null);
            });
          });
        });
      });
    };

    SigChain.prototype.compress = function(cb) {
      return cb(new E.NotImplementedError("not implemented yet"));
    };

    SigChain.prototype.store = function(cb) {
      var err, link, ___iced_passed_deferral, __iced_deferrals, __iced_k,
        _this = this;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      err = null;
      (function(__iced_k) {
        if (_this._new_links != null) {
          (function(__iced_k) {
            var _i, _len, _ref1, _results, _while;
            _ref1 = _this._new_links;
            _len = _ref1.length;
            _i = 0;
            _results = [];
            _while = function(__iced_k) {
              var _break, _continue, _next;
              _break = function() {
                return __iced_k(_results);
              };
              _continue = function() {
                return iced.trampoline(function() {
                  ++_i;
                  return _while(__iced_k);
                });
              };
              _next = function(__iced_next_arg) {
                _results.push(__iced_next_arg);
                return _continue();
              };
              if (!(_i < _len)) {
                return _break();
              } else {
                link = _ref1[_i];
                if (err == null) {
                  (function(__iced_k) {
                    __iced_deferrals = new iced.Deferrals(__iced_k, {
                      parent: ___iced_passed_deferral,
                      filename: "src/sigchain.iced",
                      funcname: "SigChain.store"
                    });
                    link.store(__iced_deferrals.defer({
                      assign_fn: (function() {
                        return function() {
                          return err = arguments[0];
                        };
                      })(),
                      lineno: 166
                    }));
                    __iced_deferrals._fulfill();
                  })(_next);
                } else {
                  return _continue();
                }
              }
            };
            _while(__iced_k);
          })(__iced_k);
        } else {
          return __iced_k();
        }
      })(function() {
        return cb(err);
      });
    };

    SigChain.prototype.update = function(remote_seqno, cb) {
      var a, b, err, ___iced_passed_deferral, __iced_deferrals, __iced_k,
        _this = this;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      err = null;
      (function(__iced_k) {
        if ((remote_seqno == null) || remote_seqno > _this.last_seqno()) {
          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "src/sigchain.iced",
              funcname: "SigChain.update"
            });
            _this._update(__iced_deferrals.defer({
              assign_fn: (function() {
                return function() {
                  return err = arguments[0];
                };
              })(),
              lineno: 174
            }));
            __iced_deferrals._fulfill();
          })(function() {
            return __iced_k((remote_seqno != null) && ((a = remote_seqno) !== (b = _this.last_seqno())) ? err = new E.CorruptionError("failed to appropriately update chain: " + a + " != " + b) : void 0);
          });
        } else {
          return __iced_k();
        }
      })(function() {
        return cb(err);
      });
    };

    SigChain.prototype.last = function() {
      var _ref1;
      if ((_ref1 = this._links) != null ? _ref1.length : void 0) {
        return this._links.slice(-1)[0];
      } else {
        return null;
      }
    };

    SigChain.prototype._limit = function() {
      var c, i, l, _i, _ref1;
      c = [];
      for (i = _i = _ref1 = this._links.length - 1; _ref1 <= 0 ? _i <= 0 : _i >= 0; i = _ref1 <= 0 ? ++_i : --_i) {
        if ((l = this._links[i]).fingerprint() === this.fingerprint) {
          c.push(l);
        } else {
          break;
        }
      }
      c = c.reverse();
      return this._links = c;
    };

    SigChain.prototype._verify_sig = function(cb) {
      var err, l, ___iced_passed_deferral, __iced_deferrals, __iced_k,
        _this = this;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      err = null;
      (function(__iced_k) {
        if ((l = _this.last()) != null) {
          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "src/sigchain.iced",
              funcname: "SigChain._verify_sig"
            });
            l.verify_sig({
              username: _this.username
            }, __iced_deferrals.defer({
              assign_fn: (function() {
                return function() {
                  return err = arguments[0];
                };
              })(),
              lineno: 199
            }));
            __iced_deferrals._fulfill();
          })(__iced_k);
        } else {
          return __iced_k();
        }
      })(function() {
        return cb(err);
      });
    };

    SigChain.prototype._verify_userid = function(cb) {
      var email, emails, err, found, link, search_for, uids, ___iced_passed_deferral, __iced_deferrals, __iced_k,
        _this = this;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "src/sigchain.iced",
          funcname: "SigChain._verify_userid"
        });
        read_uids_from_key({
          fingerprint: _this.fingerprint
        }, __iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              err = arguments[0];
              return uids = arguments[1];
            };
          })(),
          lineno: 205
        }));
        __iced_deferrals._fulfill();
      })(function() {
        var _i, _len, _ref1;
        found = null;
        if (typeof err === "undefined" || err === null) {
          search_for = make_email(_this.username);
          emails = (function() {
            var _i, _len, _results;
            _results = [];
            for (_i = 0, _len = uids.length; _i < _len; _i++) {
              email = uids[_i].email;
              _results.push(email);
            }
            return _results;
          })();
          found = emails.indexOf(search_for) >= 0;
        }
        if ((typeof err === "undefined" || err === null) && !found) {
          _ref1 = _this._links;
          for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
            link = _ref1[_i];
            if (link.is_self_sig()) {
              if (link.self_signer() === _this.username) {
                found = true;
                break;
              }
            }
          }
        }
        if ((typeof err === "undefined" || err === null) && !found) {
          err = new E.VerifyError("could not find self signature of username '" + _this.username + "'");
        }
        return cb(err);
      });
    };

    SigChain.prototype.verify_sig = function(_arg, cb) {
      var esc, username, ___iced_passed_deferral, __iced_deferrals, __iced_k,
        _this = this;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      username = _arg.username;
      esc = make_esc(cb, "SigChain.verify_sig");
      this.username = username;
      (function(__iced_k) {
        var _ref1;
        if ((_this.fingerprint = (_ref1 = _this.last()) != null ? _ref1.fingerprint() : void 0) != null) {
          _this._limit();
          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "src/sigchain.iced",
              funcname: "SigChain.verify_sig"
            });
            _this._verify_sig(esc(__iced_deferrals.defer({
              lineno: 227
            })));
            __iced_deferrals._fulfill();
          })(function() {
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "src/sigchain.iced",
                funcname: "SigChain.verify_sig"
              });
              _this._verify_userid(esc(__iced_deferrals.defer({
                lineno: 228
              })));
              __iced_deferrals._fulfill();
            })(__iced_k);
          });
        } else {
          return __iced_k();
        }
      })(function() {
        return cb(null);
      });
    };

    return SigChain;

  })();

}).call(this);
