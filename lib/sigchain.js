// Generated by IcedCoffeeScript 1.7.1-c
(function() {
  var ACCTYPES, BTC, CHECK, E, Link, LinkTable, SHA256, ST, SigChain, Warnings, asyncify, athrow, bitcoyne, cheerio, colors, constants, date_to_unix, db, deq, dict_union, env, format_fingerprint, iced, log, make_email, make_esc, merkle_client, proofs, req, request, scrapemod, util, __iced_k, __iced_k_noop, _ref, _ref1, _ref2, _ref3;

  iced = require('iced-runtime').iced;
  __iced_k = __iced_k_noop = function() {};

  db = require('./db');

  req = require('./req');

  log = require('./log');

  constants = require('./constants').constants;

  SHA256 = require('./keyutils').SHA256;

  E = require('./err').E;

  _ref = require('pgp-utils').util, format_fingerprint = _ref.format_fingerprint, Warnings = _ref.Warnings, asyncify = _ref.asyncify;

  make_esc = require('iced-error').make_esc;

  ST = constants.signature_types;

  ACCTYPES = constants.allowed_cryptocurrency_types;

  _ref1 = require('./util'), dict_union = _ref1.dict_union, date_to_unix = _ref1.date_to_unix, make_email = _ref1.make_email;

  proofs = require('keybase-proofs');

  cheerio = require('cheerio');

  request = require('request');

  colors = require('./colors');

  deq = require('deep-equal');

  util = require('util');

  env = require('./env').env;

  scrapemod = require('./scrapers');

  _ref2 = require('./display'), CHECK = _ref2.CHECK, BTC = _ref2.BTC;

  athrow = require('iced-utils').util.athrow;

  merkle_client = require('./merkle_client').merkle_client;

  bitcoyne = require('bitcoyne');

  _ref3 = require('./chainlink'), Link = _ref3.Link, LinkTable = _ref3.LinkTable;

  exports.SigChain = SigChain = (function() {
    function SigChain(uid, _links) {
      this.uid = uid;
      this._links = _links != null ? _links : [];
      this._lookup = {};
      this._index_links(this._links);
      this._true_last = null;
    }

    SigChain.prototype._index_links = function(list) {
      var l, _i, _len, _results;
      _results = [];
      for (_i = 0, _len = list.length; _i < _len; _i++) {
        l = list[_i];
        _results.push(this._lookup[l.id] = l);
      }
      return _results;
    };

    SigChain.prototype.lookup = function(id) {
      return this._lookup[id];
    };

    SigChain.load = function(uid, curr, cb) {
      var err, link, links, ret, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      log.debug("+ " + uid + ": load signature chain");
      links = [];
      err = null;
      ret = null;
      (function(_this) {
        return (function(__iced_k) {
          var _results, _while;
          _results = [];
          _while = function(__iced_k) {
            var _break, _continue, _next;
            _break = function() {
              return __iced_k(_results);
            };
            _continue = function() {
              return iced.trampoline(function() {
                return _while(__iced_k);
              });
            };
            _next = function(__iced_next_arg) {
              _results.push(__iced_next_arg);
              return _continue();
            };
            if (!(curr && (err == null))) {
              return _break();
            } else {
              log.debug("| " + uid + ": Loading link " + curr);
              (function(__iced_k) {
                __iced_deferrals = new iced.Deferrals(__iced_k, {
                  parent: ___iced_passed_deferral,
                  filename: "/Users/max/src/keybase/node-client/src/sigchain.iced",
                  funcname: "SigChain.load"
                });
                Link.load(curr, __iced_deferrals.defer({
                  assign_fn: (function() {
                    return function() {
                      err = arguments[0];
                      return link = arguments[1];
                    };
                  })(),
                  lineno: 53
                }));
                __iced_deferrals._fulfill();
              })(function() {
                return _next(err != null ? (log.error("Couldn't find link: " + last), log.debug("| -> error")) : typeof link !== "undefined" && link !== null ? (links.push(link), curr = link.prev(), log.debug("| -> found link and previous; prev=" + curr)) : (log.debug("| -> reached the chain end"), curr = null));
              });
            }
          };
          _while(__iced_k);
        });
      })(this)((function(_this) {
        return function() {
          if (err == null) {
            ret = new SigChain(uid, links.reverse());
            if ((err = ret.check_chain(true)) != null) {
              ret = null;
            }
          }
          log.debug("- " + uid + ": loaded signature chain");
          return cb(err, ret);
        };
      })(this));
    };

    SigChain.prototype.last_seqno = function() {
      var l;
      if ((l = this.last()) != null) {
        return l.seqno();
      } else {
        return null;
      }
    };

    SigChain.prototype.check_chain = function(first, links) {
      var i, link, prev, _i, _len;
      links || (links = this._links);
      prev = null;
      i = 0;
      for (_i = 0, _len = links.length; _i < _len; _i++) {
        link = links[_i];
        if (((prev != null) && (prev !== link.prev())) || ((prev == null) && first && link.prev())) {
          return new E.CorruptionError("Bad chain link in " + (link.seqno()) + ": " + prev + " != " + (link.prev()));
        }
        prev = link.id;
      }
      return null;
    };

    SigChain.prototype._update = function(cb) {
      var args, body, did_update, esc, link, new_links, obj, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      log.debug("+ sigchain::_update");
      esc = make_esc(cb, "_update");
      args = {
        uid: this.uid,
        low: this.last_seqno() + 1
      };
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/max/src/keybase/node-client/src/sigchain.iced",
            funcname: "SigChain._update"
          });
          req.get({
            endpoint: "sig/get",
            args: args
          }, esc(__iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                return body = arguments[0];
              };
            })(),
            lineno: 92
          })));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          log.debug("| found " + body.sigs.length + " new signatures");
          new_links = [];
          did_update = false;
          (function(__iced_k) {
            var _i, _len, _ref4, _results, _while;
            _ref4 = body.sigs;
            _len = _ref4.length;
            _i = 0;
            _results = [];
            _while = function(__iced_k) {
              var _break, _continue, _next;
              _break = function() {
                return __iced_k(_results);
              };
              _continue = function() {
                return iced.trampoline(function() {
                  ++_i;
                  return _while(__iced_k);
                });
              };
              _next = function(__iced_next_arg) {
                _results.push(__iced_next_arg);
                return _continue();
              };
              if (!(_i < _len)) {
                return _break();
              } else {
                obj = _ref4[_i];
                link = Link.alloc({
                  obj: obj
                });
                (function(__iced_k) {
                  __iced_deferrals = new iced.Deferrals(__iced_k, {
                    parent: ___iced_passed_deferral,
                    filename: "/Users/max/src/keybase/node-client/src/sigchain.iced",
                    funcname: "SigChain._update"
                  });
                  asyncify(link.verify(), esc(__iced_deferrals.defer({
                    lineno: 98
                  })));
                  __iced_deferrals._fulfill();
                })(function() {
                  new_links.push(link);
                  return _next(did_update = true);
                });
              }
            };
            _while(__iced_k);
          })(function() {
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "/Users/max/src/keybase/node-client/src/sigchain.iced",
                funcname: "SigChain._update"
              });
              asyncify(_this.check_chain(_this._links.length === 0, new_links), esc(__iced_deferrals.defer({
                lineno: 101
              })));
              __iced_deferrals._fulfill();
            })(function() {
              (function(__iced_k) {
                __iced_deferrals = new iced.Deferrals(__iced_k, {
                  parent: ___iced_passed_deferral,
                  filename: "/Users/max/src/keybase/node-client/src/sigchain.iced",
                  funcname: "SigChain._update"
                });
                asyncify(_this.check_chain(false, _this._links.slice(-1).concat(new_links.slice(0, 1))), esc(__iced_deferrals.defer({
                  lineno: 102
                })));
                __iced_deferrals._fulfill();
              })(function() {
                _this._links = _this._links.concat(new_links);
                _this._new_links = new_links;
                _this._index_links(new_links);
                log.debug("- sigchain::_update");
                return cb(null, did_update);
              });
            });
          });
        };
      })(this));
    };

    SigChain.prototype.store = function(cb) {
      var err, link, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      err = null;
      (function(_this) {
        return (function(__iced_k) {
          var _ref4;
          if ((_ref4 = _this._new_links) != null ? _ref4.length : void 0) {
            log.debug("+ writing dirty signature chain");
            (function(__iced_k) {
              var _i, _len, _ref5, _results, _while;
              _ref5 = _this._new_links;
              _len = _ref5.length;
              _i = 0;
              _results = [];
              _while = function(__iced_k) {
                var _break, _continue, _next;
                _break = function() {
                  return __iced_k(_results);
                };
                _continue = function() {
                  return iced.trampoline(function() {
                    ++_i;
                    return _while(__iced_k);
                  });
                };
                _next = function(__iced_next_arg) {
                  _results.push(__iced_next_arg);
                  return _continue();
                };
                if (!(_i < _len)) {
                  return _break();
                } else {
                  link = _ref5[_i];
                  if (err == null) {
                    (function(__iced_k) {
                      __iced_deferrals = new iced.Deferrals(__iced_k, {
                        parent: ___iced_passed_deferral,
                        filename: "/Users/max/src/keybase/node-client/src/sigchain.iced",
                        funcname: "SigChain.store"
                      });
                      link.store(__iced_deferrals.defer({
                        assign_fn: (function() {
                          return function() {
                            return err = arguments[0];
                          };
                        })(),
                        lineno: 116
                      }));
                      __iced_deferrals._fulfill();
                    })(_next);
                  } else {
                    return _continue();
                  }
                }
              };
              _while(__iced_k);
            })(function() {
              return __iced_k(log.debug("- wrote signature chain"));
            });
          } else {
            return __iced_k();
          }
        });
      })(this)((function(_this) {
        return function() {
          return cb(err);
        };
      })(this));
    };

    SigChain.prototype.update = function(remote_seqno, cb) {
      var a, b, did_update, err, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      err = null;
      did_update = false;
      (function(_this) {
        return (function(__iced_k) {
          if (((a = remote_seqno) == null) || a > (b = _this.last_seqno())) {
            log.debug("| sigchain update: " + a + " vs. " + b);
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "/Users/max/src/keybase/node-client/src/sigchain.iced",
                funcname: "SigChain.update"
              });
              _this._update(__iced_deferrals.defer({
                assign_fn: (function() {
                  return function() {
                    err = arguments[0];
                    return did_update = arguments[1];
                  };
                })(),
                lineno: 127
              }));
              __iced_deferrals._fulfill();
            })(function() {
              return __iced_k((remote_seqno != null) && ((a = remote_seqno) !== (b = _this.last_seqno())) ? err = new E.CorruptionError("failed to appropriately update chain: " + a + " != " + b) : void 0);
            });
          } else {
            return __iced_k();
          }
        });
      })(this)((function(_this) {
        return function() {
          return cb(err, did_update);
        };
      })(this));
    };

    SigChain.prototype.last = function() {
      var _ref4;
      if ((_ref4 = this._links) != null ? _ref4.length : void 0) {
        return this._links.slice(-1)[0];
      } else {
        return null;
      }
    };

    SigChain.prototype.true_last = function() {
      return this._true_last || this.last();
    };

    SigChain.prototype.is_track_fresh = function(id) {
      var l, _i, _ref4, _ref5;
      _ref4 = this._links;
      for (_i = _ref4.length - 1; _i >= 0; _i += -1) {
        l = _ref4[_i];
        if (l.id === id) {
          return true;
        } else if (!((_ref5 = l.sig_type()) === ST.TRACK || _ref5 === ST.UNTRACK)) {
          return false;
        }
      }
      return false;
    };

    SigChain.prototype._limit = function() {
      var c, i, l, n, _i, _ref4, _ref5;
      c = [];
      log.debug("| input chain with " + (n = this._links.length) + " link" + (n !== 1 ? 's' : ''));
      for (i = _i = _ref4 = this._links.length - 1; _ref4 <= 0 ? _i <= 0 : _i >= 0; i = _ref4 <= 0 ? ++_i : --_i) {
        if (((_ref5 = (l = this._links[i]).fingerprint()) != null ? _ref5.toLowerCase() : void 0) === this.fingerprint) {
          c.push(l);
        } else {
          break;
        }
      }
      c = c.reverse();
      if (c.length !== this._links.length) {
        log.debug("| Limited to " + (n = c.length) + " link" + (n !== 1 ? 's' : ''));
      }
      return this._links = c;
    };

    SigChain.prototype._verify_sig = function(cb) {
      var err, l, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      err = null;
      (function(_this) {
        return (function(__iced_k) {
          if ((l = _this.last()) != null) {
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "/Users/max/src/keybase/node-client/src/sigchain.iced",
                funcname: "SigChain._verify_sig"
              });
              l.verify_sig({
                which: _this.username,
                pubkey: _this.pubkey
              }, __iced_deferrals.defer({
                assign_fn: (function() {
                  return function() {
                    return err = arguments[0];
                  };
                })(),
                lineno: 176
              }));
              __iced_deferrals._fulfill();
            })(__iced_k);
          } else {
            return __iced_k();
          }
        });
      })(this)((function(_this) {
        return function() {
          return cb(err);
        };
      })(this));
    };

    SigChain.prototype._verify_userid = function(cb) {
      var email, err, esc, found, kbem, link, msg, type, uids, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      esc = make_esc(cb, "_verify_userid");
      log.debug("+ _verify_userid for " + this.username);
      found = false;
      kbem = make_email(this.username);
      log.debug("+ read username baked into key");
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/max/src/keybase/node-client/src/sigchain.iced",
            funcname: "SigChain._verify_userid"
          });
          _this.pubkey.read_uids_from_key(esc(__iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                return uids = arguments[0];
              };
            })(),
            lineno: 190
          })));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          var _i, _j, _len, _len1, _ref4, _ref5, _ref6, _ref7;
          found = ((function() {
            var _i, _len, _results;
            _results = [];
            for (_i = 0, _len = uids.length; _i < _len; _i++) {
              email = uids[_i].email;
              _results.push(email);
            }
            return _results;
          })()).indexOf(kbem) >= 0;
          log.debug("- found -> " + found);
          log.debug("+ search for explicit self-signatures (found=" + found + ")");
          if (!found && ((link = (_ref4 = _this.table) != null ? _ref4[ST.SELF_SIG] : void 0) != null) && (link.self_signer() === _this.username)) {
            found = true;
          }
          log.debug("- found -> " + found);
          log.debug("+ search for a free-rider on a track signature (found=" + found + ")");
          if (!found) {
            _ref5 = [ST.REMOTE_PROOF, ST.TRACK];
            for (_i = 0, _len = _ref5.length; _i < _len; _i++) {
              type = _ref5[_i];
              _ref7 = _this.flatten((_ref6 = _this.table) != null ? _ref6[type] : void 0);
              for (_j = 0, _len1 = _ref7.length; _j < _len1; _j++) {
                link = _ref7[_j];
                if (link.self_signer() === _this.username) {
                  found = true;
                  break;
                }
              }
              if (found) {
                break;
              }
            }
          }
          log.debug("- found -> " + found);
          if ((typeof err === "undefined" || err === null) && !found) {
            msg = _this.username === env().get_username() ? "You haven't signed your own key! Try `keybase push --update`" : "user '" + _this.username + "' hasn't signed their own key";
            err = new E.VerifyError(msg);
          }
          log.debug("- _verify_userid for " + _this.username + " -> " + err);
          return cb(err);
        };
      })(this));
    };

    SigChain.prototype._compress = function(_arg) {
      var index, link, out, show_perm_failures, _i, _len, _ref4;
      show_perm_failures = _arg.show_perm_failures;
      log.debug("+ compressing signature chain");
      out = new LinkTable();
      index = {};
      _ref4 = this._links;
      for (_i = 0, _len = _ref4.length; _i < _len; _i++) {
        link = _ref4[_i];
        if (!(link.fingerprint() === this.fingerprint)) {
          continue;
        }
        index[link.sig_id()] = link;
        link.insert_into_table({
          table: out,
          index: index,
          show_perm_failures: show_perm_failures
        });
      }
      out.prune(function(obj) {
        return obj.is_revoked();
      });
      log.debug("- signature chain compressed");
      return this.table = out;
    };

    SigChain.prototype.flattened_remote_proofs = function() {
      var _ref4, _ref5;
      return ((_ref4 = this.table) != null ? (_ref5 = _ref4.get(ST.REMOTE_PROOF)) != null ? _ref5.flatten() : void 0 : void 0) || [];
    };

    SigChain.prototype.remote_proofs_to_track_obj = function() {
      var link, links, _i, _len, _results;
      links = this.flattened_remote_proofs();
      _results = [];
      for (_i = 0, _len = links.length; _i < _len; _i++) {
        link = links[_i];
        if (!link.is_revoked()) {
          _results.push(link.remote_proof_to_track_obj());
        }
      }
      return _results;
    };

    SigChain.prototype.merkle_root_to_track_obj = function() {
      var ret;
      if (this._merkle_root != null) {
        ret = {
          hash: this._merkle_root.hash,
          seqno: this._merkle_root.seqno,
          ctime: this._merkle_root.ctime
        };
      } else {
        ret = null;
      }
      return ret;
    };

    SigChain.prototype.get_track_obj = function(uid) {
      var _ref4, _ref5;
      return (_ref4 = this.table) != null ? (_ref5 = _ref4.get_path([ST.TRACK, uid])) != null ? _ref5.to_table_obj() : void 0 : void 0;
    };

    SigChain.prototype.verify_sig = function(_arg, cb) {
      var esc, key, show_perm_failures, username, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      key = _arg.key, show_perm_failures = _arg.show_perm_failures;
      esc = make_esc(cb, "SigChain::verify_sig");
      this.username = username = key.username();
      this.pubkey = key;
      log.debug("+ " + username + ": verifying sig");
      (function(_this) {
        return (function(__iced_k) {
          var _ref4, _ref5;
          if (((_this.fingerprint = (_ref4 = key.fingerprint()) != null ? _ref4.toLowerCase() : void 0) != null) && (((_ref5 = _this.last()) != null ? _ref5.fingerprint() : void 0) != null)) {
            _this._true_last = _this.last();
            _this._limit();
            _this._compress({
              show_perm_failures: show_perm_failures
            });
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "/Users/max/src/keybase/node-client/src/sigchain.iced",
                funcname: "SigChain.verify_sig"
              });
              _this._verify_sig(esc(__iced_deferrals.defer({
                lineno: 278
              })));
              __iced_deferrals._fulfill();
            })(__iced_k);
          } else {
            return __iced_k(log.debug("| Skipped since no fingerprint found in key or no links in chain"));
          }
        });
      })(this)((function(_this) {
        return function() {
          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "/Users/max/src/keybase/node-client/src/sigchain.iced",
              funcname: "SigChain.verify_sig"
            });
            _this._verify_userid(esc(__iced_deferrals.defer({
              lineno: 281
            })));
            __iced_deferrals._fulfill();
          })(function() {
            log.debug("- " + username + ": verified sig");
            return cb(null);
          });
        };
      })(this));
    };

    SigChain.prototype.list_trackees = function() {
      var k, out, tab, v, _ref4, _ref5;
      out = [];
      if ((tab = (_ref4 = this.table) != null ? (_ref5 = _ref4.get(ST.TRACK)) != null ? _ref5.to_dict() : void 0 : void 0)) {
        for (k in tab) {
          v = tab[k];
          out.push(v.payload_json());
        }
      }
      return out;
    };

    SigChain.prototype.list_cryptocurrency_addresses = function(opts) {
      var k, obj, out, tab, v, _ref4, _ref5;
      if (opts == null) {
        opts = {};
      }
      if ((tab = (_ref4 = this.table) != null ? (_ref5 = _ref4.get(ST.CRYPTOCURRENCY)) != null ? _ref5.to_dict() : void 0 : void 0) != null) {
        out = {};
        for (k in tab) {
          v = tab[k];
          if ((obj = v.to_cryptocurrency(opts)) != null) {
            out[obj.type] = obj.address;
          }
        }
      } else {
        out = null;
      }
      return out;
    };

    SigChain.prototype.list_remote_proofs = function(opts) {
      var k, obj, out, tab, type, v, _ref4;
      if (opts == null) {
        opts = {};
      }
      out = null;
      if ((tab = (_ref4 = this.table.get(ST.REMOTE_PROOF)) != null ? _ref4.to_dict() : void 0) != null) {
        for (type in tab) {
          obj = tab[type];
          type = proofs.proof_type_to_string[parseInt(type)];
          out || (out = {});
          out[type] = obj.is_leaf() ? obj.to_list_display(opts) : (function() {
            var _ref5, _results;
            _ref5 = obj.to_dict();
            _results = [];
            for (k in _ref5) {
              v = _ref5[k];
              _results.push(v.to_list_display(opts));
            }
            return _results;
          })();
        }
      }
      return out;
    };

    SigChain.prototype.check_merkle_tree = function(cb) {
      var a, b, err, lst, merkle_root, payload_hash, seqno, val, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      err = null;
      lst = this.true_last();
      log.debug("+ sigchain check_merkle_tree");
      (function(_this) {
        return (function(__iced_k) {
          if (lst != null) {
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "/Users/max/src/keybase/node-client/src/sigchain.iced",
                funcname: "SigChain.check_merkle_tree"
              });
              merkle_client().find_and_verify({
                key: _this.uid
              }, __iced_deferrals.defer({
                assign_fn: (function() {
                  return function() {
                    err = arguments[0];
                    val = arguments[1];
                    return merkle_root = arguments[2];
                  };
                })(),
                lineno: 329
              }));
              __iced_deferrals._fulfill();
            })(function() {
              return __iced_k(err == null ? ((seqno = val[0], payload_hash = val[1], val), (a = seqno) !== (b = lst.seqno()) ? err = new E.BadSeqnoError("bad sequence in root: " + a + " != " + b) : (a = payload_hash) !== (b = lst.id) ? err = new E.BadPayloadHash("bad payload hash in root: " + a + " != " + b) : _this._merkle_root = merkle_root) : void 0);
            });
          } else {
            return __iced_k(log.debug("| no signatures for " + _this.uid + ", so won't find in merkle tree; skipping check"));
          }
        });
      })(this)((function(_this) {
        return function() {
          log.debug("- sigchain check_merkle_tree");
          return cb(err);
        };
      })(this));
    };

    SigChain.prototype.display_cryptocurrency_addresses = function(opts, cb) {
      var esc, k, tab, v, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      esc = make_esc(cb, "SigChain::display_cryptocurrency_addresses");
      (function(_this) {
        return (function(__iced_k) {
          var _ref4, _ref5;
          if ((tab = (_ref4 = _this.table) != null ? (_ref5 = _ref4.get(ST.CRYPTOCURRENCY)) != null ? _ref5.to_dict() : void 0 : void 0) != null) {
            (function(__iced_k) {
              var _i, _k, _keys, _ref6, _results, _while;
              _ref6 = tab;
              _keys = (function() {
                var _results1;
                _results1 = [];
                for (_k in _ref6) {
                  _results1.push(_k);
                }
                return _results1;
              })();
              _i = 0;
              _results = [];
              _while = function(__iced_k) {
                var _break, _continue, _next;
                _break = function() {
                  return __iced_k(_results);
                };
                _continue = function() {
                  return iced.trampoline(function() {
                    ++_i;
                    return _while(__iced_k);
                  });
                };
                _next = function(__iced_next_arg) {
                  _results.push(__iced_next_arg);
                  return _continue();
                };
                if (!(_i < _keys.length)) {
                  return _break();
                } else {
                  k = _keys[_i];
                  v = _ref6[k];
                  (function(__iced_k) {
                    __iced_deferrals = new iced.Deferrals(__iced_k, {
                      parent: ___iced_passed_deferral,
                      filename: "/Users/max/src/keybase/node-client/src/sigchain.iced",
                      funcname: "SigChain.display_cryptocurrency_addresses"
                    });
                    v.display_cryptocurrency(opts, esc(__iced_deferrals.defer({
                      lineno: 349
                    })));
                    __iced_deferrals._fulfill();
                  })(_next);
                }
              };
              _while(__iced_k);
            })(__iced_k);
          } else {
            return __iced_k();
          }
        });
      })(this)((function(_this) {
        return function() {
          return cb(null);
        };
      })(this));
    };

    SigChain.prototype.check_remote_proofs = function(_arg, cb) {
      var assertions, esc, link, links, msg, n, pubkey, skip, tab, type, username, v, warnings, ___iced_passed_deferral, __iced_deferrals, __iced_k, _ref4, _ref5;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      username = _arg.username, skip = _arg.skip, pubkey = _arg.pubkey, assertions = _arg.assertions;
      esc = make_esc(cb, "SigChain::check_remote_proofs");
      log.debug("+ " + (pubkey.username()) + ": checking remote proofs (skip=" + skip + ")");
      warnings = new Warnings();
      msg = CHECK + " " + colors.green("public key fingerprint: " + (format_fingerprint(pubkey.fingerprint())));
      log.lconsole("error", log["package"]().INFO, msg);
      n = 0;
      if (assertions != null) {
        if ((_ref4 = assertions.found('key', false)) != null) {
          _ref4.success().set_payload(pubkey.fingerprint());
        }
      }
      if (assertions != null) {
        if ((_ref5 = assertions.found('keybase', false)) != null) {
          _ref5.success().set_payload(username);
        }
      }
      (function(_this) {
        return (function(__iced_k) {
          var _ref6;
          if ((tab = (_ref6 = _this.table) != null ? _ref6.get(ST.REMOTE_PROOF) : void 0) != null) {
            log.debug("| Loaded table with " + (tab.keys().length) + " keys");
            (function(__iced_k) {
              var _i, _k, _keys, _ref7, _results, _while;
              _ref7 = tab.to_dict();
              _keys = (function() {
                var _results1;
                _results1 = [];
                for (_k in _ref7) {
                  _results1.push(_k);
                }
                return _results1;
              })();
              _i = 0;
              _results = [];
              _while = function(__iced_k) {
                var _break, _continue, _next;
                _break = function() {
                  return __iced_k(_results);
                };
                _continue = function() {
                  return iced.trampoline(function() {
                    ++_i;
                    return _while(__iced_k);
                  });
                };
                _next = function(__iced_next_arg) {
                  _results.push(__iced_next_arg);
                  return _continue();
                };
                if (!(_i < _keys.length)) {
                  return _break();
                } else {
                  type = _keys[_i];
                  v = _ref7[type];
                  type = parseInt(type);
                  links = v.flatten();
                  (function(__iced_k) {
                    var _j, _len, _ref8, _results1, _while;
                    _ref8 = links;
                    _len = _ref8.length;
                    _j = 0;
                    _results1 = [];
                    _while = function(__iced_k) {
                      var _break, _continue, _next;
                      _break = function() {
                        return __iced_k(_results1);
                      };
                      _continue = function() {
                        return iced.trampoline(function() {
                          ++_j;
                          return _while(__iced_k);
                        });
                      };
                      _next = function(__iced_next_arg) {
                        _results1.push(__iced_next_arg);
                        return _continue();
                      };
                      if (!(_j < _len)) {
                        return _break();
                      } else {
                        link = _ref8[_j];
                        (function(__iced_k) {
                          __iced_deferrals = new iced.Deferrals(__iced_k, {
                            parent: ___iced_passed_deferral,
                            filename: "/Users/max/src/keybase/node-client/src/sigchain.iced",
                            funcname: "SigChain.check_remote_proofs"
                          });
                          link.check_remote_proof({
                            skip: skip,
                            pubkey: pubkey,
                            type: type,
                            warnings: warnings,
                            assertions: assertions
                          }, esc(__iced_deferrals.defer({
                            lineno: 377
                          })));
                          __iced_deferrals._fulfill();
                        })(function() {
                          return _next(n++);
                        });
                      }
                    };
                    _while(__iced_k);
                  })(_next);
                }
              };
              _while(__iced_k);
            })(__iced_k);
          } else {
            return __iced_k(log.debug("| No remote proofs found"));
          }
        });
      })(this)((function(_this) {
        return function() {
          log.debug("- " + (pubkey.username()) + ": checked remote proofs");
          return cb(null, warnings, n);
        };
      })(this));
    };

    return SigChain;

  })();

}).call(this);
