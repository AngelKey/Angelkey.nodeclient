// Generated by IcedCoffeeScript 1.6.3-g
(function() {
  var BAD_X, BufferOutStream, CHECK, E, Link, SHA256, ST, SigChain, Warnings, assert_no_collision, asyncify, cheerio, colors, constants, db, gpg, iced, log, make_email, make_esc, proofs, read_uids_from_key, req, request, strip, __iced_k, __iced_k_noop, _ref, _ref1;

  iced = require('iced-coffee-script/lib/coffee-script/iced').runtime;
  __iced_k = __iced_k_noop = function() {};

  db = require('./db');

  req = require('./req');

  log = require('./log');

  constants = require('./constants').constants;

  SHA256 = require('./keyutils').SHA256;

  E = require('./err').E;

  _ref = require('pgp-utils').util, Warnings = _ref.Warnings, asyncify = _ref.asyncify;

  make_esc = require('iced-error').make_esc;

  ST = constants.signature_types;

  BufferOutStream = require('./stream').BufferOutStream;

  _ref1 = require('./gpg'), assert_no_collision = _ref1.assert_no_collision, gpg = _ref1.gpg, read_uids_from_key = _ref1.read_uids_from_key;

  make_email = require('./util').make_email;

  proofs = require('keybase-proofs');

  cheerio = require('cheerio');

  request = require('request');

  colors = require('colors');

  strip = function(x) {
    return x.replace(/\s+/g, '');
  };

  CHECK = "\u2714";

  BAD_X = "\u2716";

  exports.Link = Link = (function() {
    Link.ID_TYPE = constants.ids.sig_chain_link;

    function Link(_arg) {
      this.id = _arg.id, this.obj = _arg.obj;
      this.id || (this.id = this.obj.payload_hash);
    }

    Link.prototype.prev = function() {
      return this.obj.prev;
    };

    Link.prototype.seqno = function() {
      return this.obj.seqno;
    };

    Link.prototype.sig = function() {
      return this.obj.sig;
    };

    Link.prototype.payload_json_str = function() {
      return this.obj.payload_json;
    };

    Link.prototype.fingerprint = function() {
      return this.obj.fingerprint.toLowerCase();
    };

    Link.prototype.short_key_id = function() {
      return this.fingerprint().slice(-8).toUpperCase();
    };

    Link.prototype.is_self_sig = function() {
      var _ref2;
      return (_ref2 = this.sig_type()) === ST.SELF_SIG || _ref2 === ST.REMOTE_PROOF || _ref2 === ST.TRACK;
    };

    Link.prototype.self_signer = function() {
      var _ref2, _ref3, _ref4;
      return (_ref2 = this.payload_json()) != null ? (_ref3 = _ref2.body) != null ? (_ref4 = _ref3.key) != null ? _ref4.username : void 0 : void 0 : void 0;
    };

    Link.prototype.sig_type = function() {
      return this.obj.sig_type;
    };

    Link.prototype.proof_type = function() {
      return this.obj.proof_type;
    };

    Link.prototype.sig_id = function() {
      return this.obj.sig_id;
    };

    Link.prototype.api_url = function() {
      return this.obj.api_url;
    };

    Link.prototype.human_url = function() {
      return this.obj.human_url;
    };

    Link.prototype.proof_text_check = function() {
      return this.obj.proof_text_check;
    };

    Link.prototype.remote_id = function() {
      return this.obj.remote_id;
    };

    Link.prototype.payload_json = function() {
      var e, ret, s;
      if (this._payload_obj == null) {
        s = this.payload_json_str();
        ret = {};
        try {
          ret = JSON.parse(s);
        } catch (_error) {
          e = _error;
          log.error("Error parsing JSON " + s + ": " + e.message);
        }
        this._payload_obj = ret;
      }
      return this._payload_obj;
    };

    Link.prototype.verify = function() {
      var a, b, err, j;
      err = null;
      if ((a = this.obj.payload_hash) !== (b = this.id)) {
        err = new E.CorruptionError("Link ID mismatch: " + a + " != " + b);
      } else if ((j = SHA256(this.payload_json_str()).toString('hex')) !== this.id) {
        err = new E.CorruptionError("Link has wrong id: " + this.id + " != " + this.j);
      }
      return err;
    };

    Link.prototype.store = function(cb) {
      var err, ___iced_passed_deferral, __iced_deferrals, __iced_k, _ref2,
        _this = this;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      if (((_ref2 = this.obj.prev) != null ? _ref2.length : void 0) === 0) {
        this.obj.prev = null;
      }
      (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "src/sigchain.iced",
          funcname: "Link.store"
        });
        db.put({
          type: Link.ID_TYPE,
          key: _this.id,
          value: _this.obj
        }, __iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              return err = arguments[0];
            };
          })(),
          lineno: 81
        }));
        __iced_deferrals._fulfill();
      })(function() {
        return cb(err);
      });
    };

    Link.load = function(id, cb) {
      var err, obj, ret, ___iced_passed_deferral, __iced_deferrals, __iced_k,
        _this = this;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      ret = null;
      (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "src/sigchain.iced",
          funcname: "Link.load"
        });
        db.get({
          type: Link.ID_TYPE,
          key: id
        }, __iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              err = arguments[0];
              return obj = arguments[1];
            };
          })(),
          lineno: 88
        }));
        __iced_deferrals._fulfill();
      })(function() {
        if (typeof err !== "undefined" && err !== null) {

        } else if (typeof obj !== "undefined" && obj !== null) {
          ret = new Link({
            id: id,
            obj: obj
          });
          if ((err = ret.verify()) != null) {
            ret = null;
          }
        }
        return cb(err, ret);
      });
    };

    Link.prototype.verify_sig = function(_arg, cb) {
      var a, args, b, em, err, m, out, stderr, which, ___iced_passed_deferral, __iced_deferrals, __iced_k,
        _this = this;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      which = _arg.which;
      args = ["--decrypt"];
      stderr = new BufferOutStream();
      (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "src/sigchain.iced",
          funcname: "Link.verify_sig"
        });
        gpg({
          args: args,
          stdin: _this.sig(),
          stderr: stderr
        }, __iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              err = arguments[0];
              return out = arguments[1];
            };
          })(),
          lineno: 100
        }));
        __iced_deferrals._fulfill();
      })(function() {
        (function(__iced_k) {
          if (err != null) {
            return __iced_k(err = new E.VerifyError("" + which + ": failed to verify signature"));
          } else {
            em = stderr.data().toString('utf8');
            (function(__iced_k) {
              if ((m = em.match(/Primary key fingerprint: (.*)/)) != null) {
                return __iced_k((a = strip(m[1]).toLowerCase()) !== (b = _this.fingerprint()) ? err = new E.VerifyError("" + which + ": bad key: " + a + " != " + b) : void 0);
              } else {
                (function(__iced_k) {
                  if ((m = em.match(/using [RD]SA key ID ([A-F0-9]{8})/)) != null) {
                    (function(__iced_k) {
                      if ((a = strip(m[1])) !== (b = _this.short_key_id())) {
                        return __iced_k(err = new E.VerifyError("" + which + ": bad key: " + a + " != " + b));
                      } else {
                        (function(__iced_k) {
                          __iced_deferrals = new iced.Deferrals(__iced_k, {
                            parent: ___iced_passed_deferral,
                            filename: "src/sigchain.iced",
                            funcname: "Link.verify_sig"
                          });
                          assert_no_collision(b, __iced_deferrals.defer({
                            assign_fn: (function() {
                              return function() {
                                return err = arguments[0];
                              };
                            })(),
                            lineno: 112
                          }));
                          __iced_deferrals._fulfill();
                        })(__iced_k);
                      }
                    })(__iced_k);
                  } else {
                    return __iced_k(err = new E.VerifyError("" + which + ": can't parse PGP output in verify signature"));
                  }
                })(__iced_k);
              }
            })(__iced_k);
          }
        })(function() {
          if ((typeof err === "undefined" || err === null) && ((a = out.toString('utf8')) !== (b = _this.payload_json_str()))) {
            err = new E.VerifyError("" + which + ": payload was wrong: " + a + " != " + b);
          }
          return cb(err);
        });
      });
    };

    Link.prototype.alloc_scraper = function(type, cb) {
      var PT, err, klass, scraper;
      PT = proofs.constants.proof_types;
      err = scraper = null;
      klass = (function() {
        switch (type) {
          case PT.twitter:
            return proofs.TwitterScraper;
          case PT.github:
            return proofs.GithubScraper;
          default:
            return null;
        }
      })();
      if (!klass) {
        err = new E.ScrapeError("cannot allocate scraper of type " + type);
      } else {
        scraper = new klass({
          libs: {
            cheerio: cheerio,
            request: request,
            log: log
          }
        });
      }
      return cb(err, scraper);
    };

    Link.prototype.check_remote_proof = function(_arg, cb) {
      var err, esc, msg, ok, rc, remote_username, scraper, type, type_s, username, warnings, ___iced_passed_deferral, __iced_deferrals, __iced_k,
        _this = this;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      username = _arg.username, type = _arg.type, warnings = _arg.warnings;
      esc = make_esc(cb, "SigChain::Link::check_remote_proof'");
      (function(__iced_k) {
        if ((type_s = proofs.proof_type_to_string[type]) == null) {
          return __iced_k(err = new E.VerifyError("No remove proof type for " + type));
        } else {
          err = null;
          log.debug("+ " + username + ": checking remote " + type_s + " proof");
          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "src/sigchain.iced",
              funcname: "Link.check_remote_proof"
            });
            _this.verify_sig({
              which: "" + username + "@" + type_s
            }, esc(__iced_deferrals.defer({
              lineno: 143
            })));
            __iced_deferrals._fulfill();
          })(function() {
            (function(__iced_k) {
              var _ref2, _ref3, _ref4;
              if ((remote_username = (_ref2 = _this.payload_json()) != null ? (_ref3 = _ref2.body) != null ? (_ref4 = _ref3.service) != null ? _ref4.username : void 0 : void 0 : void 0) == null) {
                return __iced_k(err = new E.VerifyError("no remote username found in proof"));
              } else {
                log.debug("| remote username is " + remote_username);
                (function(__iced_k) {
                  __iced_deferrals = new iced.Deferrals(__iced_k, {
                    parent: ___iced_passed_deferral,
                    filename: "src/sigchain.iced",
                    funcname: "Link.check_remote_proof"
                  });
                  _this.alloc_scraper(type, esc(__iced_deferrals.defer({
                    assign_fn: (function() {
                      return function() {
                        return scraper = arguments[0];
                      };
                    })(),
                    lineno: 148
                  })));
                  __iced_deferrals._fulfill();
                })(function() {
                  (function(__iced_k) {
                    __iced_deferrals = new iced.Deferrals(__iced_k, {
                      parent: ___iced_passed_deferral,
                      filename: "src/sigchain.iced",
                      funcname: "Link.check_remote_proof"
                    });
                    scraper.validate({
                      username: remote_username,
                      api_url: _this.api_url(),
                      signature: _this.sig(),
                      proof_text_check: _this.proof_text_check(),
                      remote_id: "" + _this.remote_id()
                    }, esc(__iced_deferrals.defer({
                      assign_fn: (function() {
                        return function() {
                          return rc = arguments[0];
                        };
                      })(),
                      lineno: 155
                    })));
                    __iced_deferrals._fulfill();
                  })(function() {
                    ok = false;
                    if (rc !== proofs.constants.v_codes.OK) {
                      warnings.push(new E.RemoteCheckError("Remote check failed (code: " + rc + ")"));
                    } else {
                      ok = true;
                      log.debug("| proof checked out");
                    }
                    msg = [(ok ? CHECK : BAD_X), '"' + ((ok ? colors.green : colors.red)(remote_username)) + '"', "on", type_s + ":", _this.human_url()];
                    if (!ok) {
                      msg.push("(failed with code " + rc + ")");
                    }
                    return __iced_k(log.console.log(msg.join(' ')));
                  });
                });
              }
            })(function() {
              return __iced_k(log.debug("- " + username + ": checked remote " + type_s + " proof"));
            });
          });
        }
      })(function() {
        return cb(err);
      });
    };

    return Link;

  })();

  exports.SigChain = SigChain = (function() {
    function SigChain(uid, _links) {
      this.uid = uid;
      this._links = _links != null ? _links : [];
    }

    SigChain.load = function(uid, curr, cb) {
      var err, link, links, ret, ___iced_passed_deferral, __iced_deferrals, __iced_k,
        _this = this;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      log.debug("+ " + uid + ": load signature chain");
      links = [];
      err = null;
      ret = null;
      (function(__iced_k) {
        var _results, _while;
        _results = [];
        _while = function(__iced_k) {
          var _break, _continue, _next;
          _break = function() {
            return __iced_k(_results);
          };
          _continue = function() {
            return iced.trampoline(function() {
              return _while(__iced_k);
            });
          };
          _next = function(__iced_next_arg) {
            _results.push(__iced_next_arg);
            return _continue();
          };
          if (!(curr && (err == null))) {
            return _break();
          } else {
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "src/sigchain.iced",
                funcname: "SigChain.load"
              });
              Link.load(curr, __iced_deferrals.defer({
                assign_fn: (function() {
                  return function() {
                    err = arguments[0];
                    return link = arguments[1];
                  };
                })(),
                lineno: 194
              }));
              __iced_deferrals._fulfill();
            })(function() {
              return _next(err != null ? log.error("Couldn't find link: " + last) : typeof link !== "undefined" && link !== null ? (links.push(link), curr = link.prev()) : curr = null);
            });
          }
        };
        _while(__iced_k);
      })(function() {
        if (err == null) {
          ret = new SigChain(uid, links.reverse());
          if ((err = ret.check_chain(true)) != null) {
            ret = null;
          }
        }
        log.debug("- " + uid + ": loaded signature chain");
        return cb(err, ret);
      });
    };

    SigChain.prototype.last_seqno = function() {
      var l;
      if ((l = this.last()) != null) {
        return l.seqno();
      } else {
        return null;
      }
    };

    SigChain.prototype.check_chain = function(first, links) {
      var i, link, prev, _i, _len;
      links || (links = this._links);
      prev = null;
      i = 0;
      for (_i = 0, _len = links.length; _i < _len; _i++) {
        link = links[_i];
        if (((prev != null) && (prev !== link.prev())) || ((prev == null) && first && link.prev())) {
          return new E.CorruptionError("Bad chain link in " + (link.seqno()) + ": " + prev + " != " + (link.prev()));
        }
        prev = link.id;
      }
      return null;
    };

    SigChain.prototype._update = function(cb) {
      var args, body, esc, link, new_links, obj, ___iced_passed_deferral, __iced_deferrals, __iced_k,
        _this = this;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      esc = make_esc(cb, "_update");
      args = {
        uid: this.uid,
        low: this.last_seqno() + 1
      };
      (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "src/sigchain.iced",
          funcname: "SigChain._update"
        });
        req.get({
          endpoint: "sig/get",
          args: args
        }, esc(__iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              return body = arguments[0];
            };
          })(),
          lineno: 229
        })));
        __iced_deferrals._fulfill();
      })(function() {
        new_links = [];
        (function(__iced_k) {
          var _i, _len, _ref2, _results, _while;
          _ref2 = body.sigs;
          _len = _ref2.length;
          _i = 0;
          _results = [];
          _while = function(__iced_k) {
            var _break, _continue, _next;
            _break = function() {
              return __iced_k(_results);
            };
            _continue = function() {
              return iced.trampoline(function() {
                ++_i;
                return _while(__iced_k);
              });
            };
            _next = function(__iced_next_arg) {
              _results.push(__iced_next_arg);
              return _continue();
            };
            if (!(_i < _len)) {
              return _break();
            } else {
              obj = _ref2[_i];
              link = new Link({
                obj: obj
              });
              (function(__iced_k) {
                __iced_deferrals = new iced.Deferrals(__iced_k, {
                  parent: ___iced_passed_deferral,
                  filename: "src/sigchain.iced",
                  funcname: "SigChain._update"
                });
                asyncify(link.verify(), esc(__iced_deferrals.defer({
                  lineno: 233
                })));
                __iced_deferrals._fulfill();
              })(function() {
                return _next(new_links.push(link));
              });
            }
          };
          _while(__iced_k);
        })(function() {
          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "src/sigchain.iced",
              funcname: "SigChain._update"
            });
            asyncify(_this.check_chain(_this._links.length === 0, new_links), esc(__iced_deferrals.defer({
              lineno: 235
            })));
            __iced_deferrals._fulfill();
          })(function() {
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "src/sigchain.iced",
                funcname: "SigChain._update"
              });
              asyncify(_this.check_chain(false, _this._links.slice(-1).concat(new_links.slice(0, 1))), esc(__iced_deferrals.defer({
                lineno: 236
              })));
              __iced_deferrals._fulfill();
            })(function() {
              _this._links = _this._links.concat(new_links);
              _this._new_links = new_links;
              return cb(null);
            });
          });
        });
      });
    };

    SigChain.prototype.store = function(cb) {
      var err, link, ___iced_passed_deferral, __iced_deferrals, __iced_k,
        _this = this;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      err = null;
      (function(__iced_k) {
        if (_this._new_links != null) {
          log.debug("+ writing dirty signature chain");
          (function(__iced_k) {
            var _i, _len, _ref2, _results, _while;
            _ref2 = _this._new_links;
            _len = _ref2.length;
            _i = 0;
            _results = [];
            _while = function(__iced_k) {
              var _break, _continue, _next;
              _break = function() {
                return __iced_k(_results);
              };
              _continue = function() {
                return iced.trampoline(function() {
                  ++_i;
                  return _while(__iced_k);
                });
              };
              _next = function(__iced_next_arg) {
                _results.push(__iced_next_arg);
                return _continue();
              };
              if (!(_i < _len)) {
                return _break();
              } else {
                link = _ref2[_i];
                if (err == null) {
                  (function(__iced_k) {
                    __iced_deferrals = new iced.Deferrals(__iced_k, {
                      parent: ___iced_passed_deferral,
                      filename: "src/sigchain.iced",
                      funcname: "SigChain.store"
                    });
                    link.store(__iced_deferrals.defer({
                      assign_fn: (function() {
                        return function() {
                          return err = arguments[0];
                        };
                      })(),
                      lineno: 248
                    }));
                    __iced_deferrals._fulfill();
                  })(_next);
                } else {
                  return _continue();
                }
              }
            };
            _while(__iced_k);
          })(function() {
            return __iced_k(log.debug("- wrote signature chain"));
          });
        } else {
          return __iced_k();
        }
      })(function() {
        return cb(err);
      });
    };

    SigChain.prototype.update = function(remote_seqno, cb) {
      var a, b, err, ___iced_passed_deferral, __iced_deferrals, __iced_k,
        _this = this;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      err = null;
      (function(__iced_k) {
        if (((a = remote_seqno) == null) || a > (b = _this.last_seqno())) {
          log.debug("| sigchain update: " + a + " vs. " + b);
          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "src/sigchain.iced",
              funcname: "SigChain.update"
            });
            _this._update(__iced_deferrals.defer({
              assign_fn: (function() {
                return function() {
                  return err = arguments[0];
                };
              })(),
              lineno: 258
            }));
            __iced_deferrals._fulfill();
          })(function() {
            return __iced_k((remote_seqno != null) && ((a = remote_seqno) !== (b = _this.last_seqno())) ? err = new E.CorruptionError("failed to appropriately update chain: " + a + " != " + b) : void 0);
          });
        } else {
          return __iced_k();
        }
      })(function() {
        return cb(err);
      });
    };

    SigChain.prototype.last = function() {
      var _ref2;
      if ((_ref2 = this._links) != null ? _ref2.length : void 0) {
        return this._links.slice(-1)[0];
      } else {
        return null;
      }
    };

    SigChain.prototype._limit = function() {
      var c, i, l, n, _i, _ref2;
      c = [];
      log.debug("| input chain with " + (n = this._links.length) + " link" + (n !== 1 ? 's' : ''));
      for (i = _i = _ref2 = this._links.length - 1; _ref2 <= 0 ? _i <= 0 : _i >= 0; i = _ref2 <= 0 ? ++_i : --_i) {
        if ((l = this._links[i]).fingerprint() === this.fingerprint) {
          c.push(l);
        } else {
          break;
        }
      }
      c = c.reverse();
      if (c.length !== this._links.length) {
        log.debug("| Limited to " + (n = c.length) + " link" + (n !== 1 ? 's' : ''));
      }
      return this._links = c;
    };

    SigChain.prototype._verify_sig = function(cb) {
      var err, l, ___iced_passed_deferral, __iced_deferrals, __iced_k,
        _this = this;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      err = null;
      (function(__iced_k) {
        if ((l = _this.last()) != null) {
          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "src/sigchain.iced",
              funcname: "SigChain._verify_sig"
            });
            l.verify_sig({
              which: _this.username
            }, __iced_deferrals.defer({
              assign_fn: (function() {
                return function() {
                  return err = arguments[0];
                };
              })(),
              lineno: 286
            }));
            __iced_deferrals._fulfill();
          })(__iced_k);
        } else {
          return __iced_k();
        }
      })(function() {
        return cb(err);
      });
    };

    SigChain.prototype._verify_userid = function(cb) {
      var d, email, err, esc, found, k, link, type, uids, v, ___iced_passed_deferral, __iced_deferrals, __iced_k,
        _this = this;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      esc = make_esc(cb, "_verify_userid");
      (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "src/sigchain.iced",
          funcname: "SigChain._verify_userid"
        });
        read_uids_from_key({
          fingerprint: _this.fingerprint
        }, esc(__iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              return uids = arguments[0];
            };
          })(),
          lineno: 295
        })));
        __iced_deferrals._fulfill();
      })(function() {
        var _i, _j, _len, _len1, _ref2;
        found = ((function() {
          var _i, _len, _results;
          _results = [];
          for (_i = 0, _len = uids.length; _i < _len; _i++) {
            email = uids[_i].email;
            _results.push(email);
          }
          return _results;
        })()).indexOf(make_email(_this.username)) >= 0;
        found = false;
        if (!found && ((v = _this.table[ST.SELF_SIG]) != null)) {
          for (_i = 0, _len = v.length; _i < _len; _i++) {
            link = v[_i];
            if (link.self_signer() === _this.username) {
              found = true;
              break;
            }
          }
        }
        if (!found) {
          _ref2 = [ST.REMOTE_PROOF, ST.TRACK];
          for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {
            type = _ref2[_j];
            if ((d = _this.table[type])) {
              for (k in d) {
                link = d[k];
                if (link.self_signer() === _this.username) {
                  found = true;
                  break;
                }
              }
              if (found) {
                break;
              }
            }
          }
        }
        if ((typeof err === "undefined" || err === null) && !found) {
          err = new E.VerifyError("could not find self signature of username '" + _this.username + "'");
        }
        return cb(err);
      });
    };

    SigChain.prototype._compress = function() {
      var MAKE, body, cat, id, index, link, lt, out, pjs, sig, sig_id, _i, _len, _ref2, _ref3, _ref4, _ref5, _ref6, _ref7;
      log.debug("+ compressing signature chain");
      MAKE = function(d, k, def) {
        var out;
        if ((out = d[k])) {
          return out;
        } else {
          return d[k] = out = def;
        }
      };
      out = {};
      index = {};
      _ref2 = this._links;
      for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
        link = _ref2[_i];
        if (!(link.fingerprint() === this.fingerprint)) {
          continue;
        }
        lt = link.sig_type();
        sig_id = link.sig_id();
        pjs = link.payload_json_str();
        body = (_ref3 = link.payload_json()) != null ? _ref3.body : void 0;
        index[link.sig_id()] = lt;
        switch (lt) {
          case ST.SELF_SIG:
            MAKE(out, lt, []).push(link);
            break;
          case ST.REMOTE_PROOF:
            MAKE(out, lt, {})[link.proof_type()] = link;
            break;
          case ST.TRACK:
            if (!(id = body != null ? (_ref4 = body.track) != null ? _ref4.id : void 0 : void 0)) {
              log.warn("Missing track in signature: " + pjs);
            } else {
              MAKE(out, lt, {})[id] = link;
            }
            break;
          case ST.REVOKE:
            if (!(sig_id = body != null ? (_ref5 = body.revoke) != null ? _ref5.sig_id : void 0 : void 0)) {
              log.warn("Cannot find revoke sig_id in signature: " + pjs);
            } else if (((cat = index[sig_id]) == null) || ((sig = out[cat]) == null)) {
              log.warn("Cannot revoke signature " + sig_id + " since we haven't seen it");
            } else if (!sig.sig_id() === sig_id) {
              log.warn("Cannot revoke signature " + sig_id + " since it's been superseded");
            } else {
              delete out[cat];
            }
            break;
          case ST.UNFOLLOW:
            if (!(id = (body != null ? (_ref6 = body.track) != null ? _ref6.id : void 0 : void 0) != null)) {
              log.warn("Mssing untrack in signature: " + pjs);
            } else if (!(((_ref7 = out[ST.TRACK]) != null ? _ref7[id] : void 0) != null)) {
              log.warn("Not tracking " + id + " to begin with");
            } else {
              delete out[ST.TRACK][id];
            }
        }
      }
      log.debug("- signature chain compressed");
      return this.table = out;
    };

    SigChain.prototype.get_track = function(uid) {
      var _ref2;
      return (_ref2 = this.table[ST.TRACK]) != null ? _ref2[uid] : void 0;
    };

    SigChain.prototype.verify_sig = function(_arg, cb) {
      var esc, username, ___iced_passed_deferral, __iced_deferrals, __iced_k,
        _this = this;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      username = _arg.username;
      esc = make_esc(cb, "SigChain::verify_sig");
      this.username = username;
      log.debug("+ " + username + ": verifying sig");
      (function(__iced_k) {
        var _ref2;
        if ((_this.fingerprint = (_ref2 = _this.last()) != null ? _ref2.fingerprint() : void 0) != null) {
          _this._limit();
          _this._compress();
          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "src/sigchain.iced",
              funcname: "SigChain.verify_sig"
            });
            _this._verify_sig(esc(__iced_deferrals.defer({
              lineno: 377
            })));
            __iced_deferrals._fulfill();
          })(function() {
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "src/sigchain.iced",
                funcname: "SigChain.verify_sig"
              });
              _this._verify_userid(esc(__iced_deferrals.defer({
                lineno: 378
              })));
              __iced_deferrals._fulfill();
            })(__iced_k);
          });
        } else {
          return __iced_k(log.debug("| Skipped since no fingreprint found in key"));
        }
      })(function() {
        log.debug("- " + username + ": verified sig");
        return cb(null);
      });
    };

    SigChain.prototype.check_remote_proofs = function(_arg, cb) {
      var esc, link, tab, type, username, warnings, ___iced_passed_deferral, __iced_deferrals, __iced_k,
        _this = this;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      username = _arg.username;
      esc = make_esc(cb, "SigChain::check_remote_proofs");
      log.debug("+ " + username + ": checking remote proofs");
      warnings = new Warnings();
      (function(__iced_k) {
        if ((tab = _this.table[ST.REMOTE_PROOF]) != null) {
          (function(__iced_k) {
            var _i, _k, _keys, _ref2, _results, _while;
            _ref2 = tab;
            _keys = (function() {
              var _results1;
              _results1 = [];
              for (_k in _ref2) {
                _results1.push(_k);
              }
              return _results1;
            })();
            _i = 0;
            _results = [];
            _while = function(__iced_k) {
              var _break, _continue, _next;
              _break = function() {
                return __iced_k(_results);
              };
              _continue = function() {
                return iced.trampoline(function() {
                  ++_i;
                  return _while(__iced_k);
                });
              };
              _next = function(__iced_next_arg) {
                _results.push(__iced_next_arg);
                return _continue();
              };
              if (!(_i < _keys.length)) {
                return _break();
              } else {
                type = _keys[_i];
                link = _ref2[type];
                type = parseInt(type);
                (function(__iced_k) {
                  __iced_deferrals = new iced.Deferrals(__iced_k, {
                    parent: ___iced_passed_deferral,
                    filename: "src/sigchain.iced",
                    funcname: "SigChain.check_remote_proofs"
                  });
                  link.check_remote_proof({
                    username: username,
                    type: type,
                    warnings: warnings
                  }, esc(__iced_deferrals.defer({
                    lineno: 393
                  })));
                  __iced_deferrals._fulfill();
                })(_next);
              }
            };
            _while(__iced_k);
          })(__iced_k);
        } else {
          return __iced_k();
        }
      })(function() {
        log.debug("- " + username + ": checked remote proofs");
        return cb(null, warnings);
      });
    };

    return SigChain;

  })();

}).call(this);
