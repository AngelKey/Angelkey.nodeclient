// Generated by IcedCoffeeScript 1.6.3-i
(function() {
  var Base, BufferInStream, BufferOutStream, Command, E, TmpPrimaryKeyRing, TrackSubSubCommand, User, add_option_dict, athrow, colors, constants, env, iced, log, make_esc, parse_signature, __iced_k, __iced_k_noop, _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  iced = require('iced-coffee-script/lib/coffee-script/iced').runtime;
  __iced_k = __iced_k_noop = function() {};

  Base = require('./base').Base;

  log = require('../log');

  add_option_dict = require('./argparse').add_option_dict;

  E = require('../err').E;

  TrackSubSubCommand = require('../tracksubsub').TrackSubSubCommand;

  _ref = require('gpg-wrapper'), BufferOutStream = _ref.BufferOutStream, BufferInStream = _ref.BufferInStream;

  make_esc = require('iced-error').make_esc;

  env = require('../env').env;

  TmpPrimaryKeyRing = require('../keyring').TmpPrimaryKeyRing;

  TrackSubSubCommand = require('../tracksubsub').TrackSubSubCommand;

  athrow = require('pgp-utils').util.athrow;

  parse_signature = require('../gpg').parse_signature;

  colors = require('colors');

  constants = require('../constants').constants;

  User = require('../user').User;

  exports.Command = Command = (function(_super) {
    __extends(Command, _super);

    function Command() {
      return Command.__super__.constructor.apply(this, arguments);
    }

    Command.prototype.OPTS = {
      s: {
        alias: 'signed',
        action: 'storeTrue',
        help: "assert signed"
      },
      S: {
        alias: 'signed-by',
        help: "assert signed by the given user"
      },
      t: {
        alias: "track",
        action: "storeTrue",
        help: "prompt for tracking if necessary"
      },
      r: {
        alias: "track-remote",
        action: "storeTrue",
        help: "remotely track by default"
      },
      l: {
        alias: "track-local",
        action: "storeTrue",
        help: "don't prompt for remote tracking"
      },
      '6': {
        alias: "base64",
        action: "storeTrue",
        help: "output result as base64-encoded data"
      },
      m: {
        alias: "message",
        help: "provide the message on the command line"
      },
      o: {
        alias: "output",
        help: "output to the given file"
      }
    };

    Command.prototype.add_subcommand_parser = function(scp) {
      var name, opts, sub;
      opts = {
        aliases: ["dec"],
        help: "decrypt a file"
      };
      name = "decrypt";
      sub = scp.addParser(name, opts);
      add_option_dict(sub, this.OPTS);
      sub.addArgument(["file"], {
        nargs: '?'
      });
      return opts.aliases.concat([name]);
    };

    Command.prototype.try_track = function() {
      return this.argv.track || this.argv.track_remote || this.argv.track_local;
    };

    Command.prototype.handle_signature = function(cb) {
      var a, arg, b, basics, err, ___iced_passed_deferral, __iced_deferrals, __iced_k, _ref1;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      _ref1 = parse_signature(this.decrypt_stderr.data().toString('utf8')), err = _ref1[0], this.signing_key = _ref1[1];
      this.found_sig = err == null;
      if ((err instanceof E.NotFoundError) && !this.argv.signed && (this.argv.signed_by == null)) {
        log.debug("| No signatured found; but we didn't require one");
        err = null;
      }
      (function(_this) {
        return (function(__iced_k) {
          if (_this.found_sig) {
            arg = {
              type: constants.lookups.key_fingerprint_to_user,
              name: _this.signing_key.primary
            };
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "/Users/max/src/keybase-node-client/src/command/decrypt.iced",
                funcname: "Command.handle_signature"
              });
              User.map_key_to_user(arg, __iced_deferrals.defer({
                assign_fn: (function() {
                  return function() {
                    err = arguments[0];
                    return basics = arguments[1];
                  };
                })(),
                lineno: 84
              }));
              __iced_deferrals._fulfill();
            })(function() {
              return __iced_k(err == null ? (log.info("Valid signature from keybase user " + colors.bold(basics.username)), _this.username = basics.username, ((a = _this.argv.signed_by) != null) && (a !== (b = _this.username)) ? err = new E.WrongSignerError("Wrong signer: wanted '" + a + "' but got '" + b + "'") : void 0) : void 0);
            });
          } else {
            return __iced_k();
          }
        });
      })(this)((function(_this) {
        return function() {
          return cb(err);
        };
      })(this));
    };

    Command.prototype.handle_track = function(cb) {
      var args, esc, ids, ki64, opts, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      esc = make_esc(cb, "Command::handle_signature");
      opts = {
        remote: this.argv.track_remote,
        local: this.argv.track_local
      };
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/max/src/keybase-node-client/src/command/decrypt.iced",
            funcname: "Command.handle_track"
          });
          _this.tmp_keyring.list_keys(esc(__iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                return ids = arguments[0];
              };
            })(),
            lineno: 99
          })));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          (function(__iced_k) {
            if (ids.length === 0) {
              return __iced_k(log.debug("| No new keys imported"));
            } else {
              (function(__iced_k) {
                if (ids.length > 1) {
                  (function(__iced_k) {
                    __iced_deferrals = new iced.Deferrals(__iced_k, {
                      parent: ___iced_passed_deferral,
                      filename: "/Users/max/src/keybase-node-client/src/command/decrypt.iced",
                      funcname: "Command.handle_track"
                    });
                    athrow(new E.CorruptionError("Too many imported keys: " + ids.length), esc(__iced_deferrals.defer({
                      lineno: 103
                    })));
                    __iced_deferrals._fulfill();
                  })(__iced_k);
                } else {
                  ki64 = ids[0];
                  log.debug("| Found new key in the keyring: " + ki64);
                  args = {
                    them: _this.username
                  };
                  _this.tssc = new TrackSubSubCommand({
                    args: args,
                    opts: opts,
                    tmp_keyring: _this.tmp_keyring
                  });
                  (function(__iced_k) {
                    __iced_deferrals = new iced.Deferrals(__iced_k, {
                      parent: ___iced_passed_deferral,
                      filename: "/Users/max/src/keybase-node-client/src/command/decrypt.iced",
                      funcname: "Command.handle_track"
                    });
                    _this.tssc.run(esc(__iced_deferrals.defer({
                      lineno: 109
                    })));
                    __iced_deferrals._fulfill();
                  })(__iced_k);
                }
              })(__iced_k);
            }
          })(function() {
            return cb(null);
          });
        };
      })(this));
    };

    Command.prototype.do_decrypt = function(cb) {
      var args, err, gargs, o, out, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      args = ["--decrypt", "--with-colons", "--keyid-format", "long", "--keyserver", env().get_key_server(), "--with-fingerprint"];
      if (env().get_debug()) {
        args.push("--keyserver-options", "debug=1");
      }
      if ((o = this.argv.output) != null) {
        args.push("--output", o);
      }
      gargs = {
        args: args
      };
      gargs.stderr = this.decrypt_stderr = new BufferOutStream();
      if (this.argv.message) {
        gargs.stdin = new BufferInStream(this.argv.message);
      } else if (this.argv.file != null) {
        args.push(this.argv.file);
      } else {
        gargs.stdin = process.stdin;
      }
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/max/src/keybase-node-client/src/command/decrypt.iced",
            funcname: "Command.do_decrypt"
          });
          _this.tmp_keyring.gpg(gargs, __iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                err = arguments[0];
                return out = arguments[1];
              };
            })(),
            lineno: 132
          }));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          log.console.log(out.toString(_this.argv.base64 ? 'base64' : 'binary'));
          return cb(err);
        };
      })(this));
    };

    Command.prototype.setup_tmp_keyring = function(cb) {
      var err, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/max/src/keybase-node-client/src/command/decrypt.iced",
            funcname: "Command.setup_tmp_keyring"
          });
          TmpPrimaryKeyRing.make(__iced_deferrals.defer({
            assign_fn: (function(__slot_1) {
              return function() {
                err = arguments[0];
                return __slot_1.tmp_keyring = arguments[1];
              };
            })(_this),
            lineno: 139
          }));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          return cb(err);
        };
      })(this));
    };

    Command.prototype.run = function(cb) {
      var esc, opts, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      esc = make_esc(cb, "Command::run");
      opts = {
        remote: this.argv.track_remote,
        local: this.argv.track_local
      };
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/max/src/keybase-node-client/src/command/decrypt.iced",
            funcname: "Command.run"
          });
          _this.setup_tmp_keyring(esc(__iced_deferrals.defer({
            lineno: 149
          })));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "/Users/max/src/keybase-node-client/src/command/decrypt.iced",
              funcname: "Command.run"
            });
            _this.do_decrypt(esc(__iced_deferrals.defer({
              lineno: 150
            })));
            __iced_deferrals._fulfill();
          })(function() {
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "/Users/max/src/keybase-node-client/src/command/decrypt.iced",
                funcname: "Command.run"
              });
              _this.handle_signature(esc(__iced_deferrals.defer({
                lineno: 151
              })));
              __iced_deferrals._fulfill();
            })(function() {
              (function(__iced_k) {
                if (_this.found_sig && _this.try_track()) {
                  (function(__iced_k) {
                    __iced_deferrals = new iced.Deferrals(__iced_k, {
                      parent: ___iced_passed_deferral,
                      filename: "/Users/max/src/keybase-node-client/src/command/decrypt.iced",
                      funcname: "Command.run"
                    });
                    _this.handle_track(esc(__iced_deferrals.defer({
                      lineno: 152
                    })));
                    __iced_deferrals._fulfill();
                  })(__iced_k);
                } else {
                  return __iced_k();
                }
              })(function() {
                return cb(null);
              });
            });
          });
        };
      })(this));
    };

    return Command;

  })(Base);

}).call(this);
