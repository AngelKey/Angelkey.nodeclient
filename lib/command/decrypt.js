// Generated by IcedCoffeeScript 1.6.3-i
(function() {
  var Base, BufferInStream, Command, E, TrackSubSubCommand, add_option_dict, env, gpg, iced, log, make_esc, __iced_k, __iced_k_noop,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  iced = require('iced-coffee-script/lib/coffee-script/iced').runtime;
  __iced_k = __iced_k_noop = function() {};

  Base = require('./base').Base;

  log = require('../log');

  add_option_dict = require('./argparse').add_option_dict;

  E = require('../err').E;

  TrackSubSubCommand = require('../tracksubsub').TrackSubSubCommand;

  BufferInStream = require('gpg-wrapper').BufferInStream;

  gpg = require('../gpg').gpg;

  make_esc = require('iced-error').make_esc;

  env = require('../env').env;

  exports.Command = Command = (function(_super) {
    __extends(Command, _super);

    function Command() {
      return Command.__super__.constructor.apply(this, arguments);
    }

    Command.prototype.OPTS = {
      r: {
        alias: "track-remote",
        action: "storeTrue",
        help: "remotely track by default"
      },
      l: {
        alias: "track-local",
        action: "storeTrue",
        help: "don't prompt for remote tracking"
      },
      '6': {
        alias: "base64",
        action: "storeTrue",
        help: "output result as base64-encoded data"
      },
      m: {
        alias: "message",
        help: "provide the message on the command line"
      }
    };

    Command.prototype.add_subcommand_parser = function(scp) {
      var name, opts, sub;
      opts = {
        aliases: ["dec"],
        help: "decrypt a file"
      };
      name = "decrypt";
      sub = scp.addParser(name, opts);
      add_option_dict(sub, this.OPTS);
      sub.addArgument(["file"], {
        nargs: '?'
      });
      return opts.aliases.concat([name]);
    };

    Command.prototype.do_decrypt = function(cb) {
      var args, err, gargs, out, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      args = ["--decrypt", "--keyserver", env().get_key_server()];
      if (env().get_debug()) {
        args.push("--keyserver-options", "debug=1");
      }
      gargs = {
        args: args
      };
      if (this.argv.message) {
        gargs.stdin = new BufferInStream(this.argv.message);
      } else if (this.argv.file != null) {
        args.push(this.argv.file);
      } else {
        gargs.stdin = process.stdin;
      }
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/max/src/keybase-node-client/src/command/decrypt.iced",
            funcname: "Command.do_decrypt"
          });
          gpg(gargs, __iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                err = arguments[0];
                return out = arguments[1];
              };
            })(),
            lineno: 57
          }));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          log.console.log(out.toString(_this.argv.base64 ? 'base64' : 'binary'));
          return cb(err);
        };
      })(this));
    };

    Command.prototype.run = function(cb) {
      var esc, opts, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      esc = make_esc(cb, "Command::run");
      opts = {
        remote: this.argv.track_remote,
        local: this.argv.track_local
      };
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/max/src/keybase-node-client/src/command/decrypt.iced",
            funcname: "Command.run"
          });
          _this.do_decrypt(esc(__iced_deferrals.defer({
            lineno: 68
          })));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          return cb(null);
        };
      })(this));
    };

    return Command;

  })(Base);

}).call(this);
