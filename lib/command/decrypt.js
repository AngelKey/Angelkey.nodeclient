// Generated by IcedCoffeeScript 1.7.1-a
(function() {
  var BufferInStream, BufferOutStream, Command, TrackSubSubCommand, add_option_dict, dv, env, log, _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  dv = require('./decrypt_and_verify');

  add_option_dict = require('./argparse').add_option_dict;

  env = require('../env').env;

  _ref = require('gpg-wrapper'), BufferOutStream = _ref.BufferOutStream, BufferInStream = _ref.BufferInStream;

  TrackSubSubCommand = require('../tracksubsub').TrackSubSubCommand;

  log = require('../log');

  exports.Command = Command = (function(_super) {
    __extends(Command, _super);

    function Command() {
      return Command.__super__.constructor.apply(this, arguments);
    }

    Command.prototype.add_subcommand_parser = function(scp) {
      var name, opts, sub;
      opts = {
        aliases: ["dec"],
        help: "decrypt a file"
      };
      name = "decrypt";
      sub = scp.addParser(name, opts);
      add_option_dict(sub, dv.Command.OPTS);
      add_option_dict(sub, {
        o: {
          alias: "output",
          help: "output to the given file"
        }
      });
      sub.addArgument(["file"], {
        nargs: '?'
      });
      return opts.aliases.concat([name]);
    };

    Command.prototype.do_output = function(out) {
      return log.console.log(out.toString(this.argv.base64 ? 'base64' : 'binary'));
    };

    Command.prototype.make_gpg_args = function() {
      var args, gargs, o;
      args = ["--decrypt", "--with-colons", "--keyid-format", "long", "--keyserver", env().get_key_server(), "--with-fingerprint", "--yes"];
      if (env().get_debug()) {
        args.push("--keyserver-options", "debug=1");
      }
      if ((o = this.argv.output) != null) {
        args.push("--output", o);
      }
      gargs = {
        args: args
      };
      gargs.stderr = new BufferOutStream();
      if (this.argv.message) {
        gargs.stdin = new BufferInStream(this.argv.message);
      } else if (this.argv.file != null) {
        args.push(this.argv.file);
      } else {
        gargs.stdin = process.stdin;
        this.batch = true;
      }
      return gargs;
    };

    return Command;

  })(dv.Command);

}).call(this);
