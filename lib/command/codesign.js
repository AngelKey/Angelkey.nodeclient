// Generated by IcedCoffeeScript 1.7.1-b
(function() {
  var Base, BufferInStream, Command, E, TrackSubSubCommand, User, add_option_dict, codesign, fs, gpg, iced, keypull, log, make_esc, path, __iced_k, __iced_k_noop,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  iced = require('iced-coffee-script').iced;
  __iced_k = __iced_k_noop = function() {};

  codesign = require('codesign');

  path = require('path');

  fs = require('fs');

  Base = require('./base').Base;

  log = require('../log');

  add_option_dict = require('./argparse').add_option_dict;

  E = require('../err').E;

  TrackSubSubCommand = require('../tracksubsub').TrackSubSubCommand;

  gpg = require('../gpg').gpg;

  make_esc = require('iced-error').make_esc;

  User = require('../user').User;

  keypull = require('../keypull').keypull;

  BufferInStream = require('iced-spawn').BufferInStream;

  exports.Command = Command = (function(_super) {
    __extends(Command, _super);

    function Command() {
      return Command.__super__.constructor.apply(this, arguments);
    }

    Command.prototype.SIGN_OPTS = {
      o: {
        alias: 'output',
        type: 'string',
        help: 'the output file',
        defaultValue: codesign.constants.defaults.FILENAME
      },
      p: {
        alias: 'presets',
        action: 'store',
        type: 'string',
        help: 'specify ignore presets, comma-separated',
        defaultValue: 'git,dropbox,kb'
      },
      d: {
        alias: 'dir',
        action: 'store',
        type: 'string',
        help: 'the directory to sign',
        defaultValue: '.'
      },
      q: {
        alias: 'quiet',
        action: 'storeTrue',
        help: 'withhold output unless an error'
      }
    };

    Command.prototype.VERIFY_OPTS = {
      i: {
        alias: 'input',
        type: 'string',
        help: 'the input file',
        defaultValue: codesign.constants.defaults.FILENAME
      },
      d: {
        alias: 'dir',
        action: 'store',
        type: 'string',
        help: 'the directory to sign',
        defaultValue: '.'
      },
      q: {
        alias: 'quiet',
        action: 'storeTrue',
        help: 'withhold output unless an error'
      },
      s: {
        alias: 'strict',
        action: 'storeTrue',
        help: 'fail on warnings (typically cross-platform problems)'
      }
    };

    Command.prototype.TOJSON_OPTS = {
      i: {
        alias: 'input',
        type: 'string',
        help: 'the input file to convert to JSON',
        defaultValue: codesign.constants.defaults.FILENAME
      }
    };

    Command.prototype.is_batch = function() {
      return false;
    };

    Command.prototype.set_argv = function(a) {
      return Command.__super__.set_argv.call(this, a);
    };

    Command.prototype.add_subcommand_parser = function(scp) {
      var name, opts, ss1, ss2, ss3, sub, sub2;
      opts = {
        aliases: ["code-sign"],
        help: "sign or verify a directory's contents"
      };
      name = "codesign";
      sub = scp.addParser(name, opts);
      sub2 = sub.addSubparsers({
        title: "codesign subcommand",
        dest: "codesign_subcommand"
      });
      ss1 = sub2.addParser("sign", {
        help: "sign a directory's contents"
      });
      add_option_dict(ss1, this.SIGN_OPTS);
      ss2 = sub2.addParser("verify", {
        help: "verify a directory's contents"
      });
      add_option_dict(ss2, this.VERIFY_OPTS);
      ss3 = sub2.addParser("tojson", {
        help: "convert a signed manifest to JSON"
      });
      add_option_dict(ss3, this.TOJSON_OPTS);
      return opts.aliases.concat([name]);
    };

    Command.prototype.do_sign = function(payload, cb) {
      var esc, gargs, out, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      esc = make_esc(cb, "Command::do_sign");
      gargs = {
        args: ["--sign", "--detach-sign", "-a", "-u", this.me.fingerprint(true)],
        stdin: new BufferInStream(new Buffer(payload, 'utf8'))
      };
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/chris/git/keybase/node-client/src/command/codesign.iced",
            funcname: "Command.do_sign"
          });
          gpg(gargs, esc(__iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                return out = arguments[0];
              };
            })(),
            lineno: 117
          })));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          return cb(null, out.toString('utf8'));
        };
      })(this));
    };

    Command.prototype.load_me = function(cb) {
      var err, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/chris/git/keybase/node-client/src/command/codesign.iced",
            funcname: "Command.load_me"
          });
          User.load_me({
            secret: true
          }, __iced_deferrals.defer({
            assign_fn: (function(__slot_1) {
              return function() {
                err = arguments[0];
                return __slot_1.me = arguments[1];
              };
            })(_this),
            lineno: 123
          }));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          return cb(err);
        };
      })(this));
    };

    Command.prototype.get_preset_list = function(cb) {
      var err, k, presets, valid_presets, _i, _len;
      err = null;
      presets = this.argv.presets.split(',');
      valid_presets = (function() {
        var _results;
        _results = [];
        for (k in codesign.constants.presets) {
          _results.push(k);
        }
        return _results;
      })();
      for (_i = 0, _len = presets.length; _i < _len; _i++) {
        k = presets[_i];
        if (!codesign.CodeSign.is_valid_preset(k)) {
          err = new E.ArgsError("Unknown preset " + k + " (valid values = " + (valid_presets.join(',')) + ")");
          presets = null;
          break;
        }
      }
      return cb(err, presets);
    };

    Command.prototype.get_ignore_list = function() {
      var ignore, rel_ignore;
      rel_ignore = path.relative(this.argv.dir, this.argv.output).split(path.sep).join('/');
      ignore = rel_ignore.slice(0, 2) !== '..' ? ["/" + rel_ignore] : [];
      return ignore;
    };

    Command.prototype.target_file_to_json = function(fname, cb) {
      var body, err, f_err, obj, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);

      /*
      returns     null, null  # if there is no target file,
      otherwise:  err, obj
       */
      log.debug("+ Command::target_file_to_json");
      obj = null;
      err = null;
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/chris/git/keybase/node-client/src/command/codesign.iced",
            funcname: "Command.target_file_to_json"
          });
          fs.readFile(fname, 'utf8', __iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                f_err = arguments[0];
                return body = arguments[1];
              };
            })(),
            lineno: 158
          }));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          if (typeof body !== "undefined" && body !== null) {
            obj = codesign.markdown_to_obj(body);
            if (obj == null) {
              err = new E.CorruptionError("Could not parse file " + fname);
            }
          }
          log.debug("- Command::target_file_to_json");
          return cb(err, obj);
        };
      })(this));
    };

    Command.prototype.sign = function(cb) {
      var cs, esc, md, my_username, old_obj, preset_list, probs, sig, signature, signer, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      log.debug("+ Command::sign");
      esc = make_esc(cb, "Command::sign");
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/chris/git/keybase/node-client/src/command/codesign.iced",
            funcname: "Command.sign"
          });
          keypull({
            stdin_blocked: _this.is_batch(),
            need_secret: true
          }, esc(__iced_deferrals.defer({
            lineno: 175
          })));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "/Users/chris/git/keybase/node-client/src/command/codesign.iced",
              funcname: "Command.sign"
            });
            _this.load_me(esc(__iced_deferrals.defer({
              lineno: 176
            })));
            __iced_deferrals._fulfill();
          })(function() {
            my_username = "https://keybase.io/" + (_this.me.username());
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "/Users/chris/git/keybase/node-client/src/command/codesign.iced",
                funcname: "Command.sign"
              });
              _this.get_preset_list(esc(__iced_deferrals.defer({
                assign_fn: (function() {
                  return function() {
                    return preset_list = arguments[0];
                  };
                })(),
                lineno: 183
              })));
              __iced_deferrals._fulfill();
            })(function() {
              cs = new codesign.CodeSign(_this.argv.dir, {
                ignore: _this.get_ignore_list(),
                presets: preset_list
              });
              (function(__iced_k) {
                __iced_deferrals = new iced.Deferrals(__iced_k, {
                  parent: ___iced_passed_deferral,
                  filename: "/Users/chris/git/keybase/node-client/src/command/codesign.iced",
                  funcname: "Command.sign"
                });
                cs.walk(esc(__iced_deferrals.defer({
                  lineno: 185
                })));
                __iced_deferrals._fulfill();
              })(function() {
                (function(__iced_k) {
                  __iced_deferrals = new iced.Deferrals(__iced_k, {
                    parent: ___iced_passed_deferral,
                    filename: "/Users/chris/git/keybase/node-client/src/command/codesign.iced",
                    funcname: "Command.sign"
                  });
                  _this.target_file_to_json(_this.argv.output, esc(__iced_deferrals.defer({
                    assign_fn: (function() {
                      return function() {
                        return old_obj = arguments[0];
                      };
                    })(),
                    lineno: 191
                  })));
                  __iced_deferrals._fulfill();
                })(function() {
                  (function(__iced_k) {
                    if (typeof old_obj !== "undefined" && old_obj !== null) {
                      log.info("Found existing " + _this.argv.output);
                      (function(__iced_k) {
                        __iced_deferrals = new iced.Deferrals(__iced_k, {
                          parent: ___iced_passed_deferral,
                          filename: "/Users/chris/git/keybase/node-client/src/command/codesign.iced",
                          funcname: "Command.sign"
                        });
                        cs.compare_to_json_obj(old_obj, __iced_deferrals.defer({
                          assign_fn: (function() {
                            return function() {
                              return probs = arguments[0];
                            };
                          })(),
                          lineno: 194
                        }));
                        __iced_deferrals._fulfill();
                      })(function() {
                        var _i, _len, _ref, _ref1;
                        if (!probs.length) {
                          _ref = old_obj.signatures;
                          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                            _ref1 = _ref[_i], signer = _ref1.signer, signature = _ref1.signature;
                            if (!(signer !== my_username)) {
                              continue;
                            }
                            cs.attach_sig(signer, signature);
                            log.info("Re-attaching still-valid signature from " + signer);
                          }
                        }
                        return __iced_k();
                      });
                    } else {
                      return __iced_k();
                    }
                  })(function() {
                    (function(__iced_k) {
                      __iced_deferrals = new iced.Deferrals(__iced_k, {
                        parent: ___iced_passed_deferral,
                        filename: "/Users/chris/git/keybase/node-client/src/command/codesign.iced",
                        funcname: "Command.sign"
                      });
                      _this.do_sign(cs.signable_payload(), esc(__iced_deferrals.defer({
                        assign_fn: (function() {
                          return function() {
                            return sig = arguments[0];
                          };
                        })(),
                        lineno: 203
                      })));
                      __iced_deferrals._fulfill();
                    })(function() {
                      cs.attach_sig(my_username, sig);
                      md = codesign.obj_to_markdown(cs.to_json_obj());
                      (function(__iced_k) {
                        __iced_deferrals = new iced.Deferrals(__iced_k, {
                          parent: ___iced_passed_deferral,
                          filename: "/Users/chris/git/keybase/node-client/src/command/codesign.iced",
                          funcname: "Command.sign"
                        });
                        fs.writeFile(_this.argv.output, md, {
                          encoding: 'utf8'
                        }, esc(__iced_deferrals.defer({
                          lineno: 210
                        })));
                        __iced_deferrals._fulfill();
                      })(function() {
                        log.debug("- Command::sign");
                        return cb();
                      });
                    });
                  });
                });
              });
            });
          });
        };
      })(this));
    };

    Command.prototype.run = function(cb) {
      var esc, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      esc = make_esc(cb, "Command::run");
      log.debug("+ Command::run");
      (function(_this) {
        return (function(__iced_k) {
          switch (_this.argv.codesign_subcommand) {
            case 'sign':
              (function(__iced_k) {
                __iced_deferrals = new iced.Deferrals(__iced_k, {
                  parent: ___iced_passed_deferral,
                  filename: "/Users/chris/git/keybase/node-client/src/command/codesign.iced",
                  funcname: "Command.run"
                });
                _this.sign(esc(__iced_deferrals.defer({
                  lineno: 222
                })));
                __iced_deferrals._fulfill();
              })(__iced_k);
              break;
            case 'verify':
              (function(__iced_k) {
                __iced_deferrals = new iced.Deferrals(__iced_k, {
                  parent: ___iced_passed_deferral,
                  filename: "/Users/chris/git/keybase/node-client/src/command/codesign.iced",
                  funcname: "Command.run"
                });
                _this.verify(esc(__iced_deferrals.defer({
                  lineno: 223
                })));
                __iced_deferrals._fulfill();
              })(__iced_k);
              break;
            case 'tojson':
              (function(__iced_k) {
                __iced_deferrals = new iced.Deferrals(__iced_k, {
                  parent: ___iced_passed_deferral,
                  filename: "/Users/chris/git/keybase/node-client/src/command/codesign.iced",
                  funcname: "Command.run"
                });
                _this.tojson(esc(__iced_deferrals.defer({
                  lineno: 224
                })));
                __iced_deferrals._fulfill();
              })(__iced_k);
              break;
            default:
              return __iced_k();
          }
        });
      })(this)((function(_this) {
        return function() {
          log.debug("- Command::run");
          return cb(null);
        };
      })(this));
    };

    return Command;

  })(Base);

}).call(this);
