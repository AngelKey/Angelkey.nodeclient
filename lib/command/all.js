// Generated by IcedCoffeeScript 1.6.3-g
(function() {
  var ArgumentParser, Base, Main, PackageJson, add_option_dict, iced, log, run, __iced_k, __iced_k_noop;

  iced = require('iced-coffee-script/lib/coffee-script/iced').runtime;
  __iced_k = __iced_k_noop = function() {};

  Base = require('./base').Base;

  log = require('../log');

  ArgumentParser = require('argparse').ArgumentParser;

  add_option_dict = require('./argparse').add_option_dict;

  PackageJson = require('../package').PackageJson;

  Main = (function() {
    function Main() {
      this.commands = {};
      this.pkjson = new PackageJson();
    }

    Main.prototype.init = function(cb) {
      var ok;
      ok = true;
      if (ok) {
        this.ap = new ArgumentParser({
          addHelp: true,
          version: this.pkjson.version(),
          description: 'keybase.io command line client',
          prog: this.pkjson.bin()
        });
        ok = this.add_subcommands();
      }
      return cb(ok);
    };

    Main.prototype.add_subcommands = function() {
      var list, m, mod, n, names, obj, subparsers, _i, _j, _len, _len1;
      add_option_dict(this.ap, Base.OPTS);
      list = ["version"];
      subparsers = this.ap.addSubparsers({
        title: 'subcommands',
        dest: 'subcommand_name'
      });
      this.commands = {};
      for (_i = 0, _len = list.length; _i < _len; _i++) {
        m = list[_i];
        mod = require("./" + m);
        obj = new mod.Command();
        names = obj.add_subcommand_parser(subparsers);
        for (_j = 0, _len1 = names.length; _j < _len1; _j++) {
          n = names[_j];
          this.commands[n] = obj;
        }
      }
      return true;
    };

    Main.prototype.parse_args = function() {
      var argv, cmd;
      argv = this.ap.parseArgs(process.argv.slice(2));
      cmd = this.commands[argv.subcommand_name];
      if (cmd == null) {
        log.error("Subcommand not found: " + argv.subcommand_name);
      } else {
        cmd.set_argv(argv);
      }
      return cmd;
    };

    Main.prototype.run = function() {
      var cmd, ok, ___iced_passed_deferral, __iced_deferrals, __iced_k,
        _this = this;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "src/command/all.iced",
          funcname: "Main.run"
        });
        _this.init(__iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              return ok = arguments[0];
            };
          })(),
          lineno: 71
        }));
        __iced_deferrals._fulfill();
      })(function() {
        if (ok) {
          cmd = _this.parse_args();
        }
        (function(__iced_k) {
          if (cmd != null) {
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "src/command/all.iced",
                funcname: "Main.run"
              });
              cmd.run(__iced_deferrals.defer({
                assign_fn: (function() {
                  return function() {
                    return ok = arguments[0];
                  };
                })(),
                lineno: 73
              }));
              __iced_deferrals._fulfill();
            })(__iced_k);
          } else {
            return __iced_k();
          }
        })(function() {
          return process.exit(ok ? 0 : -2);
        });
      });
    };

    return Main;

  })();

  exports.run = run = function() {
    return (new Main).run();
  };

  run();

}).call(this);
