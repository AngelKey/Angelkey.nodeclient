// Generated by IcedCoffeeScript 1.6.3-g
(function() {
  var ArgumentParser, Base, Config, E, Main, PackageJson, add_option_dict, env, iced, init_env, log, make_esc, run, __iced_k, __iced_k_noop, _ref;

  iced = require('iced-coffee-script/lib/coffee-script/iced').runtime;
  __iced_k = __iced_k_noop = function() {};

  Base = require('./base').Base;

  log = require('../log');

  ArgumentParser = require('argparse').ArgumentParser;

  add_option_dict = require('./argparse').add_option_dict;

  PackageJson = require('../package').PackageJson;

  E = require('../err').E;

  make_esc = require('iced-error').make_esc;

  _ref = require('../env'), env = _ref.env, init_env = _ref.init_env;

  Config = require('../config').Config;

  Main = (function() {
    function Main() {
      this.commands = {};
      this.pkjson = new PackageJson();
    }

    Main.prototype.arg_parse_init = function() {
      var err;
      err = null;
      this.ap = new ArgumentParser({
        addHelp: true,
        version: this.pkjson.version(),
        description: 'keybase.io command line client',
        prog: this.pkjson.bin()
      });
      if (!this.add_subcommands()) {
        err = new E.InitError("cannot initialize subcommands");
      }
      return err;
    };

    Main.prototype.add_subcommands = function() {
      var list, m, mod, n, names, obj, subparsers, _i, _j, _len, _len1;
      add_option_dict(this.ap, Base.OPTS);
      list = ["version", "join", "init"];
      subparsers = this.ap.addSubparsers({
        title: 'subcommands',
        dest: 'subcommand_name'
      });
      this.commands = {};
      for (_i = 0, _len = list.length; _i < _len; _i++) {
        m = list[_i];
        mod = require("./" + m);
        obj = new mod.Command();
        names = obj.add_subcommand_parser(subparsers);
        for (_j = 0, _len1 = names.length; _j < _len1; _j++) {
          n = names[_j];
          this.commands[n] = obj;
        }
      }
      return true;
    };

    Main.prototype.parse_args = function(cb) {
      var err;
      this.cmd = null;
      err = this.arg_parse_init();
      if (err == null) {
        this.argv = this.ap.parseArgs(process.argv.slice(2));
        this.cmd = this.commands[this.argv.subcommand_name];
        if (this.cmd == null) {
          log.error("Subcommand not found: " + argv.subcommand_name);
          err = new E.ArgsError("" + argv.subcommand_name + " not found");
        } else {
          this.cmd.set_argv(this.argv);
        }
      }
      return cb(err);
    };

    Main.prototype.load_config = function(cb) {
      var err, ___iced_passed_deferral, __iced_deferrals, __iced_k,
        _this = this;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      err = null;
      (function(__iced_k) {
        if (_this.cmd.use_config()) {
          _this.config = new Config(env().get_config_filename());
          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "src/command/all.iced",
              funcname: "Main.load_config"
            });
            _this.config.open(__iced_deferrals.defer({
              assign_fn: (function() {
                return function() {
                  return err = arguments[0];
                };
              })(),
              lineno: 84
            }));
            __iced_deferrals._fulfill();
          })(__iced_k);
        } else {
          return __iced_k();
        }
      })(function() {
        return cb(err);
      });
    };

    Main.prototype.main = function() {
      var err, ___iced_passed_deferral, __iced_deferrals, __iced_k,
        _this = this;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "src/command/all.iced",
          funcname: "Main.main"
        });
        _this.run(__iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              return err = arguments[0];
            };
          })(),
          lineno: 90
        }));
        __iced_deferrals._fulfill();
      })(function() {
        return process.exit(typeof err !== "undefined" && err !== null ? -2 : 0);
      });
    };

    Main.prototype.run = function(cb) {
      var esc, ___iced_passed_deferral, __iced_deferrals, __iced_k,
        _this = this;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      esc = make_esc(cb, "run");
      (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "src/command/all.iced",
          funcname: "Main.run"
        });
        _this.setup(esc(__iced_deferrals.defer({
          lineno: 97
        })));
        __iced_deferrals._fulfill();
      })(function() {
        (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "src/command/all.iced",
            funcname: "Main.run"
          });
          _this.cmd.run(esc(__iced_deferrals.defer({
            lineno: 98
          })));
          __iced_deferrals._fulfill();
        })(function() {
          return cb(null);
        });
      });
    };

    Main.prototype.setup = function(cb) {
      var esc, ___iced_passed_deferral, __iced_deferrals, __iced_k,
        _this = this;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      esc = make_esc(cb, "setup");
      init_env();
      (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "src/command/all.iced",
          funcname: "Main.setup"
        });
        _this.parse_args(esc(__iced_deferrals.defer({
          lineno: 106
        })));
        __iced_deferrals._fulfill();
      })(function() {
        env().set_argv(_this.argv);
        (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "src/command/all.iced",
            funcname: "Main.setup"
          });
          _this.load_config(esc(__iced_deferrals.defer({
            lineno: 108
          })));
          __iced_deferrals._fulfill();
        })(function() {
          env().set_config(_this.config);
          return cb(null);
        });
      });
    };

    return Main;

  })();

  exports.run = run = function() {
    return (new Main).main();
  };

}).call(this);
