// Generated by IcedCoffeeScript 1.6.3-g
(function() {
  var ArgumentParser, Base, BufferOutStream, Command, E, PackageJson, Prompter, add_option_dict, checkers, gpg, iced, log, make_esc, __iced_k, __iced_k_noop, _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  iced = require('iced-coffee-script/lib/coffee-script/iced').runtime;
  __iced_k = __iced_k_noop = function() {};

  Base = require('./base').Base;

  log = require('../log');

  ArgumentParser = require('argparse').ArgumentParser;

  add_option_dict = require('./argparse').add_option_dict;

  PackageJson = require('../package').PackageJson;

  gpg = require('../gpg').gpg;

  BufferOutStream = require('../stream').BufferOutStream;

  E = require('../err').E;

  Prompter = require('../prompter').Prompter;

  checkers = require('../checkers').checkers;

  make_esc = require('iced-error').make_esc;

  exports.Command = Command = (function(_super) {
    __extends(Command, _super);

    function Command() {
      _ref = Command.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    Command.prototype.add_subcommand_parser = function(scp) {
      var name, opts, sub;
      opts = {
        aliases: ["signup"]
      };
      name = "join";
      sub = scp.addParser(name, opts);
      return opts.aliases.concat([name]);
    };

    Command.prototype.prompt = function(cb) {
      var err, p, seq, ___iced_passed_deferral, __iced_deferrals, __iced_k,
        _this = this;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      seq = {
        username: {
          prompt: "Your desired username",
          checker: checkers.username
        },
        password: {
          prompt: "Your passphrase",
          password: true,
          checker: checkers.password,
          confirm: {
            prompt: "confirm passphrase"
          }
        },
        email: {
          prompt: "Your email",
          checker: checkers.email
        }
      };
      p = new Prompter(seq);
      (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "src/command/join.iced",
          funcname: "Command.prompt"
        });
        p.run(__iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              return err = arguments[0];
            };
          })(),
          lineno: 43
        }));
        __iced_deferrals._fulfill();
      })(function() {
        if (typeof err === "undefined" || err === null) {
          _this.data = p.data();
        }
        return cb(err);
      });
    };

    Command.prototype.run = function(cb) {
      var esc, ___iced_passed_deferral, __iced_deferrals, __iced_k,
        _this = this;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      esc = make_esc(cb, "Join::run");
      (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "src/command/join.iced",
          funcname: "Command.run"
        });
        _this.prompt(esc(__iced_deferrals.defer({
          lineno: 51
        })));
        __iced_deferrals._fulfill();
      })(function() {
        console.log(_this.data);
        return cb(null);
      });
    };

    return Command;

  })(Base);

}).call(this);
