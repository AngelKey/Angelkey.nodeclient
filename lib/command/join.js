// Generated by IcedCoffeeScript 1.6.3-g
(function() {
  var ArgumentParser, Base, BufferOutStream, Command, E, PackageJson, Prompter, SC, add_option_dict, checkers, constants, env, gpg, iced, log, make_esc, prompt_yn, read, req, rng, triplesec, __iced_k, __iced_k_noop, _ref, _ref1,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  iced = require('iced-coffee-script/lib/coffee-script/iced').runtime;
  __iced_k = __iced_k_noop = function() {};

  Base = require('./base').Base;

  log = require('../log');

  ArgumentParser = require('argparse').ArgumentParser;

  add_option_dict = require('./argparse').add_option_dict;

  PackageJson = require('../package').PackageJson;

  gpg = require('../gpg').gpg;

  BufferOutStream = require('../stream').BufferOutStream;

  E = require('../err').E;

  _ref = require('../prompter'), prompt_yn = _ref.prompt_yn, Prompter = _ref.Prompter;

  checkers = require('../checkers').checkers;

  make_esc = require('iced-error').make_esc;

  triplesec = require('triplesec');

  rng = require('crypto').rng;

  constants = require('../constants').constants;

  SC = constants.security;

  req = require('../req');

  env = require('../env').env;

  read = require('read');

  exports.Command = Command = (function(_super) {
    __extends(Command, _super);

    function Command() {
      _ref1 = Command.__super__.constructor.apply(this, arguments);
      return _ref1;
    }

    Command.prototype.OPTS = {
      e: {
        aliases: ['email'],
        help: 'the email address to signup'
      },
      u: {
        aliase: ['username'],
        help: 'the username to signup as'
      }
    };

    Command.prototype.use_session = function() {
      return true;
    };

    Command.prototype.add_subcommand_parser = function(scp) {
      var name, opts, sub;
      opts = {
        aliases: ["signup"]
      };
      name = "join";
      sub = scp.addParser(name, opts);
      return opts.aliases.concat([name]);
    };

    Command.prototype.prompt = function(cb) {
      var e, err, p, seq, u, ___iced_passed_deferral, __iced_deferrals, __iced_k,
        _this = this;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      seq = {
        username: {
          prompt: "Your desired username",
          checker: checkers.username
        },
        passphrase: {
          prompt: "Your passphrase",
          passphrase: true,
          checker: checkers.passphrase,
          confirm: {
            prompt: "confirm passphrase"
          }
        },
        email: {
          prompt: "Your email",
          checker: checkers.email
        },
        invite: {
          prompt: "Invitation code",
          checker: checkers.invite_code,
          defval: "123412341234123412341234"
        }
      };
      if (!this.prompter) {
        if ((u = env().get_username()) != null) {
          seq.username.defval = u;
        }
        if ((p = env().get_passphrase()) != null) {
          seq.passphrase.defval = p;
        }
        if ((e = env().get_email()) != null) {
          seq.email.defval = e;
        }
        this.prompter = new Prompter(seq);
      }
      (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "src/command/join.iced",
          funcname: "Command.prompt"
        });
        _this.prompter.run(__iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              return err = arguments[0];
            };
          })(),
          lineno: 73
        }));
        __iced_deferrals._fulfill();
      })(function() {
        if (typeof err === "undefined" || err === null) {
          _this.data = _this.prompter.data();
        }
        return cb(err);
      });
    };

    Command.prototype.gen_pwh = function(cb) {
      var err, passphrase, ___iced_passed_deferral, __iced_deferrals, __iced_k,
        _this = this;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      passphrase = this.data.passphrase;
      (function(__iced_k) {
        if (!_this.pp_last || (_this.pp_last !== passphrase)) {
          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "src/command/join.iced",
              funcname: "Command.gen_pwh"
            });
            _this._gen_pwh({
              passphrase: passphrase
            }, __iced_deferrals.defer({
              assign_fn: (function() {
                return function() {
                  return err = arguments[0];
                };
              })(),
              lineno: 82
            }));
            __iced_deferrals._fulfill();
          })(function() {
            return __iced_k(typeof err === "undefined" || err === null ? _this.pp_last = passphrase : void 0);
          });
        } else {
          return __iced_k();
        }
      })(function() {
        return cb(err);
      });
    };

    Command.prototype.post = function(cb) {
      var args, body, err, retry, ___iced_passed_deferral, __iced_deferrals, __iced_k,
        _this = this;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      args = {
        salt: this.salt,
        pwh: this.pwh,
        username: this.data.username,
        email: this.data.email,
        invitation_id: this.data.invite
      };
      (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "src/command/join.iced",
          funcname: "Command.post"
        });
        req.post({
          endpoint: "signup",
          args: args
        }, __iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              err = arguments[0];
              return body = arguments[1];
            };
          })(),
          lineno: 96
        }));
        __iced_deferrals._fulfill();
      })(function() {
        retry = false;
        if ((typeof err !== "undefined" && err !== null) && (err instanceof E.KeybaseError)) {
          switch (body.status.name) {
            case 'BAD_SIGNUP_EMAIL_TAKEN':
              log.error("Email address '" + _this.data.email + "' already registered");
              retry = true;
              _this.prompter.clear('email');
              err = null;
              break;
            case 'BAD_SIGNUP_USERNAME_TAKEN':
              log.error("Username '" + _this.data.username + "' already registered");
              retry = true;
              _this.prompter.clear('username');
              err = null;
          }
        }
        if (err == null) {
          _this.uid = body.uid;
          _this.session = body.session;
        } else if (!retry) {
          log.error("Unexpected error: " + err);
        }
        return cb(err, retry);
      });
    };

    Command.prototype.write_out = function(cb) {
      var esc, ___iced_passed_deferral, __iced_deferrals, __iced_k,
        _this = this;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      esc = make_esc(cb, "Join::write_out");
      (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "src/command/join.iced",
          funcname: "Command.write_out"
        });
        _this.write_config(esc(__iced_deferrals.defer({
          lineno: 122
        })));
        __iced_deferrals._fulfill();
      })(function() {
        (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "src/command/join.iced",
            funcname: "Command.write_out"
          });
          _this._write_session(esc(__iced_deferrals.defer({
            lineno: 123
          })));
          __iced_deferrals._fulfill();
        })(function() {
          return cb(null);
        });
      });
    };

    Command.prototype.write_config = function(cb) {
      var c, err, ___iced_passed_deferral, __iced_deferrals, __iced_k,
        _this = this;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      c = env().config;
      c.set("user.email", this.data.email);
      c.set("user.salt", this.salt);
      c.set("user.name", this.data.username);
      c.set("user.id", this.uid);
      (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "src/command/join.iced",
          funcname: "Command.write_config"
        });
        c.write(__iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              return err = arguments[0];
            };
          })(),
          lineno: 134
        }));
        __iced_deferrals._fulfill();
      })(function() {
        return cb(err);
      });
    };

    Command.prototype.check_registered = function(cb) {
      var err, opts, rereg, ___iced_passed_deferral, __iced_deferrals, __iced_k,
        _this = this;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      err = null;
      (function(__iced_k) {
        if ((env().config.get("user.id")) != null) {
          opts = {
            prompt: "Already registered; do you want to reregister?",
            defval: false
          };
          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "src/command/join.iced",
              funcname: "Command.check_registered"
            });
            prompt_yn(opts, __iced_deferrals.defer({
              assign_fn: (function() {
                return function() {
                  err = arguments[0];
                  return rereg = arguments[1];
                };
              })(),
              lineno: 145
            }));
            __iced_deferrals._fulfill();
          })(function() {
            return __iced_k((err == null) && !rereg ? err = new E.CancelError("registration canceled") : void 0);
          });
        } else {
          return __iced_k();
        }
      })(function() {
        return cb(err);
      });
    };

    Command.prototype.run = function(cb) {
      var esc, retry, ___iced_passed_deferral, __iced_deferrals, __iced_k,
        _this = this;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      esc = make_esc(cb, "Join::run");
      retry = true;
      (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "src/command/join.iced",
          funcname: "Command.run"
        });
        _this.check_registered(esc(__iced_deferrals.defer({
          lineno: 155
        })));
        __iced_deferrals._fulfill();
      })(function() {
        (function(__iced_k) {
          var _results, _while;
          _results = [];
          _while = function(__iced_k) {
            var _break, _continue, _next;
            _break = function() {
              return __iced_k(_results);
            };
            _continue = function() {
              return iced.trampoline(function() {
                return _while(__iced_k);
              });
            };
            _next = function(__iced_next_arg) {
              _results.push(__iced_next_arg);
              return _continue();
            };
            if (!retry) {
              return _break();
            } else {
              (function(__iced_k) {
                __iced_deferrals = new iced.Deferrals(__iced_k, {
                  parent: ___iced_passed_deferral,
                  filename: "src/command/join.iced",
                  funcname: "Command.run"
                });
                _this.prompt(esc(__iced_deferrals.defer({
                  lineno: 157
                })));
                __iced_deferrals._fulfill();
              })(function() {
                (function(__iced_k) {
                  __iced_deferrals = new iced.Deferrals(__iced_k, {
                    parent: ___iced_passed_deferral,
                    filename: "src/command/join.iced",
                    funcname: "Command.run"
                  });
                  _this.gen_pwh(esc(__iced_deferrals.defer({
                    lineno: 158
                  })));
                  __iced_deferrals._fulfill();
                })(function() {
                  (function(__iced_k) {
                    __iced_deferrals = new iced.Deferrals(__iced_k, {
                      parent: ___iced_passed_deferral,
                      filename: "src/command/join.iced",
                      funcname: "Command.run"
                    });
                    _this.post(esc(__iced_deferrals.defer({
                      assign_fn: (function() {
                        return function() {
                          return retry = arguments[0];
                        };
                      })(),
                      lineno: 159
                    })));
                    __iced_deferrals._fulfill();
                  })(_next);
                });
              });
            }
          };
          _while(__iced_k);
        })(function() {
          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "src/command/join.iced",
              funcname: "Command.run"
            });
            _this.write_out(esc(__iced_deferrals.defer({
              lineno: 160
            })));
            __iced_deferrals._fulfill();
          })(function() {
            log.info("Success! You are now signed up.");
            return cb(null);
          });
        });
      });
    };

    return Command;

  })(Base);

}).call(this);
