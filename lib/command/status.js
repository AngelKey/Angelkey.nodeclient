// Generated by IcedCoffeeScript 1.6.3-j
(function() {
  var ArgumentParser, Base, Command, PackageJson, User, add_option_dict, env, format_fingerprint, iced, log, make_esc, session, __iced_k, __iced_k_noop,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  iced = require('iced-coffee-script/lib/coffee-script/iced').runtime;
  __iced_k = __iced_k_noop = function() {};

  Base = require('./base').Base;

  log = require('../log');

  ArgumentParser = require('argparse').ArgumentParser;

  add_option_dict = require('./argparse').add_option_dict;

  PackageJson = require('../package').PackageJson;

  session = require('../session').session;

  make_esc = require('iced-error').make_esc;

  env = require('../env').env;

  log = require('../log');

  User = require('../user').User;

  format_fingerprint = require('pgp-utils').util.format_fingerprint;

  exports.Command = Command = (function(_super) {
    __extends(Command, _super);

    function Command() {
      return Command.__super__.constructor.apply(this, arguments);
    }

    Command.prototype.use_session = function() {
      return true;
    };

    Command.prototype.add_subcommand_parser = function(scp) {
      var name, opts, sub;
      opts = {
        help: "print current status"
      };
      name = "status";
      sub = scp.addParser(name, opts);
      return [name];
    };

    Command.prototype.run = function(cb) {
      var esc, logged_in, me, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      esc = make_esc(cb, "Command::run");
      log.console.log("configged as " + (env().get_username()));
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/max/src/keybase-node-client/src/command/status.iced",
            funcname: "Command.run"
          });
          session.check(esc(__iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                return logged_in = arguments[0];
              };
            })(),
            lineno: 34
          })));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          log.console.log("  * " + (logged_in ? '' : 'NOT ') + "logged in");
          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "/Users/max/src/keybase-node-client/src/command/status.iced",
              funcname: "Command.run"
            });
            User.load_me(esc(__iced_deferrals.defer({
              assign_fn: (function() {
                return function() {
                  return me = arguments[0];
                };
              })(),
              lineno: 36
            })));
            __iced_deferrals._fulfill();
          })(function() {
            if (typeof me !== "undefined" && me !== null) {
              log.console.log("  * Key ID: " + (me.key_id_64().toUpperCase()));
              log.console.log("  * Fingerprint: " + (format_fingerprint(me.fingerprint(true))));
            }
            return cb(null);
          });
        };
      })(this));
    };

    return Command;

  })(Base);

}).call(this);
