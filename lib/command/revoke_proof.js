// Generated by IcedCoffeeScript 1.7.1-b
(function() {
  var ArgumentParser, Command, E, PackageJson, ProofBase, RevokeProofSigGen, S, ST, User, add_option_dict, assert, constants, iced, log, make_esc, prompt_yn, proofs, req, session, __iced_k, __iced_k_noop,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  iced = require('iced-coffee-script').iced;
  __iced_k = __iced_k_noop = function() {};

  ProofBase = require('./proof_base').ProofBase;

  log = require('../log');

  ArgumentParser = require('argparse').ArgumentParser;

  add_option_dict = require('./argparse').add_option_dict;

  PackageJson = require('../package').PackageJson;

  E = require('../err').E;

  make_esc = require('iced-error').make_esc;

  prompt_yn = require('../prompter').prompt_yn;

  RevokeProofSigGen = require('../sigs').RevokeProofSigGen;

  User = require('../user').User;

  req = require('../req').req;

  assert = require('assert');

  session = require('../session');

  S = require('../services');

  constants = require('../constants').constants;

  ST = constants.signature_types;

  prompt_yn = require('../prompter').prompt_yn;

  proofs = require('keybase-proofs');

  assert = require('assert');

  exports.Command = Command = (function(_super) {
    __extends(Command, _super);

    function Command() {
      return Command.__super__.constructor.apply(this, arguments);
    }

    Command.prototype.command_name_and_opts = function() {
      var config, name;
      config = {
        aliases: [],
        help: "revoke a proof of identity"
      };
      name = "revoke-proof";
      return {
        name: name,
        config: config,
        OPTS: ProofBase.OPTS
      };
    };

    Command.prototype.allocate_proof_gen = function(cb) {
      var err, klass, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      klass = RevokeProofSigGen;
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/max/src/keybase/node-client/src/command/revoke_proof.iced",
            funcname: "Command.allocate_proof_gen"
          });
          _this.me.gen_remote_proof_gen({
            klass: klass,
            sig_id: _this.sig_id
          }, __iced_deferrals.defer({
            assign_fn: (function(__slot_1) {
              return function() {
                err = arguments[0];
                return __slot_1.gen = arguments[1];
              };
            })(_this),
            lineno: 37
          }));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          return cb(err);
        };
      })(this));
    };

    Command.prototype.get_the_go_ahead = function(cb) {
      var d, do_msg, e, err, n, names, ok, rp, to_prompt, v, ___iced_passed_deferral, __iced_deferrals, __iced_k, _i, _j, _len, _len1;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      rp = this.me.list_remote_proofs({
        with_sig_ids: true
      });
      err = null;
      if ((rp == null) || ((v = rp[this.service_name]) == null)) {
        err = E.NotFoundError("No proof found for service '" + this.service_name + "'");
      } else if (Array.isArray(v)) {
        d = {};
        names = [];
        do_msg = false;
        for (_i = 0, _len = v.length; _i < _len; _i++) {
          e = v[_i];
          names.push(e.name);
          d[e.name] = e;
        }
        if (names.length === 0) {
          err = new E.ArgsError("You don't have any " + this.argv.service + " proofs to revoke!");
        } else if ((this.remote_name != null) && !d[this.remote_name]) {
          do_msg = true;
          err = new E.ArgsError("You don't have a proof for '" + this.remote_name + "' to revoke");
        } else if (this.remote_name) {
          this.sig_id = d[this.remote_name].sig_id;
        } else if (!this.remote_name && names.length > 1) {
          do_msg = true;
          err = new E.ArgsError("need specifics");
        } else {
          to_prompt = {
            prompt: "Revoke your proof of " + v[0].name,
            sig_id: v[0].sig_id
          };
        }
        if (do_msg) {
          log.console.log("Please specify which proof to revoke; try one of:");
          log.console.log("");
          for (_j = 0, _len1 = names.length; _j < _len1; _j++) {
            n = names[_j];
            log.console.log("  keybase revoke-proof web " + n);
          }
          log.console.log("");
        }
      } else {
        if ((this.remote_name != null) && (this.remote_name !== v.name)) {
          err = E.ArgsError("Wrong name provided: you have a proof for '" + v.name + "' and not '" + this.remote_name + "' @" + this.service_name);
        } else if (this.remote_name != null) {
          this.sig_id = v.sig_id;
        } else {
          to_prompt = {
            prompt: "Revoke your proof of " + v.name + " at " + this.service_name + "?",
            sig_id: v.sig_id
          };
        }
      }
      (function(_this) {
        return (function(__iced_k) {
          if ((err == null) && (to_prompt != null)) {
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "/Users/max/src/keybase/node-client/src/command/revoke_proof.iced",
                funcname: "Command.get_the_go_ahead"
              });
              prompt_yn({
                prompt: to_prompt.prompt,
                defval: false
              }, __iced_deferrals.defer({
                assign_fn: (function() {
                  return function() {
                    err = arguments[0];
                    return ok = arguments[1];
                  };
                })(),
                lineno: 84
              }));
              __iced_deferrals._fulfill();
            })(function() {
              return __iced_k(err != null ? void 0 : !ok ? err = new E.CancelError("Cancellation canceled! Did nothing.") : _this.sig_id = to_prompt.sig_id);
            });
          } else {
            return __iced_k();
          }
        });
      })(this)((function(_this) {
        return function() {
          return cb(err);
        };
      })(this));
    };

    Command.prototype.run = function(cb) {
      var esc, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      esc = make_esc(cb, "Command::run");
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/max/src/keybase/node-client/src/command/revoke_proof.iced",
            funcname: "Command.run"
          });
          _this.parse_args(esc(__iced_deferrals.defer({
            lineno: 96
          })));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "/Users/max/src/keybase/node-client/src/command/revoke_proof.iced",
              funcname: "Command.run"
            });
            session.login(esc(__iced_deferrals.defer({
              lineno: 97
            })));
            __iced_deferrals._fulfill();
          })(function() {
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "/Users/max/src/keybase/node-client/src/command/revoke_proof.iced",
                funcname: "Command.run"
              });
              User.load_me({
                secret: true
              }, esc(__iced_deferrals.defer({
                assign_fn: (function(__slot_1) {
                  return function() {
                    return __slot_1.me = arguments[0];
                  };
                })(_this),
                lineno: 98
              })));
              __iced_deferrals._fulfill();
            })(function() {
              (function(__iced_k) {
                __iced_deferrals = new iced.Deferrals(__iced_k, {
                  parent: ___iced_passed_deferral,
                  filename: "/Users/max/src/keybase/node-client/src/command/revoke_proof.iced",
                  funcname: "Command.run"
                });
                _this.get_the_go_ahead(esc(__iced_deferrals.defer({
                  lineno: 99
                })));
                __iced_deferrals._fulfill();
              })(function() {
                (function(__iced_k) {
                  __iced_deferrals = new iced.Deferrals(__iced_k, {
                    parent: ___iced_passed_deferral,
                    filename: "/Users/max/src/keybase/node-client/src/command/revoke_proof.iced",
                    funcname: "Command.run"
                  });
                  _this.allocate_proof_gen(esc(__iced_deferrals.defer({
                    lineno: 100
                  })));
                  __iced_deferrals._fulfill();
                })(function() {
                  (function(__iced_k) {
                    __iced_deferrals = new iced.Deferrals(__iced_k, {
                      parent: ___iced_passed_deferral,
                      filename: "/Users/max/src/keybase/node-client/src/command/revoke_proof.iced",
                      funcname: "Command.run"
                    });
                    _this.gen.run(esc(__iced_deferrals.defer({
                      lineno: 101
                    })));
                    __iced_deferrals._fulfill();
                  })(function() {
                    log.info("Success!");
                    return cb(null);
                  });
                });
              });
            });
          });
        };
      })(this));
    };

    return Command;

  })(ProofBase);

}).call(this);
