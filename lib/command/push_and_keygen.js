// Generated by IcedCoffeeScript 1.7.0-a
(function() {
  var Base, Command, E, KeyManager, KeybasePushProofGen, User, athrow, env, iced, log, make_esc, prompt_passphrase, req, session, __iced_k, __iced_k_noop,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  iced = require('iced-coffee-script').iced;
  __iced_k = __iced_k_noop = function() {};

  Base = require('./base').Base;

  log = require('../log');

  session = require('../session');

  make_esc = require('iced-error').make_esc;

  log = require('../log');

  KeybasePushProofGen = require('../sigs').KeybasePushProofGen;

  req = require('../req');

  env = require('../env').env;

  prompt_passphrase = require('../prompter').prompt_passphrase;

  KeyManager = require('../keymanager').KeyManager;

  E = require('../err').E;

  athrow = require('iced-utils').util.athrow;

  env = require('../env').env;

  User = require('../user').User;

  exports.Command = Command = (function(_super) {
    __extends(Command, _super);

    function Command() {
      return Command.__super__.constructor.apply(this, arguments);
    }

    Command.OPTS = {
      s: {
        alias: "secret",
        action: "storeTrue",
        help: "push the secret key to the server"
      }
    };

    Command.prototype.use_session = function() {
      return true;
    };

    Command.prototype.sign = function(cb) {
      var eng, err, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      eng = new KeybasePushProofGen({
        km: this.key
      });
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/max/src/keybase-node-client/src/command/push_and_keygen.iced",
            funcname: "Command.sign"
          });
          eng.run(__iced_deferrals.defer({
            assign_fn: (function(__slot_1) {
              return function() {
                err = arguments[0];
                return __slot_1.sig = arguments[1];
              };
            })(_this),
            lineno: 35
          }));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          return cb(err);
        };
      })(this));
    };

    Command.prototype.push = function(cb) {
      var args, err, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      args = {
        is_primary: 1,
        sig: this.sig.pgp,
        sig_id_base: this.sig.id,
        sig_id_short: this.sig.short_id,
        public_key: this.key.key_data().toString('utf8')
      };
      if (this.p3skb) {
        args.private_key = this.p3skb;
      }
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/max/src/keybase-node-client/src/command/push_and_keygen.iced",
            funcname: "Command.push"
          });
          req.post({
            endpoint: "key/add",
            args: args
          }, __iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                return err = arguments[0];
              };
            })(),
            lineno: 48
          }));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          return cb(err);
        };
      })(this));
    };

    Command.prototype.load_key_manager = function(cb) {
      var esc, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      esc = make_esc(cb, "KeyManager::load_secret");
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/max/src/keybase-node-client/src/command/push_and_keygen.iced",
            funcname: "Command.load_key_manager"
          });
          KeyManager.load({
            fingerprint: _this.key.fingerprint()
          }, esc(__iced_deferrals.defer({
            assign_fn: (function(__slot_1) {
              return function() {
                return __slot_1.keymanager = arguments[0];
              };
            })(_this),
            lineno: 55
          })));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          return cb(null);
        };
      })(this));
    };

    Command.prototype.package_secret_key = function(cb) {
      var err, p3skb, prompter, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      log.debug("+ package secret key");
      prompter = this.prompt_passphrase.bind(this);
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/max/src/keybase-node-client/src/command/push_and_keygen.iced",
            funcname: "Command.package_secret_key"
          });
          _this.keymanager.export_to_p3skb({
            prompter: prompter
          }, __iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                err = arguments[0];
                return p3skb = arguments[1];
              };
            })(),
            lineno: 63
          }));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          if (typeof err === "undefined" || err === null) {
            _this.p3skb = p3skb;
          }
          log.debug("- package secret key -> " + (typeof err !== "undefined" && err !== null ? err.message : void 0));
          return cb(err);
        };
      })(this));
    };

    Command.prototype.do_secret_key = function(cb) {
      var esc, go, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      esc = make_esc(cb, "KeyManager::do_secret_key");
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/max/src/keybase-node-client/src/command/push_and_keygen.iced",
            funcname: "Command.do_secret_key"
          });
          _this.should_push_secret(esc(__iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                return go = arguments[0];
              };
            })(),
            lineno: 72
          })));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          (function(__iced_k) {
            if (go) {
              (function(__iced_k) {
                if (_this.keymanager == null) {
                  (function(__iced_k) {
                    __iced_deferrals = new iced.Deferrals(__iced_k, {
                      parent: ___iced_passed_deferral,
                      filename: "/Users/max/src/keybase-node-client/src/command/push_and_keygen.iced",
                      funcname: "Command.do_secret_key"
                    });
                    _this.load_key_manager(esc(__iced_deferrals.defer({
                      lineno: 74
                    })));
                    __iced_deferrals._fulfill();
                  })(__iced_k);
                } else {
                  return __iced_k();
                }
              })(function() {
                (function(__iced_k) {
                  __iced_deferrals = new iced.Deferrals(__iced_k, {
                    parent: ___iced_passed_deferral,
                    filename: "/Users/max/src/keybase-node-client/src/command/push_and_keygen.iced",
                    funcname: "Command.do_secret_key"
                  });
                  _this.package_secret_key(esc(__iced_deferrals.defer({
                    lineno: 75
                  })));
                  __iced_deferrals._fulfill();
                })(__iced_k);
              });
            } else {
              return __iced_k();
            }
          })(function() {
            return cb(null);
          });
        };
      })(this));
    };

    Command.prototype.prompt_passphrase = function(cb) {
      var args, err, pp, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      args = {
        prompt: "Your key passphrase"
      };
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/max/src/keybase-node-client/src/command/push_and_keygen.iced",
            funcname: "Command.prompt_passphrase"
          });
          prompt_passphrase(args, __iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                err = arguments[0];
                return pp = arguments[1];
              };
            })(),
            lineno: 83
          }));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          return cb(err, pp);
        };
      })(this));
    };

    Command.prototype.prompt_new_passphrase = function(cb) {
      var args, err, pp, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      args = {
        prompt: "Your key passphrase (can be the same as your login passphrase)",
        confirm: {
          prompt: "Repeat to confirm"
        }
      };
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/max/src/keybase-node-client/src/command/push_and_keygen.iced",
            funcname: "Command.prompt_new_passphrase"
          });
          prompt_passphrase(args, __iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                err = arguments[0];
                return pp = arguments[1];
              };
            })(),
            lineno: 92
          }));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          return cb(err, pp);
        };
      })(this));
    };

    Command.prototype.do_key_gen = function(cb) {
      var esc, passphrase, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      esc = make_esc(cb, "do_key_gen");
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/max/src/keybase-node-client/src/command/push_and_keygen.iced",
            funcname: "Command.do_key_gen"
          });
          _this.prompt_new_passphrase(esc(__iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                return passphrase = arguments[0];
              };
            })(),
            lineno: 99
          })));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          log.debug("+ generating public/private keypair");
          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "/Users/max/src/keybase-node-client/src/command/push_and_keygen.iced",
              funcname: "Command.do_key_gen"
            });
            KeyManager.generate({
              passphrase: passphrase
            }, esc(__iced_deferrals.defer({
              assign_fn: (function(__slot_1) {
                return function() {
                  return __slot_1.keymanager = arguments[0];
                };
              })(_this),
              lineno: 101
            })));
            __iced_deferrals._fulfill();
          })(function() {
            log.debug("- generated");
            log.debug("+ loading public key");
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "/Users/max/src/keybase-node-client/src/command/push_and_keygen.iced",
                funcname: "Command.do_key_gen"
              });
              _this.keymanager.load_public(esc(__iced_deferrals.defer({
                assign_fn: (function(__slot_1) {
                  return function() {
                    return __slot_1.key = arguments[0];
                  };
                })(_this),
                lineno: 104
              })));
              __iced_deferrals._fulfill();
            })(function() {
              log.debug("- loaded public key");
              return cb(null);
            });
          });
        };
      })(this));
    };

    Command.prototype.check_args = function(cb) {
      return cb(null);
    };

    Command.prototype.should_push_secret = function(cb) {
      return cb(null, this.argv.secret);
    };

    Command.prototype.should_push = function(cb) {
      return cb(null, true);
    };

    Command.prototype.check_no_key = function(cb) {
      var err, esc, exists, me, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      esc = make_esc(cb, "check_no_key");
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/max/src/keybase-node-client/src/command/push_and_keygen.iced",
            funcname: "Command.check_no_key"
          });
          User.load({
            username: env().get_username()
          }, esc(__iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                return me = arguments[0];
              };
            })(),
            lineno: 118
          })));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "/Users/max/src/keybase-node-client/src/command/push_and_keygen.iced",
              funcname: "Command.check_no_key"
            });
            me.has_public_key(__iced_deferrals.defer({
              assign_fn: (function() {
                return function() {
                  err = arguments[0];
                  return exists = arguments[1];
                };
              })(),
              lineno: 119
            }));
            __iced_deferrals._fulfill();
          })(function() {
            err = exists ? new E.KeyExistsError("You already have a key registered; you must revoke first") : null;
            return cb(err);
          });
        };
      })(this));
    };

    Command.prototype.run = function(cb) {
      var esc, go, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      esc = make_esc(cb, "run");
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/max/src/keybase-node-client/src/command/push_and_keygen.iced",
            funcname: "Command.run"
          });
          _this.check_no_key(esc(__iced_deferrals.defer({
            lineno: 128
          })));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "/Users/max/src/keybase-node-client/src/command/push_and_keygen.iced",
              funcname: "Command.run"
            });
            _this.check_args(esc(__iced_deferrals.defer({
              lineno: 129
            })));
            __iced_deferrals._fulfill();
          })(function() {
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "/Users/max/src/keybase-node-client/src/command/push_and_keygen.iced",
                funcname: "Command.run"
              });
              _this.prepare_key(esc(__iced_deferrals.defer({
                lineno: 130
              })));
              __iced_deferrals._fulfill();
            })(function() {
              (function(__iced_k) {
                __iced_deferrals = new iced.Deferrals(__iced_k, {
                  parent: ___iced_passed_deferral,
                  filename: "/Users/max/src/keybase-node-client/src/command/push_and_keygen.iced",
                  funcname: "Command.run"
                });
                _this.should_push(esc(__iced_deferrals.defer({
                  assign_fn: (function() {
                    return function() {
                      return go = arguments[0];
                    };
                  })(),
                  lineno: 131
                })));
                __iced_deferrals._fulfill();
              })(function() {
                (function(__iced_k) {
                  if (go) {
                    (function(__iced_k) {
                      __iced_deferrals = new iced.Deferrals(__iced_k, {
                        parent: ___iced_passed_deferral,
                        filename: "/Users/max/src/keybase-node-client/src/command/push_and_keygen.iced",
                        funcname: "Command.run"
                      });
                      session.login(esc(__iced_deferrals.defer({
                        lineno: 133
                      })));
                      __iced_deferrals._fulfill();
                    })(function() {
                      (function(__iced_k) {
                        __iced_deferrals = new iced.Deferrals(__iced_k, {
                          parent: ___iced_passed_deferral,
                          filename: "/Users/max/src/keybase-node-client/src/command/push_and_keygen.iced",
                          funcname: "Command.run"
                        });
                        _this.sign(esc(__iced_deferrals.defer({
                          lineno: 134
                        })));
                        __iced_deferrals._fulfill();
                      })(function() {
                        (function(__iced_k) {
                          __iced_deferrals = new iced.Deferrals(__iced_k, {
                            parent: ___iced_passed_deferral,
                            filename: "/Users/max/src/keybase-node-client/src/command/push_and_keygen.iced",
                            funcname: "Command.run"
                          });
                          _this.do_secret_key(esc(__iced_deferrals.defer({
                            lineno: 135
                          })));
                          __iced_deferrals._fulfill();
                        })(function() {
                          (function(__iced_k) {
                            __iced_deferrals = new iced.Deferrals(__iced_k, {
                              parent: ___iced_passed_deferral,
                              filename: "/Users/max/src/keybase-node-client/src/command/push_and_keygen.iced",
                              funcname: "Command.run"
                            });
                            _this.push(esc(__iced_deferrals.defer({
                              lineno: 136
                            })));
                            __iced_deferrals._fulfill();
                          })(__iced_k);
                        });
                      });
                    });
                  } else {
                    return __iced_k();
                  }
                })(function() {
                  log.info("success!");
                  return cb(null);
                });
              });
            });
          });
        };
      })(this));
    };

    return Command;

  })(Base);

}).call(this);
