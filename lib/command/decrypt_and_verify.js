// Generated by IcedCoffeeScript 1.6.3-j
(function() {
  var Base, BufferInStream, BufferOutStream, Command, E, TmpPrimaryKeyRing, TrackSubSubCommand, TrackWrapper, User, add_option_dict, athrow, chain, colors, constants, dict_union, env, iced, log, make_esc, parse_signature, __iced_k, __iced_k_noop, _ref, _ref1,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  iced = require('iced-coffee-script/lib/coffee-script/iced').runtime;
  __iced_k = __iced_k_noop = function() {};

  Base = require('./base').Base;

  log = require('../log');

  add_option_dict = require('./argparse').add_option_dict;

  E = require('../err').E;

  TrackSubSubCommand = require('../tracksubsub').TrackSubSubCommand;

  _ref = require('gpg-wrapper'), BufferOutStream = _ref.BufferOutStream, BufferInStream = _ref.BufferInStream;

  _ref1 = require('iced-error'), chain = _ref1.chain, make_esc = _ref1.make_esc;

  env = require('../env').env;

  TmpPrimaryKeyRing = require('../keyring').TmpPrimaryKeyRing;

  TrackSubSubCommand = require('../tracksubsub').TrackSubSubCommand;

  TrackWrapper = require('../trackwrapper').TrackWrapper;

  athrow = require('pgp-utils').util.athrow;

  parse_signature = require('../gpg').parse_signature;

  colors = require('colors');

  constants = require('../constants').constants;

  User = require('../user').User;

  dict_union = require('../util').dict_union;

  exports.Command = Command = (function(_super) {
    __extends(Command, _super);

    function Command() {
      return Command.__super__.constructor.apply(this, arguments);
    }

    Command.OPTS = dict_union(TrackSubSubCommand.OPTS, {
      s: {
        alias: 'signed',
        action: 'storeTrue',
        help: "assert signed"
      },
      S: {
        alias: 'signed-by',
        help: "assert signed by the given user"
      },
      t: {
        alias: "track",
        action: "storeTrue",
        help: "prompt for tracking if necessary"
      },
      '6': {
        alias: "base64",
        action: "storeTrue",
        help: "output result as base64-encoded data"
      },
      m: {
        alias: "message",
        help: "provide the message on the command line"
      }
    });

    Command.prototype.try_track = function() {
      var _ref2;
      return this.argv.track || this.argv.track_remote || this.argv.track_local || ((_ref2 = this.argv.assert) != null ? _ref2.length : void 0);
    };

    Command.prototype.find_signature = function(cb) {
      var err, _ref2;
      _ref2 = parse_signature(this.decrypt_stderr.data().toString('utf8')), err = _ref2[0], this.signing_key = _ref2[1];
      this.found_sig = err == null;
      if ((err instanceof E.NotFoundError) && !this.argv.signed && (this.argv.signed_by == null)) {
        log.debug("| No signature found; but we didn't require one");
        err = null;
      }
      return cb(err);
    };

    Command.prototype.handle_track = function(cb) {
      var accept, e2, err, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/max/src/keybase-node-client/src/command/decrypt_and_verify.iced",
            funcname: "Command.handle_track"
          });
          _this.tssc.all_prompts(__iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                err = arguments[0];
                return accept = arguments[1];
              };
            })(),
            lineno: 62
          }));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "/Users/max/src/keybase-node-client/src/command/decrypt_and_verify.iced",
              funcname: "Command.handle_track"
            });
            _this.tssc.key_cleanup({
              accept: accept
            }, __iced_deferrals.defer({
              assign_fn: (function() {
                return function() {
                  return e2 = arguments[0];
                };
              })(),
              lineno: 63
            }));
            __iced_deferrals._fulfill();
          })(function() {
            if (typeof e2 !== "undefined" && e2 !== null) {
              log.warn("Error in key cleanup: " + e2.message);
            }
            return cb(err);
          });
        };
      })(this));
    };

    Command.prototype.handle_signature = function(cb) {
      var a, arg, b, basics, err, esc, local, remote, tracks, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      esc = make_esc(cb, "handle_signature");
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/max/src/keybase-node-client/src/command/decrypt_and_verify.iced",
            funcname: "Command.handle_signature"
          });
          _this.check_imports(esc(__iced_deferrals.defer({
            lineno: 72
          })));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          arg = {
            type: constants.lookups.key_fingerprint_to_user,
            name: _this.signing_key.primary
          };
          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "/Users/max/src/keybase-node-client/src/command/decrypt_and_verify.iced",
              funcname: "Command.handle_signature"
            });
            User.map_key_to_user(arg, esc(__iced_deferrals.defer({
              assign_fn: (function() {
                return function() {
                  return basics = arguments[0];
                };
              })(),
              lineno: 76
            })));
            __iced_deferrals._fulfill();
          })(function() {
            _this.username = basics.username;
            (function(__iced_k) {
              if (((a = _this.argv.signed_by) != null) && (a !== (b = _this.username))) {
                err = new E.WrongSignerError("Wrong signer: wanted '" + a + "' but got '" + b + "'");
                (function(__iced_k) {
                  __iced_deferrals = new iced.Deferrals(__iced_k, {
                    parent: ___iced_passed_deferral,
                    filename: "/Users/max/src/keybase-node-client/src/command/decrypt_and_verify.iced",
                    funcname: "Command.handle_signature"
                  });
                  athrow(err, esc(__iced_deferrals.defer({
                    lineno: 81
                  })));
                  __iced_deferrals._fulfill();
                })(__iced_k);
              } else {
                return __iced_k();
              }
            })(function() {
              _this.tssc = new TrackSubSubCommand({
                args: {
                  them: _this.username
                },
                opts: _this.argv,
                tmp_keyring: _this.tmp_keyring,
                batch: _this.batch
              });
              (function(__iced_k) {
                __iced_deferrals = new iced.Deferrals(__iced_k, {
                  parent: ___iced_passed_deferral,
                  filename: "/Users/max/src/keybase-node-client/src/command/decrypt_and_verify.iced",
                  funcname: "Command.handle_signature"
                });
                _this.tssc.on_decrypt(esc(__iced_deferrals.defer({
                  lineno: 89
                })));
                __iced_deferrals._fulfill();
              })(function() {
                var _ref2;
                _ref2 = _this.tssc.trackw.is_tracking(), remote = _ref2.remote, local = _ref2.local;
                tracks = remote ? "tracking remotely & locally" : local ? "tracking locally only" : "not tracking";
                log.info("Valid signature from keybase user " + (colors.bold(basics.username)) + " (" + tracks + ")");
                return cb(null);
              });
            });
          });
        };
      })(this));
    };

    Command.prototype.check_imports = function(cb) {
      var b, err, esc, ids, ki64, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      esc = make_esc(cb, "Command::check_imports");
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/max/src/keybase-node-client/src/command/decrypt_and_verify.iced",
            funcname: "Command.check_imports"
          });
          _this.tmp_keyring.list_keys(esc(__iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                return ids = arguments[0];
              };
            })(),
            lineno: 102
          })));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          err = null;
          if (ids.length === 0) {
            log.debug("| No new keys imported");
          } else if (ids.length > 1) {
            err = new E.CorruptionError("Too many imported keys: " + ids.length);
          } else {
            ki64 = ids[0];
            log.debug("| Found new key in the keyring: " + ki64);
            if (ki64 !== (b = _this.signing_key.primary.slice(-ki64.length))) {
              err = new E.VerifyError("Bad imported key; wanted " + b + " but got " + ki64);
            }
          }
          return cb(err);
        };
      })(this));
    };

    Command.prototype.do_output = function(o) {};

    Command.prototype.do_command = function(cb) {
      var err, gargs, out, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      gargs = this.make_gpg_args();
      this.decrypt_stderr = gargs.stderr;
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/max/src/keybase-node-client/src/command/decrypt_and_verify.iced",
            funcname: "Command.do_command"
          });
          _this.tmp_keyring.gpg(gargs, __iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                err = arguments[0];
                return out = arguments[1];
              };
            })(),
            lineno: 124
          }));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          _this.do_output(out);
          if (env().get_debug()) {
            log.debug(_this.decrypt_stderr.data().toString('utf8'));
          }
          return cb(err);
        };
      })(this));
    };

    Command.prototype.setup_tmp_keyring = function(cb) {
      var err, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/max/src/keybase-node-client/src/command/decrypt_and_verify.iced",
            funcname: "Command.setup_tmp_keyring"
          });
          TmpPrimaryKeyRing.make(__iced_deferrals.defer({
            assign_fn: (function(__slot_1) {
              return function() {
                err = arguments[0];
                return __slot_1.tmp_keyring = arguments[1];
              };
            })(_this),
            lineno: 133
          }));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          return cb(err);
        };
      })(this));
    };

    Command.prototype.cleanup = function(cb) {
      var e2, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      (function(_this) {
        return (function(__iced_k) {
          if (env().get_preserve_tmp_keyring()) {
            return __iced_k(log.info("Preserving " + (_this.tmp_keyring.to_string())));
          } else {
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "/Users/max/src/keybase-node-client/src/command/decrypt_and_verify.iced",
                funcname: "Command.cleanup"
              });
              _this.tmp_keyring.nuke(__iced_deferrals.defer({
                assign_fn: (function() {
                  return function() {
                    return e2 = arguments[0];
                  };
                })(),
                lineno: 142
              }));
              __iced_deferrals._fulfill();
            })(function() {
              return __iced_k(typeof e2 !== "undefined" && e2 !== null ? log.warn("Error cleaning up temporary keyring: " + e2.message) : void 0);
            });
          }
        });
      })(this)((function(_this) {
        return function() {
          return cb();
        };
      })(this));
    };

    Command.prototype.run = function(cb) {
      var esc, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      cb = chain(cb, this.cleanup.bind(this));
      esc = make_esc(cb, "Command::run");
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/max/src/keybase-node-client/src/command/decrypt_and_verify.iced",
            funcname: "Command.run"
          });
          _this.setup_tmp_keyring(esc(__iced_deferrals.defer({
            lineno: 152
          })));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "/Users/max/src/keybase-node-client/src/command/decrypt_and_verify.iced",
              funcname: "Command.run"
            });
            _this.do_command(esc(__iced_deferrals.defer({
              lineno: 153
            })));
            __iced_deferrals._fulfill();
          })(function() {
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "/Users/max/src/keybase-node-client/src/command/decrypt_and_verify.iced",
                funcname: "Command.run"
              });
              _this.find_signature(esc(__iced_deferrals.defer({
                lineno: 154
              })));
              __iced_deferrals._fulfill();
            })(function() {
              (function(__iced_k) {
                if (_this.found_sig) {
                  (function(__iced_k) {
                    __iced_deferrals = new iced.Deferrals(__iced_k, {
                      parent: ___iced_passed_deferral,
                      filename: "/Users/max/src/keybase-node-client/src/command/decrypt_and_verify.iced",
                      funcname: "Command.run"
                    });
                    _this.handle_signature(esc(__iced_deferrals.defer({
                      lineno: 156
                    })));
                    __iced_deferrals._fulfill();
                  })(function() {
                    (function(__iced_k) {
                      if (_this.try_track()) {
                        (function(__iced_k) {
                          __iced_deferrals = new iced.Deferrals(__iced_k, {
                            parent: ___iced_passed_deferral,
                            filename: "/Users/max/src/keybase-node-client/src/command/decrypt_and_verify.iced",
                            funcname: "Command.run"
                          });
                          _this.handle_track(esc(__iced_deferrals.defer({
                            lineno: 158
                          })));
                          __iced_deferrals._fulfill();
                        })(__iced_k);
                      } else {
                        return __iced_k();
                      }
                    })(__iced_k);
                  });
                } else {
                  return __iced_k();
                }
              })(function() {
                return cb(null);
              });
            });
          });
        };
      })(this));
    };

    return Command;

  })(Base);

}).call(this);
