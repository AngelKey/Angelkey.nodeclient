// Generated by IcedCoffeeScript 1.6.3-j
(function() {
  var ArgumentParser, Base, BufferOutStream, Command, E, PackageJson, User, add_option_dict, db, gpg, iced, log, make_esc, session, __iced_k, __iced_k_noop,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  iced = require('iced-coffee-script/lib/coffee-script/iced').runtime;
  __iced_k = __iced_k_noop = function() {};

  Base = require('./base').Base;

  log = require('../log');

  ArgumentParser = require('argparse').ArgumentParser;

  add_option_dict = require('./argparse').add_option_dict;

  PackageJson = require('../package').PackageJson;

  gpg = require('../gpg').gpg;

  BufferOutStream = require('../stream').BufferOutStream;

  E = require('../err').E;

  make_esc = require('iced-error').make_esc;

  db = require('../db');

  User = require('../user').User;

  session = require('../session').session;

  exports.Command = Command = (function(_super) {
    __extends(Command, _super);

    function Command() {
      return Command.__super__.constructor.apply(this, arguments);
    }

    Command.prototype.add_subcommand_parser = function(scp) {
      var name, opts, sub;
      opts = {
        aliases: ["unverify"],
        help: "untrack this user"
      };
      name = "untrack";
      sub = scp.addParser(name, opts);
      sub.addArgument(["them"], {
        nargs: 1
      });
      return opts.aliases.concat([name]);
    };

    Command.prototype.run = function(cb) {
      var esc, g, me, them, untrack_obj, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      esc = make_esc(cb, "Untrack::run");
      log.debug("+ run");
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/home/max/src/keybase-node-client/src/command/untrack.iced",
            funcname: "Command.run"
          });
          User.load_me(esc(__iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                return me = arguments[0];
              };
            })(),
            lineno: 33
          })));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "/home/max/src/keybase-node-client/src/command/untrack.iced",
              funcname: "Command.run"
            });
            User.load({
              username: _this.argv.them[0]
            }, esc(__iced_deferrals.defer({
              assign_fn: (function() {
                return function() {
                  return them = arguments[0];
                };
              })(),
              lineno: 34
            })));
            __iced_deferrals._fulfill();
          })(function() {
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "/home/max/src/keybase-node-client/src/command/untrack.iced",
                funcname: "Command.run"
              });
              me.assert_tracking(them, esc(__iced_deferrals.defer({
                lineno: 35
              })));
              __iced_deferrals._fulfill();
            })(function() {
              untrack_obj = them.gen_untrack_obj();
              (function(__iced_k) {
                __iced_deferrals = new iced.Deferrals(__iced_k, {
                  parent: ___iced_passed_deferral,
                  filename: "/home/max/src/keybase-node-client/src/command/untrack.iced",
                  funcname: "Command.run"
                });
                me.gen_track_proof_gen({
                  uid: them.id,
                  untrack_obj: untrack_obj
                }, esc(__iced_deferrals.defer({
                  assign_fn: (function() {
                    return function() {
                      return g = arguments[0];
                    };
                  })(),
                  lineno: 37
                })));
                __iced_deferrals._fulfill();
              })(function() {
                (function(__iced_k) {
                  __iced_deferrals = new iced.Deferrals(__iced_k, {
                    parent: ___iced_passed_deferral,
                    filename: "/home/max/src/keybase-node-client/src/command/untrack.iced",
                    funcname: "Command.run"
                  });
                  session.load_and_login(esc(__iced_deferrals.defer({
                    lineno: 38
                  })));
                  __iced_deferrals._fulfill();
                })(function() {
                  (function(__iced_k) {
                    __iced_deferrals = new iced.Deferrals(__iced_k, {
                      parent: ___iced_passed_deferral,
                      filename: "/home/max/src/keybase-node-client/src/command/untrack.iced",
                      funcname: "Command.run"
                    });
                    g.run(esc(__iced_deferrals.defer({
                      lineno: 39
                    })));
                    __iced_deferrals._fulfill();
                  })(function() {
                    (function(__iced_k) {
                      __iced_deferrals = new iced.Deferrals(__iced_k, {
                        parent: ___iced_passed_deferral,
                        filename: "/home/max/src/keybase-node-client/src/command/untrack.iced",
                        funcname: "Command.run"
                      });
                      them.remove_key(esc(__iced_deferrals.defer({
                        lineno: 40
                      })));
                      __iced_deferrals._fulfill();
                    })(function() {
                      log.debug("- run");
                      return cb(null);
                    });
                  });
                });
              });
            });
          });
        };
      })(this));
    };

    return Command;

  })(Base);

}).call(this);
