// Generated by IcedCoffeeScript 1.7.1-b
(function() {
  var ArgumentParser, Base, Command, add_option_dict, env, iced, log, path, rewrite, run, version_info, __iced_k, __iced_k_noop,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  iced = require('iced-coffee-script').iced;
  __iced_k = __iced_k_noop = function() {};

  Base = require('./base').Base;

  log = require('../log');

  ArgumentParser = require('argparse').ArgumentParser;

  add_option_dict = require('./argparse').add_option_dict;

  version_info = require('../version').version_info;

  run = require('iced-spawn').run;

  path = require('path');

  env = require('../env').env;

  rewrite = function(s) {
    return s.replace(/-/g, "_");
  };

  exports.Command = Command = (function(_super) {
    __extends(Command, _super);

    function Command() {
      return Command.__super__.constructor.apply(this, arguments);
    }

    Command.prototype.OPTS = {
      n: {
        alias: "npm",
        help: "an alternate path for NPM"
      },
      u: {
        alias: "url",
        help: "specify a URL prefix for fetching"
      },
      C: {
        alias: "skip-cleanup",
        action: "storeTrue",
        help: "Don't cleanup temporary stuff after install"
      },
      c: {
        alias: "cmd",
        help: "the command to run"
      },
      p: {
        alias: "prefix",
        help: "the prefix to install to"
      }
    };

    Command.prototype.add_subcommand_parser = function(scp) {
      var name, opts, sub;
      opts = {
        aliases: [],
        help: "update the keybase client software"
      };
      name = "update";
      sub = scp.addParser(name, opts);
      add_option_dict(sub, this.OPTS);
      return opts.aliases.concat([name]);
    };

    Command.prototype.run = function(cb) {
      var a, args, err, g, inargs, name, out, v, ___iced_passed_deferral, __iced_deferrals, __iced_k, _i, _j, _len, _len1, _ref, _ref1;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      log.info("Attempting software upgrade.....");
      process.env.path = [path.dirname(process.argv[1]), process.env.path].join(":");
      name = this.argv.cmd || "keybase-installer";
      args = [];
      if ((g = env().get_gpg_cmd()) != null) {
        args.push("-g", g);
      }
      if (env().get_no_gpg_options()) {
        args.push("-O");
      }
      if (env().get_debug()) {
        args.push("-d");
      }
      _ref = ["npm", "url", "prefix"];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        a = _ref[_i];
        if ((v = this.argv[rewrite(a)]) != null) {
          args.push("--" + a, v);
        }
      }
      _ref1 = ["skip-cleanup"];
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        a = _ref1[_j];
        if ((v = this.argv[rewrite(a)])) {
          args.push("--" + a);
        }
      }
      inargs = {
        args: args,
        name: name
      };
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/max/src/keybase/node-client/src/command/update.iced",
            funcname: "Command.run"
          });
          run(inargs, __iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                err = arguments[0];
                return out = arguments[1];
              };
            })(),
            lineno: 66
          }));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          return cb(err);
        };
      })(this));
    };

    return Command;

  })(Base);

}).call(this);
