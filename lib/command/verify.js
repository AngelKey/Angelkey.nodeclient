// Generated by IcedCoffeeScript 1.6.3-g
(function() {
  var ArgumentParser, Base, BufferOutStream, Command, E, PackageJson, TrackWrapper, User, add_option_dict, colors, constants, db, env, gpg, iced, log, make_esc, prompt_yn, proofs, session, util, __iced_k, __iced_k_noop, _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  iced = require('iced-coffee-script/lib/coffee-script/iced').runtime;
  __iced_k = __iced_k_noop = function() {};

  Base = require('./base').Base;

  log = require('../log');

  ArgumentParser = require('argparse').ArgumentParser;

  add_option_dict = require('./argparse').add_option_dict;

  PackageJson = require('../package').PackageJson;

  gpg = require('../gpg').gpg;

  BufferOutStream = require('../stream').BufferOutStream;

  E = require('../err').E;

  make_esc = require('iced-error').make_esc;

  User = require('../user').User;

  db = require('../db');

  util = require('util');

  env = require('../env').env;

  prompt_yn = require('../prompter').prompt_yn;

  colors = require('colors');

  TrackWrapper = require('../track').TrackWrapper;

  proofs = require('keybase-proofs');

  session = require('../session').session;

  constants = require('../constants').constants;

  exports.Command = Command = (function(_super) {
    __extends(Command, _super);

    function Command() {
      _ref = Command.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    Command.prototype.OPTS = {
      t: {
        alias: "track",
        action: "storeTrue",
        help: "remotely track by default"
      },
      n: {
        alias: "no-track",
        action: "storeTrue",
        help: "never track"
      }
    };

    Command.prototype.add_subcommand_parser = function(scp) {
      var name, opts, sub;
      opts = {
        aliases: ["vrfy"],
        help: "verify a user's authenticity"
      };
      name = "verify";
      sub = scp.addParser(name, opts);
      add_option_dict(sub, this.OPTS);
      sub.addArgument(["them"], {
        nargs: 1
      });
      return opts.aliases.concat([name]);
    };

    Command.prototype.prompt_ok = function(warnings, cb) {
      var err, prompt, ret, ___iced_passed_deferral, __iced_deferrals, __iced_k,
        _this = this;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      prompt = warnings ? (log.console.log(colors.red("Some remote proofs failed!")), "Still verify this user?") : "Are you satisfied with these proofs?";
      (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "src/command/verify.iced",
          funcname: "Command.prompt_ok"
        });
        prompt_yn({
          prompt: prompt,
          defval: false
        }, __iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              err = arguments[0];
              return ret = arguments[1];
            };
          })(),
          lineno: 56
        }));
        __iced_deferrals._fulfill();
      })(function() {
        return cb(err, ret);
      });
    };

    Command.prototype.prompt_track = function(cb) {
      var err, prompt, ret, ___iced_passed_deferral, __iced_deferrals, __iced_k,
        _this = this;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      ret = err = null;
      (function(__iced_k) {
        if (_this.argv.track) {
          return __iced_k(ret = true);
        } else {
          (function(__iced_k) {
            if (_this.argv.batch || _this.argv.no_track) {
              return __iced_k(ret = false);
            } else {
              prompt = "Permnanently track this user, and write proof to server?";
              (function(__iced_k) {
                __iced_deferrals = new iced.Deferrals(__iced_k, {
                  parent: ___iced_passed_deferral,
                  filename: "src/command/verify.iced",
                  funcname: "Command.prompt_track"
                });
                prompt_yn({
                  prompt: prompt,
                  defval: true
                }, __iced_deferrals.defer({
                  assign_fn: (function() {
                    return function() {
                      err = arguments[0];
                      return ret = arguments[1];
                    };
                  })(),
                  lineno: 67
                }));
                __iced_deferrals._fulfill();
              })(__iced_k);
            }
          })(__iced_k);
        }
      })(function() {
        return cb(err, ret);
      });
    };

    Command.prototype.run = function(cb) {
      var accept, err, esc, found, me, them, ___iced_passed_deferral, __iced_deferrals, __iced_k,
        _this = this;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      esc = make_esc(cb, "Verify::run");
      log.debug("+ run");
      (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "src/command/verify.iced",
          funcname: "Command.run"
        });
        db.open(esc(__iced_deferrals.defer({
          lineno: 76
        })));
        __iced_deferrals._fulfill();
      })(function() {
        (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "src/command/verify.iced",
            funcname: "Command.run"
          });
          User.load({
            username: env().get_username()
          }, esc(__iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                return me = arguments[0];
              };
            })(),
            lineno: 77
          })));
          __iced_deferrals._fulfill();
        })(function() {
          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "src/command/verify.iced",
              funcname: "Command.run"
            });
            me.check_public_key(esc(__iced_deferrals.defer({
              lineno: 78
            })));
            __iced_deferrals._fulfill();
          })(function() {
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "src/command/verify.iced",
                funcname: "Command.run"
              });
              me.verify(esc(__iced_deferrals.defer({
                lineno: 79
              })));
              __iced_deferrals._fulfill();
            })(function() {
              (function(__iced_k) {
                __iced_deferrals = new iced.Deferrals(__iced_k, {
                  parent: ___iced_passed_deferral,
                  filename: "src/command/verify.iced",
                  funcname: "Command.run"
                });
                User.load({
                  username: _this.argv.them[0]
                }, esc(__iced_deferrals.defer({
                  assign_fn: (function() {
                    return function() {
                      return them = arguments[0];
                    };
                  })(),
                  lineno: 81
                })));
                __iced_deferrals._fulfill();
              })(function() {
                (function(__iced_k) {
                  __iced_deferrals = new iced.Deferrals(__iced_k, {
                    parent: ___iced_passed_deferral,
                    filename: "src/command/verify.iced",
                    funcname: "Command.run"
                  });
                  them.import_public_key(esc(__iced_deferrals.defer({
                    assign_fn: (function() {
                      return function() {
                        return found = arguments[0];
                      };
                    })(),
                    lineno: 82
                  })));
                  __iced_deferrals._fulfill();
                })(function() {
                  (function(__iced_k) {
                    __iced_deferrals = new iced.Deferrals(__iced_k, {
                      parent: ___iced_passed_deferral,
                      filename: "src/command/verify.iced",
                      funcname: "Command.run"
                    });
                    _this._run2({
                      me: me,
                      them: them
                    }, __iced_deferrals.defer({
                      assign_fn: (function() {
                        return function() {
                          err = arguments[0];
                          return accept = arguments[1];
                        };
                      })(),
                      lineno: 86
                    }));
                    __iced_deferrals._fulfill();
                  })(function() {
                    (function(__iced_k) {
                      if (accept) {
                        log.debug("| commit_key");
                        (function(__iced_k) {
                          __iced_deferrals = new iced.Deferrals(__iced_k, {
                            parent: ___iced_passed_deferral,
                            filename: "src/command/verify.iced",
                            funcname: "Command.run"
                          });
                          them.commit_key(esc(__iced_deferrals.defer({
                            lineno: 90
                          })));
                          __iced_deferrals._fulfill();
                        })(__iced_k);
                      } else {
                        (function(__iced_k) {
                          if (!found) {
                            log.debug("| remove_key");
                            (function(__iced_k) {
                              __iced_deferrals = new iced.Deferrals(__iced_k, {
                                parent: ___iced_passed_deferral,
                                filename: "src/command/verify.iced",
                                funcname: "Command.run"
                              });
                              them.remove_key(esc(__iced_deferrals.defer({
                                lineno: 93
                              })));
                              __iced_deferrals._fulfill();
                            })(__iced_k);
                          } else {
                            return __iced_k();
                          }
                        })(__iced_k);
                      }
                    })(function() {
                      log.debug("- run");
                      return cb(err);
                    });
                  });
                });
              });
            });
          });
        });
      });
    };

    Command.prototype._run2 = function(_arg, cb) {
      var accept, approve, check, do_remote, err, esc, me, n_warnings, skp, them, trackw, warnings, ___iced_passed_deferral, __iced_deferrals, __iced_k,
        _this = this;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      me = _arg.me, them = _arg.them;
      esc = make_esc(cb, "Verify::_run2");
      log.debug("+ _run2");
      (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "src/command/verify.iced",
          funcname: "Command._run2"
        });
        them.verify(esc(__iced_deferrals.defer({
          lineno: 104
        })));
        __iced_deferrals._fulfill();
      })(function() {
        (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "src/command/verify.iced",
            funcname: "Command._run2"
          });
          TrackWrapper.load({
            tracker: me,
            trackee: them
          }, esc(__iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                return trackw = arguments[0];
              };
            })(),
            lineno: 105
          })));
          __iced_deferrals._fulfill();
        })(function() {
          check = trackw.skip_remote_check();
          if (check === constants.skip.NONE) {
            log.console.log("...checking identity proofs");
            skp = false;
          } else {
            log.info("...all remote checks are up-to-date");
            skp = true;
          }
          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "src/command/verify.iced",
              funcname: "Command._run2"
            });
            them.check_remote_proofs(skp, esc(__iced_deferrals.defer({
              assign_fn: (function() {
                return function() {
                  return warnings = arguments[0];
                };
              })(),
              lineno: 114
            })));
            __iced_deferrals._fulfill();
          })(function() {
            n_warnings = warnings.warnings().length;
            (function(__iced_k) {
              if ((approve = trackw.skip_approval()) !== constants.skip.NONE) {
                log.debug("| skipping approval, since remote services & key are unchanged");
                return __iced_k(accept = true);
              } else {
                (function(__iced_k) {
                  if (_this.argv.batch) {
                    log.debug("| We needed approval, but we were in batch mode");
                    return __iced_k(accept = false);
                  } else {
                    (function(__iced_k) {
                      __iced_deferrals = new iced.Deferrals(__iced_k, {
                        parent: ___iced_passed_deferral,
                        filename: "src/command/verify.iced",
                        funcname: "Command._run2"
                      });
                      _this.prompt_ok(n_warnings, esc(__iced_deferrals.defer({
                        assign_fn: (function() {
                          return function() {
                            return accept = arguments[0];
                          };
                        })(),
                        lineno: 124
                      })));
                      __iced_deferrals._fulfill();
                    })(__iced_k);
                  }
                })(__iced_k);
              }
            })(function() {
              err = null;
              (function(__iced_k) {
                if (!accept) {
                  log.warn("Bailing out; proofs were not accepted");
                  return __iced_k(err = new E.CancelError("operation was canceled"));
                } else {
                  (function(__iced_k) {
                    if ((check === constants.skip.REMOTE) && (approve === constants.skip.REMOTE)) {
                      return __iced_k(log.info("Nothing to do; tracking is up-to-date"));
                    } else {
                      (function(__iced_k) {
                        __iced_deferrals = new iced.Deferrals(__iced_k, {
                          parent: ___iced_passed_deferral,
                          filename: "src/command/verify.iced",
                          funcname: "Command._run2"
                        });
                        _this.prompt_track(esc(__iced_deferrals.defer({
                          assign_fn: (function() {
                            return function() {
                              return do_remote = arguments[0];
                            };
                          })(),
                          lineno: 133
                        })));
                        __iced_deferrals._fulfill();
                      })(function() {
                        (function(__iced_k) {
                          if (do_remote) {
                            (function(__iced_k) {
                              __iced_deferrals = new iced.Deferrals(__iced_k, {
                                parent: ___iced_passed_deferral,
                                filename: "src/command/verify.iced",
                                funcname: "Command._run2"
                              });
                              session.load_and_login(esc(__iced_deferrals.defer({
                                lineno: 134
                              })));
                              __iced_deferrals._fulfill();
                            })(__iced_k);
                          } else {
                            return __iced_k();
                          }
                        })(function() {
                          (function(__iced_k) {
                            __iced_deferrals = new iced.Deferrals(__iced_k, {
                              parent: ___iced_passed_deferral,
                              filename: "src/command/verify.iced",
                              funcname: "Command._run2"
                            });
                            trackw.store_track({
                              do_remote: do_remote
                            }, esc(__iced_deferrals.defer({
                              lineno: 135
                            })));
                            __iced_deferrals._fulfill();
                          })(__iced_k);
                        });
                      });
                    }
                  })(__iced_k);
                }
              })(function() {
                log.debug("- _run2");
                return cb(err, accept);
              });
            });
          });
        });
      });
    };

    return Command;

  })(Base);

}).call(this);
