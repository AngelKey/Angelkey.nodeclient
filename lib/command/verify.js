// Generated by IcedCoffeeScript 1.6.3-g
(function() {
  var ArgumentParser, Base, BufferOutStream, Command, E, PackageJson, User, add_option_dict, colors, db, env, gpg, iced, log, make_esc, prompt_yn, util, __iced_k, __iced_k_noop, _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  iced = require('iced-coffee-script/lib/coffee-script/iced').runtime;
  __iced_k = __iced_k_noop = function() {};

  Base = require('./base').Base;

  log = require('../log');

  ArgumentParser = require('argparse').ArgumentParser;

  add_option_dict = require('./argparse').add_option_dict;

  PackageJson = require('../package').PackageJson;

  gpg = require('../gpg').gpg;

  BufferOutStream = require('../stream').BufferOutStream;

  E = require('../err').E;

  make_esc = require('iced-error').make_esc;

  User = require('../user').User;

  db = require('../db');

  util = require('util');

  env = require('../env').env;

  prompt_yn = require('../prompter').prompt_yn;

  colors = require('colors');

  exports.Command = Command = (function(_super) {
    __extends(Command, _super);

    function Command() {
      _ref = Command.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    Command.prototype.add_subcommand_parser = function(scp) {
      var name, opts, sub;
      opts = {
        aliases: ["vrfy"],
        help: "verify a user's authenticity"
      };
      name = "verify";
      sub = scp.addParser(name, opts);
      sub.addArgument(["them"], {
        nargs: 1
      });
      return opts.aliases.concat([name]);
    };

    Command.prototype.prompt_ok = function(warnings, cb) {
      var err, prompt, ret, ___iced_passed_deferral, __iced_deferrals, __iced_k,
        _this = this;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      prompt = warnings ? (log.console.log(colors.red("Some remote proofs failed!")), "Still verify this user?") : "Are you satisfied with these proofs?";
      (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "src/command/verify.iced",
          funcname: "Command.prompt_ok"
        });
        prompt_yn({
          prompt: prompt,
          defval: false
        }, __iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              err = arguments[0];
              return ret = arguments[1];
            };
          })(),
          lineno: 39
        }));
        __iced_deferrals._fulfill();
      })(function() {
        return cb(err, ret);
      });
    };

    Command.prototype.run = function(cb) {
      var accept, esc, found, me, them, track, warnings, ___iced_passed_deferral, __iced_deferrals, __iced_k,
        _this = this;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      esc = make_esc(cb, "Verify::run");
      (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "src/command/verify.iced",
          funcname: "Command.run"
        });
        db.open(esc(__iced_deferrals.defer({
          lineno: 47
        })));
        __iced_deferrals._fulfill();
      })(function() {
        (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "src/command/verify.iced",
            funcname: "Command.run"
          });
          User.load({
            username: env().get_username()
          }, esc(__iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                return me = arguments[0];
              };
            })(),
            lineno: 48
          })));
          __iced_deferrals._fulfill();
        })(function() {
          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "src/command/verify.iced",
              funcname: "Command.run"
            });
            me.check_public_key(esc(__iced_deferrals.defer({
              lineno: 49
            })));
            __iced_deferrals._fulfill();
          })(function() {
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "src/command/verify.iced",
                funcname: "Command.run"
              });
              me.verify(esc(__iced_deferrals.defer({
                lineno: 50
              })));
              __iced_deferrals._fulfill();
            })(function() {
              (function(__iced_k) {
                __iced_deferrals = new iced.Deferrals(__iced_k, {
                  parent: ___iced_passed_deferral,
                  filename: "src/command/verify.iced",
                  funcname: "Command.run"
                });
                User.load({
                  username: _this.argv.them[0]
                }, esc(__iced_deferrals.defer({
                  assign_fn: (function() {
                    return function() {
                      return them = arguments[0];
                    };
                  })(),
                  lineno: 52
                })));
                __iced_deferrals._fulfill();
              })(function() {
                (function(__iced_k) {
                  __iced_deferrals = new iced.Deferrals(__iced_k, {
                    parent: ___iced_passed_deferral,
                    filename: "src/command/verify.iced",
                    funcname: "Command.run"
                  });
                  them.import_public_key(esc(__iced_deferrals.defer({
                    assign_fn: (function() {
                      return function() {
                        return found = arguments[0];
                      };
                    })(),
                    lineno: 53
                  })));
                  __iced_deferrals._fulfill();
                })(function() {
                  (function(__iced_k) {
                    __iced_deferrals = new iced.Deferrals(__iced_k, {
                      parent: ___iced_passed_deferral,
                      filename: "src/command/verify.iced",
                      funcname: "Command.run"
                    });
                    them.verify(esc(__iced_deferrals.defer({
                      lineno: 54
                    })));
                    __iced_deferrals._fulfill();
                  })(function() {
                    (function(__iced_k) {
                      __iced_deferrals = new iced.Deferrals(__iced_k, {
                        parent: ___iced_passed_deferral,
                        filename: "src/command/verify.iced",
                        funcname: "Command.run"
                      });
                      me.find_track(them, esc(__iced_deferrals.defer({
                        assign_fn: (function() {
                          return function() {
                            return track = arguments[0];
                          };
                        })(),
                        lineno: 56
                      })));
                      __iced_deferrals._fulfill();
                    })(function() {
                      log.console.log("...checking identity proofs");
                      (function(__iced_k) {
                        __iced_deferrals = new iced.Deferrals(__iced_k, {
                          parent: ___iced_passed_deferral,
                          filename: "src/command/verify.iced",
                          funcname: "Command.run"
                        });
                        them.check_remote_proofs(esc(__iced_deferrals.defer({
                          assign_fn: (function() {
                            return function() {
                              return warnings = arguments[0];
                            };
                          })(),
                          lineno: 59
                        })));
                        __iced_deferrals._fulfill();
                      })(function() {
                        (function(__iced_k) {
                          __iced_deferrals = new iced.Deferrals(__iced_k, {
                            parent: ___iced_passed_deferral,
                            filename: "src/command/verify.iced",
                            funcname: "Command.run"
                          });
                          _this.prompt_ok(warnings.warnings().length, esc(__iced_deferrals.defer({
                            assign_fn: (function() {
                              return function() {
                                return accept = arguments[0];
                              };
                            })(),
                            lineno: 60
                          })));
                          __iced_deferrals._fulfill();
                        })(function() {
                          if (!accept) {
                            log.warn("Bailing out; proofs were not accepted");
                          }
                          (function(__iced_k) {
                            if (!accept && !found) {
                              (function(__iced_k) {
                                __iced_deferrals = new iced.Deferrals(__iced_k, {
                                  parent: ___iced_passed_deferral,
                                  filename: "src/command/verify.iced",
                                  funcname: "Command.run"
                                });
                                them.remove_key(esc(__iced_deferrals.defer({
                                  lineno: 66
                                })));
                                __iced_deferrals._fulfill();
                              })(__iced_k);
                            } else {
                              return __iced_k();
                            }
                          })(function() {
                            console.log(found);
                            return cb(null);
                          });
                        });
                      });
                    });
                  });
                });
              });
            });
          });
        });
      });
    };

    return Command;

  })(Base);

}).call(this);
