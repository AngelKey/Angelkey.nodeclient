// Generated by IcedCoffeeScript 1.6.3-i
(function() {
  var ArgumentParser, Base, BufferOutStream, Command, E, PackageJson, User, add_option_dict, db, gpg, iced, log, make_esc, __iced_k, __iced_k_noop,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  iced = require('iced-coffee-script/lib/coffee-script/iced').runtime;
  __iced_k = __iced_k_noop = function() {};

  Base = require('./base').Base;

  log = require('../log');

  ArgumentParser = require('argparse').ArgumentParser;

  add_option_dict = require('./argparse').add_option_dict;

  PackageJson = require('../package').PackageJson;

  gpg = require('../gpg').gpg;

  BufferOutStream = require('../stream').BufferOutStream;

  E = require('../err').E;

  make_esc = require('iced-error').make_esc;

  User = require('../user').User;

  db = require('../db');

  exports.Command = Command = (function(_super) {
    __extends(Command, _super);

    function Command() {
      return Command.__super__.constructor.apply(this, arguments);
    }

    Command.prototype.add_subcommand_parser = function(scp) {
      var name, opts, sub;
      opts = {
        aliases: ["vrfy"],
        help: "add a proof of identity"
      };
      name = "verify";
      sub = scp.addParser(name, opts);
      sub.addArgument(["username"], {
        nargs: 1
      });
      return opts.aliases.concat([name]);
    };

    Command.prototype.run = function(cb) {
      var esc, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      esc = make_esc(cb, "Verify::run");
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/max/src/keybase-node-client/src/command/verify.iced",
            funcname: "Command.run"
          });
          User.load_from_server({
            username: _this.argv.username
          }, esc(__iced_deferrals.defer({
            assign_fn: (function(__slot_1) {
              return function() {
                return __slot_1.user = arguments[0];
              };
            })(_this),
            lineno: 31
          })));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "/Users/max/src/keybase-node-client/src/command/verify.iced",
              funcname: "Command.run"
            });
            db.open(esc(__iced_deferrals.defer({
              lineno: 32
            })));
            __iced_deferrals._fulfill();
          })(function() {
            console.log(_this.user);
            return cb(null);
          });
        };
      })(this));
    };

    return Command;

  })(Base);

}).call(this);
