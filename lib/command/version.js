// Generated by IcedCoffeeScript 1.6.3-g
(function() {
  var ArgumentParser, Base, BufferOutStream, Command, PackageJson, add_option_dict, gpg, iced, log, __iced_k, __iced_k_noop, _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  iced = require('iced-coffee-script/lib/coffee-script/iced').runtime;
  __iced_k = __iced_k_noop = function() {};

  Base = require('./base').Base;

  log = require('../log');

  ArgumentParser = require('argparse').ArgumentParser;

  add_option_dict = require('./argparse').add_option_dict;

  PackageJson = require('../package').PackageJson;

  gpg = require('../gpg').gpg;

  BufferOutStream = require('../stream').BufferOutStream;

  exports.Command = Command = (function(_super) {
    __extends(Command, _super);

    function Command() {
      _ref = Command.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    Command.prototype.add_subcommand_parser = function(scp) {
      var name, opts, sub;
      opts = {
        aliases: ["vers"],
        help: "output version information about this client"
      };
      name = "version";
      sub = scp.addParser(name, opts);
      return opts.aliases.concat([name]);
    };

    Command.prototype.run = function(cb) {
      var bis, gpg_v, l, lines, pjs, rc, ___iced_passed_deferral, __iced_deferrals, __iced_k,
        _this = this;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      pjs = new PackageJson();
      bis = new BufferOutStream();
      (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "src/command/version.iced",
          funcname: "Command.run"
        });
        gpg({
          args: ["--version"],
          stdout: bis
        }, __iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              return rc = arguments[0];
            };
          })(),
          lineno: 27
        }));
        __iced_deferrals._fulfill();
      })(function() {
        gpg_v = bis.data().toString().split("\n").slice(0, 2);
        lines = [pjs.bin() + " (keybase.io CLI) v" + pjs.version(), "- node.js " + process.version].concat((function() {
          var _i, _len, _results;
          _results = [];
          for (_i = 0, _len = gpg_v.length; _i < _len; _i++) {
            l = gpg_v[_i];
            _results.push("- " + l);
          }
          return _results;
        })());
        console.log(lines.join("\n"));
        return cb(null);
      });
    };

    return Command;

  })(Base);

}).call(this);
