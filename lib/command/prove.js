// Generated by IcedCoffeeScript 1.6.3-i
(function() {
  var ArgumentParser, Base, Command, E, GithubProofGen, PackageJson, TwitterProofGen, User, add_option_dict, iced, log, make_esc, prompt_remote_username, __iced_k, __iced_k_noop, _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  iced = require('iced-coffee-script/lib/coffee-script/iced').runtime;
  __iced_k = __iced_k_noop = function() {};

  Base = require('./base').Base;

  log = require('../log');

  ArgumentParser = require('argparse').ArgumentParser;

  add_option_dict = require('./argparse').add_option_dict;

  PackageJson = require('../package').PackageJson;

  E = require('../err').E;

  make_esc = require('iced-error').make_esc;

  prompt_remote_username = require('../prompter').prompt_remote_username;

  _ref = require('../sigs'), TwitterProofGen = _ref.TwitterProofGen, GithubProofGen = _ref.GithubProofGen;

  User = require('../user').User;

  exports.Command = Command = (function(_super) {
    __extends(Command, _super);

    function Command() {
      return Command.__super__.constructor.apply(this, arguments);
    }

    Command.prototype.use_session = function() {
      return true;
    };

    Command.prototype.add_subcommand_parser = function(scp) {
      var name, opts, sub;
      opts = {
        aliases: ["proof"],
        help: "add a proof of identity"
      };
      name = "prove";
      sub = scp.addParser(name, opts);
      sub.addArgument(["service"], {
        nargs: 1,
        help: "the name of service"
      });
      sub.addArgument(["remote_username"], {
        nargs: "?",
        help: "username at that service"
      });
      return opts.aliases.concat([name]);
    };

    Command.prototype.prompt_remote_username = function(cb) {
      var err, ret, svc, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      svc = this.argv.service[0];
      err = null;
      (function(_this) {
        return (function(__iced_k) {
          if ((ret = _this.argv.remote_username) == null) {
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "/Users/max/src/keybase-node-client/src/command/prove.iced",
                funcname: "Command.prompt_remote_username"
              });
              prompt_remote_username(svc, __iced_deferrals.defer({
                assign_fn: (function() {
                  return function() {
                    err = arguments[0];
                    return ret = arguments[1];
                  };
                })(),
                lineno: 37
              }));
              __iced_deferrals._fulfill();
            })(__iced_k);
          } else {
            return __iced_k();
          }
        });
      })(this)((function(_this) {
        return function() {
          _this.remote_username = ret;
          return cb(err, ret);
        };
      })(this));
    };

    Command.prototype.allocate_proof_gen = function(cb) {
      var err, klass, table, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      table = {
        twitter: TwitterProofGen,
        twtr: TwitterProofGen,
        git: GithubProofGen,
        github: GithubProofGen,
        gith: GithubProofGen
      };
      klass = table[this.argv.service[0].toLowerCase()];
      (function(_this) {
        return (function(__iced_k) {
          if (klass != null) {
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "/Users/max/src/keybase-node-client/src/command/prove.iced",
                funcname: "Command.allocate_proof_gen"
              });
              _this.me.gen_remote_proof_gen({
                klass: klass,
                remote_username: _this.remote_username
              }, __iced_deferrals.defer({
                assign_fn: (function(__slot_1) {
                  return function() {
                    err = arguments[0];
                    return __slot_1.gen = arguments[1];
                  };
                })(_this),
                lineno: 52
              }));
              __iced_deferrals._fulfill();
            })(__iced_k);
          } else {
            return __iced_k(err = new E.UnknownServiceError("Unknown service: " + _this.argv.service[0]));
          }
        });
      })(this)((function(_this) {
        return function() {
          return cb(err);
        };
      })(this));
    };

    Command.prototype.run = function(cb) {
      var esc, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      esc = make_esc(cb, "Command::run");
      console.log("A");
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/max/src/keybase-node-client/src/command/prove.iced",
            funcname: "Command.run"
          });
          _this.prompt_remote_username(esc(__iced_deferrals.defer({
            lineno: 62
          })));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          console.log("B");
          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "/Users/max/src/keybase-node-client/src/command/prove.iced",
              funcname: "Command.run"
            });
            User.load_me(esc(__iced_deferrals.defer({
              assign_fn: (function(__slot_1) {
                return function() {
                  return __slot_1.me = arguments[0];
                };
              })(_this),
              lineno: 64
            })));
            __iced_deferrals._fulfill();
          })(function() {
            console.log("C");
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "/Users/max/src/keybase-node-client/src/command/prove.iced",
                funcname: "Command.run"
              });
              _this.allocate_proof_gen(esc(__iced_deferrals.defer({
                lineno: 66
              })));
              __iced_deferrals._fulfill();
            })(function() {
              console.log("D");
              (function(__iced_k) {
                __iced_deferrals = new iced.Deferrals(__iced_k, {
                  parent: ___iced_passed_deferral,
                  filename: "/Users/max/src/keybase-node-client/src/command/prove.iced",
                  funcname: "Command.run"
                });
                _this.gen.run(esc(__iced_deferrals.defer({
                  lineno: 68
                })));
                __iced_deferrals._fulfill();
              })(function() {
                console.log("E");
                console.log(_this.gen);
                return cb(null);
              });
            });
          });
        };
      })(this));
    };

    return Command;

  })(Base);

}).call(this);
