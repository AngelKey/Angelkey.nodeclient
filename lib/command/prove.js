// Generated by IcedCoffeeScript 1.6.3-g
(function() {
  var ArgumentParser, Base, BufferOutStream, Command, E, PackageJson, add_option_dict, gpg, iced, log, make_esc, prompt_remote_username, __iced_k, __iced_k_noop, _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  iced = require('iced-coffee-script/lib/coffee-script/iced').runtime;
  __iced_k = __iced_k_noop = function() {};

  Base = require('./base').Base;

  log = require('../log');

  ArgumentParser = require('argparse').ArgumentParser;

  add_option_dict = require('./argparse').add_option_dict;

  PackageJson = require('../package').PackageJson;

  gpg = require('../gpg').gpg;

  BufferOutStream = require('../stream').BufferOutStream;

  E = require('../err').E;

  make_esc = require('iced-error').make_esc;

  prompt_remote_username = require('../prompter').prompt_remote_username;

  exports.Command = Command = (function(_super) {
    __extends(Command, _super);

    function Command() {
      _ref = Command.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    Command.prototype.use_session = function() {
      return true;
    };

    Command.prototype.add_subcommand_parser = function(scp) {
      var name, opts, sub;
      opts = {
        aliases: ["proof"],
        help: "add a proof of identity"
      };
      name = "prove";
      sub = scp.addParser(name, opts);
      sub.addArgument(["service"], {
        nargs: 1,
        help: "the name of service"
      });
      sub.addArgument(["username"], {
        nargs: "?",
        help: "username at that service"
      });
      return opts.aliases.concat([name]);
    };

    Command.prototype.prompt_remote_username = function(cb) {
      var err, ret, svc, ___iced_passed_deferral, __iced_deferrals, __iced_k,
        _this = this;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      svc = this.argv.service[0];
      err = null;
      (function(__iced_k) {
        if ((ret = _this.argv.username) == null) {
          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "src/command/prove.iced",
              funcname: "Command.prompt_remote_username"
            });
            prompt_remote_username(svc, __iced_deferrals.defer({
              assign_fn: (function() {
                return function() {
                  err = arguments[0];
                  return ret = arguments[1];
                };
              })(),
              lineno: 37
            }));
            __iced_deferrals._fulfill();
          })(__iced_k);
        } else {
          return __iced_k();
        }
      })(function() {
        return cb(err, ret);
      });
    };

    Command.prototype.run = function(cb) {
      var esc, r_username, ___iced_passed_deferral, __iced_deferrals, __iced_k,
        _this = this;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      esc = make_esc(cb, "Command::run");
      (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "src/command/prove.iced",
          funcname: "Command.run"
        });
        _this.prompt_remote_username(esc(__iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              return r_username = arguments[0];
            };
          })(),
          lineno: 45
        })));
        __iced_deferrals._fulfill();
      })(function() {
        return cb(new E.UnimplementedError("feature not implemented"));
      });
    };

    return Command;

  })(Base);

}).call(this);
