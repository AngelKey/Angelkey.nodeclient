// Generated by IcedCoffeeScript 1.7.0-a
(function() {
  var ArgumentParser, Base, Command, E, GithubProofGen, PackageJson, TwitterProofGen, User, add_option_dict, assert, iced, log, make_esc, prompt_remote_username, prompt_yn, req, __iced_k, __iced_k_noop, _ref, _ref1,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  iced = require('iced-coffee-script').iced;
  __iced_k = __iced_k_noop = function() {};

  Base = require('./base').Base;

  log = require('../log');

  ArgumentParser = require('argparse').ArgumentParser;

  add_option_dict = require('./argparse').add_option_dict;

  PackageJson = require('../package').PackageJson;

  E = require('../err').E;

  make_esc = require('iced-error').make_esc;

  _ref = require('../prompter'), prompt_yn = _ref.prompt_yn, prompt_remote_username = _ref.prompt_remote_username;

  _ref1 = require('../sigs'), TwitterProofGen = _ref1.TwitterProofGen, GithubProofGen = _ref1.GithubProofGen;

  User = require('../user').User;

  req = require('../req').req;

  assert = require('assert');

  exports.Command = Command = (function(_super) {
    __extends(Command, _super);

    function Command() {
      return Command.__super__.constructor.apply(this, arguments);
    }

    Command.prototype.TABLE = {
      twitter: TwitterProofGen,
      twtr: TwitterProofGen,
      git: GithubProofGen,
      github: GithubProofGen,
      gith: GithubProofGen
    };

    Command.prototype.use_session = function() {
      return true;
    };

    Command.prototype.add_subcommand_parser = function(scp) {
      var name, opts, sub;
      opts = {
        aliases: ["proof"],
        help: "add a proof of identity"
      };
      name = "prove";
      sub = scp.addParser(name, opts);
      sub.addArgument(["service"], {
        nargs: 1,
        help: "the name of service"
      });
      sub.addArgument(["remote_username"], {
        nargs: "?",
        help: "username at that service"
      });
      return opts.aliases.concat([name]);
    };

    Command.prototype.prompt_remote_username = function(cb) {
      var err, ret, svc, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      svc = this.argv.service[0];
      err = null;
      (function(_this) {
        return (function(__iced_k) {
          if ((ret = _this.argv.remote_username) == null) {
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "/Users/max/src/keybase-node-client/src/command/prove.iced",
                funcname: "Command.prompt_remote_username"
              });
              prompt_remote_username(svc, __iced_deferrals.defer({
                assign_fn: (function() {
                  return function() {
                    err = arguments[0];
                    return ret = arguments[1];
                  };
                })(),
                lineno: 48
              }));
              __iced_deferrals._fulfill();
            })(__iced_k);
          } else {
            return __iced_k();
          }
        });
      })(this)((function(_this) {
        return function() {
          _this.remote_username = ret;
          return cb(err, ret);
        };
      })(this));
    };

    Command.prototype.allocate_proof_gen = function(cb) {
      var err, klass, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      klass = this.TABLE[this.argv.service[0].toLowerCase()];
      assert.ok(klass != null);
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/max/src/keybase-node-client/src/command/prove.iced",
            funcname: "Command.allocate_proof_gen"
          });
          _this.me.gen_remote_proof_gen({
            klass: klass,
            remote_username: _this.remote_username
          }, __iced_deferrals.defer({
            assign_fn: (function(__slot_1) {
              return function() {
                err = arguments[0];
                return __slot_1.gen = arguments[1];
              };
            })(_this),
            lineno: 57
          }));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          return cb(err);
        };
      })(this));
    };

    Command.prototype.parse_args = function(cb) {
      var err, s;
      err = null;
      if (this.TABLE[(s = this.argv.service)] == null) {
        err = new E.UnknownServiceError("Unknown service: " + s);
      }
      return cb(err);
    };

    Command.prototype.poll_server = function(cb) {
      var arg, body, err, res, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      arg = {
        endpoint: "sig/posted",
        args: {
          proof_id: this.gen.proof_id
        }
      };
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/max/src/keybase-node-client/src/command/prove.iced",
            funcname: "Command.poll_server"
          });
          req(arg, __iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                err = arguments[0];
                return body = arguments[1];
              };
            })(),
            lineno: 75
          }));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          res = typeof err !== "undefined" && err !== null ? false : body.proof_ok;
          return cb(err, res);
        };
      })(this));
    };

    Command.prototype.handle_post = function(cb) {
      var err, esc, first, found, prompt, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      log.console.log("Please " + (this.gen.imperative_verb()) + " the following:");
      log.console.log("");
      log.console.log(this.gen.proof_text);
      log.console.log("");
      prompt = true;
      esc = make_esc(cb, "Command::prompt");
      found = false;
      first = true;
      (function(_this) {
        return (function(__iced_k) {
          var _results, _while;
          _results = [];
          _while = function(__iced_k) {
            var _break, _continue, _next;
            _break = function() {
              return __iced_k(_results);
            };
            _continue = function() {
              return iced.trampoline(function() {
                return _while(__iced_k);
              });
            };
            _next = function(__iced_next_arg) {
              _results.push(__iced_next_arg);
              return _continue();
            };
            if (!prompt) {
              return _break();
            } else {
              (function(__iced_k) {
                __iced_deferrals = new iced.Deferrals(__iced_k, {
                  parent: ___iced_passed_deferral,
                  filename: "/Users/max/src/keybase-node-client/src/command/prove.iced",
                  funcname: "Command.handle_post"
                });
                prompt_yn({
                  prompt: "Check " + (_this.gen.display_name()) + " " + (first ? '' : 'again ') + "now?",
                  defval: true
                }, esc(__iced_deferrals.defer({
                  assign_fn: (function() {
                    return function() {
                      return prompt = arguments[0];
                    };
                  })(),
                  lineno: 92
                })));
                __iced_deferrals._fulfill();
              })(function() {
                first = false;
                (function(__iced_k) {
                  if (prompt) {
                    (function(__iced_k) {
                      __iced_deferrals = new iced.Deferrals(__iced_k, {
                        parent: ___iced_passed_deferral,
                        filename: "/Users/max/src/keybase-node-client/src/command/prove.iced",
                        funcname: "Command.handle_post"
                      });
                      _this.poll_server(esc(__iced_deferrals.defer({
                        assign_fn: (function() {
                          return function() {
                            return found = arguments[0];
                          };
                        })(),
                        lineno: 95
                      })));
                      __iced_deferrals._fulfill();
                    })(function() {
                      prompt = !found;
                      return __iced_k(!found ? log.warn("Didn't find the posted proof.") : void 0);
                    });
                  } else {
                    return __iced_k();
                  }
                })(_next);
              });
            }
          };
          _while(__iced_k);
        });
      })(this)((function(_this) {
        return function() {
          err = found ? null : E.ProofNotAvailableError("Proof wasn't available; we'll keeping trying");
          return cb(err);
        };
      })(this));
    };

    Command.prototype.run = function(cb) {
      var esc, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      esc = make_esc(cb, "Command::run");
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/max/src/keybase-node-client/src/command/prove.iced",
            funcname: "Command.run"
          });
          _this.parse_args(esc(__iced_deferrals.defer({
            lineno: 106
          })));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "/Users/max/src/keybase-node-client/src/command/prove.iced",
              funcname: "Command.run"
            });
            _this.prompt_remote_username(esc(__iced_deferrals.defer({
              lineno: 107
            })));
            __iced_deferrals._fulfill();
          })(function() {
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "/Users/max/src/keybase-node-client/src/command/prove.iced",
                funcname: "Command.run"
              });
              User.load_me(esc(__iced_deferrals.defer({
                assign_fn: (function(__slot_1) {
                  return function() {
                    return __slot_1.me = arguments[0];
                  };
                })(_this),
                lineno: 108
              })));
              __iced_deferrals._fulfill();
            })(function() {
              (function(__iced_k) {
                __iced_deferrals = new iced.Deferrals(__iced_k, {
                  parent: ___iced_passed_deferral,
                  filename: "/Users/max/src/keybase-node-client/src/command/prove.iced",
                  funcname: "Command.run"
                });
                _this.allocate_proof_gen(esc(__iced_deferrals.defer({
                  lineno: 109
                })));
                __iced_deferrals._fulfill();
              })(function() {
                (function(__iced_k) {
                  __iced_deferrals = new iced.Deferrals(__iced_k, {
                    parent: ___iced_passed_deferral,
                    filename: "/Users/max/src/keybase-node-client/src/command/prove.iced",
                    funcname: "Command.run"
                  });
                  _this.gen.run(esc(__iced_deferrals.defer({
                    lineno: 110
                  })));
                  __iced_deferrals._fulfill();
                })(function() {
                  (function(__iced_k) {
                    __iced_deferrals = new iced.Deferrals(__iced_k, {
                      parent: ___iced_passed_deferral,
                      filename: "/Users/max/src/keybase-node-client/src/command/prove.iced",
                      funcname: "Command.run"
                    });
                    _this.handle_post(esc(__iced_deferrals.defer({
                      lineno: 111
                    })));
                    __iced_deferrals._fulfill();
                  })(function() {
                    log.info("Success!");
                    return cb(null);
                  });
                });
              });
            });
          });
        };
      })(this));
    };

    return Command;

  })(Base);

}).call(this);
