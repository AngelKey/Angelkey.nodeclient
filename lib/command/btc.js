// Generated by IcedCoffeeScript 1.7.1-c
(function() {
  var ACCTYPES, ArgumentParser, Base, C, Command, CryptocurrencySigGen, E, GenericWebSiteProofGen, GithubProofGen, PackageJson, S, ST, TwitterProofGen, User, add_option_dict, assert, bitcoyne, dict_union, fs, iced, log, make_esc, prompt_remote_name, prompt_yn, proofs, req, session, util, __iced_k, __iced_k_noop, _ref, _ref1,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  iced = require('iced-runtime').iced;
  __iced_k = __iced_k_noop = function() {};

  Base = require('./base').Base;

  log = require('../log');

  ArgumentParser = require('argparse').ArgumentParser;

  add_option_dict = require('./argparse').add_option_dict;

  C = require('../constants').constants;

  ST = C.signature_type;

  ACCTYPES = C.allowed_cryptocurrency_types;

  PackageJson = require('../package').PackageJson;

  E = require('../err').E;

  make_esc = require('iced-error').make_esc;

  _ref = require('../prompter'), prompt_yn = _ref.prompt_yn, prompt_remote_name = _ref.prompt_remote_name;

  _ref1 = require('../sigs'), GenericWebSiteProofGen = _ref1.GenericWebSiteProofGen, TwitterProofGen = _ref1.TwitterProofGen, GithubProofGen = _ref1.GithubProofGen;

  User = require('../user').User;

  req = require('../req').req;

  assert = require('assert');

  session = require('../session');

  S = require('../services');

  dict_union = require('../util').dict_union;

  util = require('util');

  fs = require('fs');

  proofs = require('keybase-proofs');

  bitcoyne = require('bitcoyne');

  CryptocurrencySigGen = require('./sigs').CryptocurrencySigGen;

  exports.Command = Command = (function(_super) {
    __extends(Command, _super);

    function Command() {
      return Command.__super__.constructor.apply(this, arguments);
    }

    Command.prototype.OPTS = {
      f: {
        alias: 'force',
        action: 'storeTrue',
        help: 'force overwrite, revoking the old for this address'
      }
    };

    Command.prototype.use_session = function() {
      return true;
    };

    Command.prototype.needs_configuration = function() {
      return true;
    };

    Command.prototype.add_subcommand_parse = function(scp) {
      var name, opts, sub;
      opts = {
        aliases: [],
        help: "add a signed cryptocurrency address to your profile"
      };
      name = "btc";
      sub = scp.addParser(name, opts);
      add_option_dict(sub, this.OPTS);
      sub.addArgument(["btc"], {
        nargs: 1
      });
      return opts.aliases.concat([name]);
    };

    Command.prototype.parse_args = function(cb) {
      var err, version, _ref2, _ref3;
      _ref2 = bitcoyne.address.check(this.argv.btc[0]), err = _ref2[0], (_ref3 = _ref2[1], version = _ref3.version);
      if (err != null) {
        err = new E.BadCryptocurrencyAddress("Bad BTC address: " + err.message);
      } else if (__indexOf.call(ACCTYPES, version) < 0) {
        err = new E.UnsupportedCryptocurrencyAddress("Only support bitcoin addresses at current");
      } else {
        this.address_version = version;
      }
      return cb(err);
    };

    Command.prototype.check_exists = function(cb) {
      var a, address_types, c, err, es, link, links, ok, prompt, s, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      address_types = this.me.sig_chain.table[ST.CRYPTOCURRENCY];
      links = (function() {
        var _i, _len, _ref2, _results;
        _ref2 = C.ACCTYPES;
        _results = [];
        for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
          c = _ref2[_i];
          if ((link = address_types[c]) != null) {
            _results.push(link);
          }
        }
        return _results;
      })();
      es = links.length === 1 ? '' : 'es';
      a = (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = sigs.length; _i < _len; _i++) {
          s = sigs[_i];
          _results.push(link.body().cryptocurrency.address);
        }
        return _results;
      })();
      prompt = "You already have registed address" + s + " " + a + "; revoke and proceed? ";
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/home/max/src/keybase/node-client/src/command/btc.iced",
            funcname: "Command.check_exists"
          });
          prompt_yn({
            prompt: prompt,
            defval: false
          }, __iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                err = arguments[0];
                return ok = arguments[1];
              };
            })(),
            lineno: 73
          }));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          if (typeof err !== "undefined" && err !== null) {

          } else if (!ok) {
            err = new E.ProofExistsError("Addresses already exist");
          } else {
            _this.revoke_sig_ids = (function() {
              var _i, _len, _results;
              _results = [];
              for (_i = 0, _len = links.length; _i < _len; _i++) {
                link = links[_i];
                _results.push(link.id);
              }
              return _results;
            })();
          }
          return cb(err);
        };
      })(this));
    };

    Command.prototype.allocate_proof_gen = function(cb) {
      var err, klass, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      klass = CryptocurrencySigGen;
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/home/max/src/keybase/node-client/src/command/btc.iced",
            funcname: "Command.allocate_proof_gen"
          });
          _this.me.gen_remote_proof_gen({
            klass: _this.klass,
            remote_name_normalized: _this.remote_name_normalized,
            supersede: _this.supersede
          }, __iced_deferrals.defer({
            assign_fn: (function(__slot_1) {
              return function() {
                err = arguments[0];
                return __slot_1.gen = arguments[1];
              };
            })(_this),
            lineno: 85
          }));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          return cb(err);
        };
      })(this));
    };

    Command.prototype.run = function(cb) {
      var esc, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      esc = make_esc(cb, "Command::run");
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/home/max/src/keybase/node-client/src/command/btc.iced",
            funcname: "Command.run"
          });
          _this.parse_args(esc(__iced_deferrals.defer({
            lineno: 92
          })));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "/home/max/src/keybase/node-client/src/command/btc.iced",
              funcname: "Command.run"
            });
            session.login(esc(__iced_deferrals.defer({
              lineno: 93
            })));
            __iced_deferrals._fulfill();
          })(function() {
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "/home/max/src/keybase/node-client/src/command/btc.iced",
                funcname: "Command.run"
              });
              User.load_me({
                secret: true
              }, esc(__iced_deferrals.defer({
                assign_fn: (function(__slot_1) {
                  return function() {
                    return __slot_1.me = arguments[0];
                  };
                })(_this),
                lineno: 94
              })));
              __iced_deferrals._fulfill();
            })(function() {
              (function(__iced_k) {
                __iced_deferrals = new iced.Deferrals(__iced_k, {
                  parent: ___iced_passed_deferral,
                  filename: "/home/max/src/keybase/node-client/src/command/btc.iced",
                  funcname: "Command.run"
                });
                _this.check_exists(esc(__iced_deferrals.defer({
                  lineno: 95
                })));
                __iced_deferrals._fulfill();
              })(function() {
                (function(__iced_k) {
                  __iced_deferrals = new iced.Deferrals(__iced_k, {
                    parent: ___iced_passed_deferral,
                    filename: "/home/max/src/keybase/node-client/src/command/btc.iced",
                    funcname: "Command.run"
                  });
                  _this.allocate_proof_gen(esc(__iced_deferrals.defer({
                    lineno: 96
                  })));
                  __iced_deferrals._fulfill();
                })(function() {
                  (function(__iced_k) {
                    __iced_deferrals = new iced.Deferrals(__iced_k, {
                      parent: ___iced_passed_deferral,
                      filename: "/home/max/src/keybase/node-client/src/command/btc.iced",
                      funcname: "Command.run"
                    });
                    _this.gen.run(esc(__iced_deferrals.defer({
                      lineno: 97
                    })));
                    __iced_deferrals._fulfill();
                  })(function() {
                    (function(__iced_k) {
                      __iced_deferrals = new iced.Deferrals(__iced_k, {
                        parent: ___iced_passed_deferral,
                        filename: "/home/max/src/keybase/node-client/src/command/btc.iced",
                        funcname: "Command.run"
                      });
                      _this.handle_post(esc(__iced_deferrals.defer({
                        lineno: 98
                      })));
                      __iced_deferrals._fulfill();
                    })(function() {
                      return cb(null);
                    });
                  });
                });
              });
            });
          });
        };
      })(this));
    };

    return Command;

  })(Base);

}).call(this);
