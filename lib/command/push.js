// Generated by IcedCoffeeScript 1.7.0-a
(function() {
  var ArgumentParser, Base, Command, E, KeyManager, KeybasePushProofGen, PackageJson, add_option_dict, athrow, env, iced, key_select, log, make_esc, prompt_for_int, prompt_passphrase, req, session, __iced_k, __iced_k_noop,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  iced = require('iced-coffee-script').iced;
  __iced_k = __iced_k_noop = function() {};

  Base = require('./base').Base;

  log = require('../log');

  ArgumentParser = require('argparse').ArgumentParser;

  add_option_dict = require('./argparse').add_option_dict;

  PackageJson = require('../package').PackageJson;

  session = require('../session');

  make_esc = require('iced-error').make_esc;

  prompt_for_int = require('../prompter').prompt_for_int;

  log = require('../log');

  key_select = require('../keyselector').key_select;

  KeybasePushProofGen = require('../sigs').KeybasePushProofGen;

  req = require('../req');

  env = require('../env').env;

  prompt_passphrase = require('../prompter').prompt_passphrase;

  KeyManager = require('../keymanager').KeyManager;

  E = require('../err').E;

  athrow = require('iced-utils').util.athrow;

  exports.Command = Command = (function(_super) {
    __extends(Command, _super);

    function Command() {
      return Command.__super__.constructor.apply(this, arguments);
    }

    Command.prototype.OPTS = {
      g: {
        alias: "gen",
        action: "storeTrue",
        help: "generate a new key"
      },
      s: {
        alias: "push-secret",
        action: "storeTrue",
        help: "push the secret key to the server"
      }
    };

    Command.prototype.use_session = function() {
      return true;
    };

    Command.prototype.add_subcommand_parser = function(scp) {
      var name, opts, sub;
      opts = {
        aliases: [],
        help: "push a PGP key from the client to the server"
      };
      name = "push";
      sub = scp.addParser(name, opts);
      add_option_dict(sub, this.OPTS);
      sub.addArgument(["search"], {
        nargs: '?'
      });
      return opts.aliases.concat([name]);
    };

    Command.prototype.sign = function(cb) {
      var eng, err, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      eng = new KeybasePushProofGen({
        km: this.key
      });
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/max/src/keybase-node-client/src/command/push.iced",
            funcname: "Command.sign"
          });
          eng.run(__iced_deferrals.defer({
            assign_fn: (function(__slot_1) {
              return function() {
                err = arguments[0];
                return __slot_1.sig = arguments[1];
              };
            })(_this),
            lineno: 54
          }));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          return cb(err);
        };
      })(this));
    };

    Command.prototype.push = function(cb) {
      var args, err, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      args = {
        is_primary: 1,
        sig: this.sig.pgp,
        sig_id_base: this.sig.id,
        sig_id_short: this.sig.short_id,
        public_key: this.key.key_data().toString('utf8')
      };
      if (this.p3skb) {
        args.private_key = this.p3skb;
      }
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/max/src/keybase-node-client/src/command/push.iced",
            funcname: "Command.push"
          });
          req.post({
            endpoint: "key/add",
            args: args
          }, __iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                return err = arguments[0];
              };
            })(),
            lineno: 67
          }));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          return cb(err);
        };
      })(this));
    };

    Command.prototype.package_secret_key = function(cb) {
      var err, p3skb, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      log.debug("+ package secret key");
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/max/src/keybase-node-client/src/command/push.iced",
            funcname: "Command.package_secret_key"
          });
          _this.keymanager.export_to_p3skb(__iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                err = arguments[0];
                return p3skb = arguments[1];
              };
            })(),
            lineno: 74
          }));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          if (typeof err === "undefined" || err === null) {
            _this.p3skb = p3skb;
          }
          log.debug("- package secret key -> " + (typeof err !== "undefined" && err !== null ? err.message : void 0));
          return cb(err);
        };
      })(this));
    };

    Command.prototype.prompt_passphrase = function(cb) {
      var args, err, pp, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      args = {
        prompt: "Your key passphrase (can be the same as your login passphrase)",
        confirm: {
          prompt: "Repeat to confirm"
        }
      };
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/max/src/keybase-node-client/src/command/push.iced",
            funcname: "Command.prompt_passphrase"
          });
          prompt_passphrase(args, __iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                err = arguments[0];
                return pp = arguments[1];
              };
            })(),
            lineno: 85
          }));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          return cb(err, pp);
        };
      })(this));
    };

    Command.prototype.do_key_gen = function(cb) {
      var esc, key, passphrase, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      esc = make_esc(cb, "do_key_gen");
      if (this.argv.search != null) {
        athrow(new E.ArgsError("Cannot provide a search query with then --gen flag"), esc(__iced_deferrals.defer({
          lineno: 93
        })));
      }
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/max/src/keybase-node-client/src/command/push.iced",
            funcname: "Command.do_key_gen"
          });
          _this.prompt_passphrase(esc(__iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                return passphrase = arguments[0];
              };
            })(),
            lineno: 94
          })));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          log.debug("+ generating public/private keypair");
          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "/Users/max/src/keybase-node-client/src/command/push.iced",
              funcname: "Command.do_key_gen"
            });
            KeyManager.generate({
              passphrase: passphrase
            }, esc(__iced_deferrals.defer({
              assign_fn: (function(__slot_1) {
                return function() {
                  return __slot_1.keymanager = arguments[0];
                };
              })(_this),
              lineno: 96
            })));
            __iced_deferrals._fulfill();
          })(function() {
            log.debug("- generated");
            log.debug("+ loading public key");
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "/Users/max/src/keybase-node-client/src/command/push.iced",
                funcname: "Command.do_key_gen"
              });
              _this.keymanager.load_public(esc(__iced_deferrals.defer({
                assign_fn: (function() {
                  return function() {
                    return key = arguments[0];
                  };
                })(),
                lineno: 99
              })));
              __iced_deferrals._fulfill();
            })(function() {
              log.debug("- loaded public key");
              return cb(null, key);
            });
          });
        };
      })(this));
    };

    Command.prototype.run = function(cb) {
      var esc, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      esc = make_esc(cb, "run");
      (function(_this) {
        return (function(__iced_k) {
          if (_this.argv.gen) {
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "/Users/max/src/keybase-node-client/src/command/push.iced",
                funcname: "Command.run"
              });
              _this.do_key_gen(esc(__iced_deferrals.defer({
                assign_fn: (function(__slot_1) {
                  return function() {
                    return __slot_1.key = arguments[0];
                  };
                })(_this),
                lineno: 108
              })));
              __iced_deferrals._fulfill();
            })(__iced_k);
          } else {
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "/Users/max/src/keybase-node-client/src/command/push.iced",
                funcname: "Command.run"
              });
              key_select({
                username: env().get_username(),
                query: _this.argv.search
              }, esc(__iced_deferrals.defer({
                assign_fn: (function(__slot_1) {
                  return function() {
                    return __slot_1.key = arguments[0];
                  };
                })(_this),
                lineno: 110
              })));
              __iced_deferrals._fulfill();
            })(__iced_k);
          }
        });
      })(this)((function(_this) {
        return function() {
          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "/Users/max/src/keybase-node-client/src/command/push.iced",
              funcname: "Command.run"
            });
            session.login(esc(__iced_deferrals.defer({
              lineno: 111
            })));
            __iced_deferrals._fulfill();
          })(function() {
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "/Users/max/src/keybase-node-client/src/command/push.iced",
                funcname: "Command.run"
              });
              _this.sign(esc(__iced_deferrals.defer({
                lineno: 112
              })));
              __iced_deferrals._fulfill();
            })(function() {
              (function(__iced_k) {
                if (_this.argv.push_secret && (_this.keymanager != null)) {
                  (function(__iced_k) {
                    __iced_deferrals = new iced.Deferrals(__iced_k, {
                      parent: ___iced_passed_deferral,
                      filename: "/Users/max/src/keybase-node-client/src/command/push.iced",
                      funcname: "Command.run"
                    });
                    _this.package_secret_key(esc(__iced_deferrals.defer({
                      lineno: 113
                    })));
                    __iced_deferrals._fulfill();
                  })(__iced_k);
                } else {
                  return __iced_k();
                }
              })(function() {
                (function(__iced_k) {
                  __iced_deferrals = new iced.Deferrals(__iced_k, {
                    parent: ___iced_passed_deferral,
                    filename: "/Users/max/src/keybase-node-client/src/command/push.iced",
                    funcname: "Command.run"
                  });
                  _this.push(esc(__iced_deferrals.defer({
                    lineno: 114
                  })));
                  __iced_deferrals._fulfill();
                })(function() {
                  log.info("success!");
                  return cb(null);
                });
              });
            });
          });
        };
      })(this));
    };

    return Command;

  })(Base);

}).call(this);
