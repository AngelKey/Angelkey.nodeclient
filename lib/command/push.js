// Generated by IcedCoffeeScript 1.6.3-g
(function() {
  var ArgumentParser, Base, BufferOutStream, Command, PackageJson, add_option_dict, gpg, iced, log, make_esc, session, __iced_k, __iced_k_noop, _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  iced = require('iced-coffee-script/lib/coffee-script/iced').runtime;
  __iced_k = __iced_k_noop = function() {};

  Base = require('./base').Base;

  log = require('../log');

  ArgumentParser = require('argparse').ArgumentParser;

  add_option_dict = require('./argparse').add_option_dict;

  PackageJson = require('../package').PackageJson;

  gpg = require('../gpg').gpg;

  BufferOutStream = require('../stream').BufferOutStream;

  session = require('../session');

  make_esc = require('iced-error').make_esc;

  exports.Command = Command = (function(_super) {
    __extends(Command, _super);

    function Command() {
      _ref = Command.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    Command.prototype.use_session = function() {
      return true;
    };

    Command.prototype.add_subcommand_parser = function(scp) {
      var name, opts, sub;
      opts = {
        aliases: [],
        help: "push a PGP key from the client to the server"
      };
      name = "push";
      sub = scp.addParser(name, opts);
      sub.addArgument(["search"], {
        nargs: 1
      });
      return opts.aliases.concat([name]);
    };

    Command.prototype.query_keys = function(cb) {
      var err, out, ___iced_passed_deferral, __iced_deferrals, __iced_k,
        _this = this;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "src/command/push.iced",
          funcname: "Command.query_keys"
        });
        gpg({
          args: ["-k", _this.argv.search[0]]
        }, __iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              err = arguments[0];
              return out = arguments[1];
            };
          })(),
          lineno: 32
        }));
        __iced_deferrals._fulfill();
      })(function() {
        console.log(err);
        console.log(out.toString());
        return cb(err);
      });
    };

    Command.prototype.run = function(cb) {
      var esc, ___iced_passed_deferral, __iced_deferrals, __iced_k,
        _this = this;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      esc = make_esc(cb, "run");
      (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "src/command/push.iced",
          funcname: "Command.run"
        });
        _this.query_keys(esc(__iced_deferrals.defer({
          lineno: 41
        })));
        __iced_deferrals._fulfill();
      })(function() {
        (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "src/command/push.iced",
            funcname: "Command.run"
          });
          session.login(esc(__iced_deferrals.defer({
            lineno: 42
          })));
          __iced_deferrals._fulfill();
        })(function() {
          console.log(session.logged_in());
          return cb(null);
        });
      });
    };

    return Command;

  })(Base);

}).call(this);
