// Generated by IcedCoffeeScript 1.6.3-g
(function() {
  var ArgumentParser, Base, BufferOutStream, Command, PackageJson, add_option_dict, find_fingerprint, gpg, iced, log, log_10, make_esc, pad, prompt_for_int, repeat, session, spc, __iced_k, __iced_k_noop, _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  iced = require('iced-coffee-script/lib/coffee-script/iced').runtime;
  __iced_k = __iced_k_noop = function() {};

  Base = require('./base').Base;

  log = require('../log');

  ArgumentParser = require('argparse').ArgumentParser;

  add_option_dict = require('./argparse').add_option_dict;

  PackageJson = require('../package').PackageJson;

  gpg = require('../gpg').gpg;

  BufferOutStream = require('../stream').BufferOutStream;

  session = require('../session');

  make_esc = require('iced-error').make_esc;

  prompt_for_int = require('../prompter').prompt_for_int;

  find_fingerprint = function(raw) {
    var m, x;
    x = /^pub\s+[0-9]{4}R\/([0-9A-F]{8}) /;
    if ((m = raw.match(x))) {
      return m[1];
    } else {
      return null;
    }
  };

  log_10 = function(x) {
    var val;
    val = 0;
    while (x > 0) {
      val++;
      x = Math.floor(x / 10);
    }
    return val;
  };

  pad = function(i, places) {
    var n;
    n = places - (log_10(i));
    if (n < 0) {
      n = 0;
    }
    return spc(n) + i;
  };

  spc = function(i) {
    return repeat(' ', i);
  };

  repeat = function(c, i) {
    return ((function() {
      var _i, _results;
      _results = [];
      for (_i = 0; 0 <= i ? _i < i : _i > i; 0 <= i ? _i++ : _i--) {
        _results.push(c);
      }
      return _results;
    })()).join('');
  };

  exports.Command = Command = (function(_super) {
    __extends(Command, _super);

    function Command() {
      _ref = Command.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    Command.prototype.use_session = function() {
      return true;
    };

    Command.prototype.add_subcommand_parser = function(scp) {
      var name, opts, sub;
      opts = {
        aliases: [],
        help: "push a PGP key from the client to the server"
      };
      name = "push";
      sub = scp.addParser(name, opts);
      sub.addArgument(["search"], {
        nargs: '?'
      });
      return opts.aliases.concat([name]);
    };

    Command.prototype.query_keys = function(cb) {
      var args, err, f, keys, out, r, raw, v, ___iced_passed_deferral, __iced_deferrals, __iced_k,
        _this = this;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      this.keys = null;
      args = ["-k"];
      if ((v = this.argv.search != null).length > 0) {
        args.push((this.search = v[0]));
      } else {
        this.search = null;
      }
      (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "src/command/push.iced",
          funcname: "Command.query_keys"
        });
        gpg({
          args: args
        }, __iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              err = arguments[0];
              return out = arguments[1];
            };
          })(),
          lineno: 60
        }));
        __iced_deferrals._fulfill();
      })(function() {
        if (typeof err === "undefined" || err === null) {
          raw = out.toString().split("\n\n");
          keys = (function() {
            var _i, _len, _results;
            _results = [];
            for (_i = 0, _len = raw.length; _i < _len; _i++) {
              r = raw[_i];
              if ((f = find_fingerprint(r))) {
                _results.push({
                  lines: r.split("\n"),
                  fingerprint: f
                });
              }
            }
            return _results;
          })();
        }
        return cb(err, keys);
      });
    };

    Command.prototype.longest_line = function(keys) {
      var key, l, line, longest, _i, _j, _len, _len1, _ref1;
      longest = 0;
      for (_i = 0, _len = keys.length; _i < _len; _i++) {
        key = keys[_i];
        _ref1 = key.lines;
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          line = _ref1[_j];
          if ((l = line.length) > longest) {
            longest = l;
          }
        }
      }
      return longest;
    };

    Command.prototype.select_key_menu = function(keys) {
      var i, j, k, line, lines, longest, width, _i, _j, _len, _len1, _ref1, _results;
      width = log_10(keys.length + 1);
      longest = this.longest_line(keys) + width + 3;
      _results = [];
      for (i = _i = 0, _len = keys.length; _i < _len; i = ++_i) {
        k = keys[i];
        lines = k.lines;
        j = i + 1;
        console.log(("(" + (pad(j, width)) + ") ") + lines[0]);
        _ref1 = lines.slice(1);
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          line = _ref1[_j];
          console.log(spc(width + 3) + line);
        }
        _results.push(console.log(repeat('~', longest)));
      }
      return _results;
    };

    Command.prototype.select_key = function(keys, cb) {
      var err, out, sel, ___iced_passed_deferral, __iced_deferrals, __iced_k,
        _this = this;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      if (this.search) {
        console.log("Multiple keys were found that matched '" + this.search + "':\n");
      } else {
        console.log("Multiple keys found:");
      }
      this.select_key_menu(keys);
      console.log("");
      (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "src/command/push.iced",
          funcname: "Command.select_key"
        });
        prompt_for_int(1, keys.length, __iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              err = arguments[0];
              return sel = arguments[1];
            };
          })(),
          lineno: 99
        }));
        __iced_deferrals._fulfill();
      })(function() {
        console.log(sel);
        out = typeof err !== "undefined" && err !== null ? null : keys[sel - 1];
        if (out != null) {
          console.log("Picked key: " + out.fingerprint);
        }
        return cb(err, out);
      });
    };

    Command.prototype.run = function(cb) {
      var esc, key, keys, ___iced_passed_deferral, __iced_deferrals, __iced_k,
        _this = this;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      esc = make_esc(cb, "run");
      (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "src/command/push.iced",
          funcname: "Command.run"
        });
        _this.query_keys(esc(__iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              return keys = arguments[0];
            };
          })(),
          lineno: 110
        })));
        __iced_deferrals._fulfill();
      })(function() {
        (function(__iced_k) {
          if (keys.length > 1) {
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "src/command/push.iced",
                funcname: "Command.run"
              });
              _this.select_key(keys, esc(__iced_deferrals.defer({
                assign_fn: (function() {
                  return function() {
                    return key = arguments[0];
                  };
                })(),
                lineno: 112
              })));
              __iced_deferrals._fulfill();
            })(__iced_k);
          } else {
            return __iced_k(key = keys[0]);
          }
        })(function() {
          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "src/command/push.iced",
              funcname: "Command.run"
            });
            session.login(esc(__iced_deferrals.defer({
              lineno: 115
            })));
            __iced_deferrals._fulfill();
          })(function() {
            console.log(session.logged_in());
            return cb(null);
          });
        });
      });
    };

    return Command;

  })(Base);

}).call(this);
