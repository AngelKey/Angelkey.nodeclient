// Generated by IcedCoffeeScript 1.7.1-a
(function() {
  var Command, E, add_option_dict, env, iced, key_select, make_esc, pg, __iced_k, __iced_k_noop,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  iced = require('iced-coffee-script').iced;
  __iced_k = __iced_k_noop = function() {};

  pg = require('./push_and_keygen');

  E = require('../err').E;

  make_esc = require('iced-error').make_esc;

  add_option_dict = require('./argparse').add_option_dict;

  env = require('../env').env;

  key_select = require('../keyselector').key_select;

  exports.Command = Command = (function(_super) {
    __extends(Command, _super);

    function Command() {
      return Command.__super__.constructor.apply(this, arguments);
    }

    Command.prototype.OPTS = {
      g: {
        alias: "gen",
        action: "storeTrue",
        help: "generate a new key"
      }
    };

    Command.prototype.add_subcommand_parser = function(scp) {
      var name, opts, sub;
      opts = {
        aliases: [],
        help: "push a PGP key from the client to the server"
      };
      name = "push";
      sub = scp.addParser(name, opts);
      add_option_dict(sub, this.OPTS);
      add_option_dict(sub, pg.Command.OPTS);
      sub.addArgument(["search"], {
        nargs: '?'
      });
      return opts.aliases.concat([name]);
    };

    Command.prototype.check_args = function(cb) {
      var err;
      err = null;
      if (this.argv.search && this.argv.gen) {
        err = new E.ArgsError("Can't both search and generate; pick one or the other!");
      }
      return cb(err);
    };

    Command.prototype.prepare_key = function(cb) {
      var esc, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      esc = make_esc(cb, "Command::prepare_key");
      (function(_this) {
        return (function(__iced_k) {
          if (_this.argv.gen) {
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "/Users/max/src/keybase-node-client/src/command/push.iced",
                funcname: "Command.prepare_key"
              });
              _this.do_key_gen(esc(__iced_deferrals.defer({
                lineno: 44
              })));
              __iced_deferrals._fulfill();
            })(__iced_k);
          } else {
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "/Users/max/src/keybase-node-client/src/command/push.iced",
                funcname: "Command.prepare_key"
              });
              key_select({
                username: env().get_username(),
                query: _this.argv.search
              }, esc(__iced_deferrals.defer({
                assign_fn: (function(__slot_1) {
                  return function() {
                    return __slot_1.key = arguments[0];
                  };
                })(_this),
                lineno: 46
              })));
              __iced_deferrals._fulfill();
            })(__iced_k);
          }
        });
      })(this)((function(_this) {
        return function() {
          return cb(null);
        };
      })(this));
    };

    return Command;

  })(pg.Command);

}).call(this);
