// Generated by IcedCoffeeScript 1.6.3-g
(function() {
  var Base, Config, E, EscOk, Infile, Outfile, PasswordManager, add_option_dict, base58, constants, crypto, fs, iced, log, myfs, pick, rmkey, __iced_k, __iced_k_noop, _ref,
    __slice = [].slice;

  iced = require('iced-coffee-script/lib/coffee-script/iced').runtime;
  __iced_k = __iced_k_noop = function() {};

  Config = require('../config').Config;

  log = require('../log');

  PasswordManager = require('../pw').PasswordManager;

  base58 = require('../basex').base58;

  crypto = require('crypto');

  myfs = require('../fs');

  fs = require('fs');

  rmkey = require('../util').rmkey;

  add_option_dict = require('./argparse').add_option_dict;

  _ref = require('../file'), Infile = _ref.Infile, Outfile = _ref.Outfile;

  EscOk = require('iced-error').EscOk;

  E = require('../err').E;

  constants = require('../constants').constants;

  pick = function() {
    var a, args, _i, _len;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    for (_i = 0, _len = args.length; _i < _len; _i++) {
      a = args[_i];
      if (a != null) {
        return a;
      }
    }
    return null;
  };

  exports.Base = Base = (function() {
    function Base() {
      this.config = new Config();
      this.pwmgr = new PasswordManager();
    }

    Base.prototype.set_argv = function(a) {
      return this.argv = a;
    };

    Base.OPTS = {
      p: {
        alias: 'password',
        help: 'password used for encryption / decryption'
      },
      c: {
        alias: 'config',
        help: 'a configuration file (rather than ~/.keybase/conf)'
      },
      i: {
        alias: "interactive",
        action: "storeTrue",
        help: "interactive mode"
      },
      port: {
        help: 'which port to connect to'
      },
      "no-tls": {
        action: "storeTrue",
        help: "turn off HTTPS/TLS (on by default)"
      },
      "host": {
        help: 'which host to connect to'
      },
      "api-uri-prefix": {
        help: "the API "
      }
    };

    Base.prototype.need_aws = function() {
      return true;
    };

    Base.prototype.init = function(cb) {
      var fc, ok, ___iced_passed_deferral, __iced_deferrals, __iced_k,
        _this = this;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      (function(__iced_k) {
        if (_this.config.loaded) {
          return __iced_k(ok = true);
        } else {
          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "src/command/base.iced",
              funcname: "Base.init"
            });
            _this.config.find(_this.argv.config, __iced_deferrals.defer({
              assign_fn: (function() {
                return function() {
                  return fc = arguments[0];
                };
              })(),
              lineno: 72
            }));
            __iced_deferrals._fulfill();
          })(function() {
            (function(__iced_k) {
              if (fc) {
                (function(__iced_k) {
                  __iced_deferrals = new iced.Deferrals(__iced_k, {
                    parent: ___iced_passed_deferral,
                    filename: "src/command/base.iced",
                    funcname: "Base.init"
                  });
                  _this.config.load(__iced_deferrals.defer({
                    assign_fn: (function() {
                      return function() {
                        return ok = arguments[0];
                      };
                    })(),
                    lineno: 74
                  }));
                  __iced_deferrals._fulfill();
                })(__iced_k);
              } else {
                return __iced_k(_this.need_aws() ? (log.error("cannot find config file " + _this.config.filename + "; needed for aws"), ok = false) : void 0);
              }
            })(__iced_k);
          });
        }
      })(function() {
        if (ok) {
          ok = _this._init_pwmgr();
        }
        return cb(ok);
      });
    };

    Base.prototype.make_outfile = function(cb) {
      var err, file, ___iced_passed_deferral, __iced_deferrals, __iced_k,
        _this = this;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "src/command/base.iced",
          funcname: "Base.make_outfile"
        });
        Outfile.open({
          target: _this.output_filename()
        }, __iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              err = arguments[0];
              return file = arguments[1];
            };
          })(),
          lineno: 85
        }));
        __iced_deferrals._fulfill();
      })(function() {
        return cb(err, file);
      });
    };

    Base.prototype.init2 = function(_arg, cb) {
      var enc, esc, infile, new_key, outfile, ___iced_passed_deferral, __iced_deferrals, __iced_k,
        _this = this;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      infile = _arg.infile, outfile = _arg.outfile, enc = _arg.enc;
      esc = new EscOk(cb);
      (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "src/command/base.iced",
          funcname: "Base.init2"
        });
        _this.init(esc.check_ok(__iced_deferrals.defer({
          lineno: 92
        }), E.InitError));
        __iced_deferrals._fulfill();
      })(function() {
        (function(__iced_k) {
          if (infile) {
            _this.infn = _this.argv.file[0];
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "src/command/base.iced",
                funcname: "Base.init2"
              });
              Infile.open(_this.infn, esc.check_err(__iced_deferrals.defer({
                assign_fn: (function(__slot_1) {
                  return function() {
                    return __slot_1.infile = arguments[0];
                  };
                })(_this),
                lineno: 95
              })));
              __iced_deferrals._fulfill();
            })(__iced_k);
          } else {
            return __iced_k();
          }
        })(function() {
          (function(__iced_k) {
            if (outfile) {
              (function(__iced_k) {
                __iced_deferrals = new iced.Deferrals(__iced_k, {
                  parent: ___iced_passed_deferral,
                  filename: "src/command/base.iced",
                  funcname: "Base.init2"
                });
                _this.make_outfile(esc.check_err(__iced_deferrals.defer({
                  assign_fn: (function(__slot_1) {
                    return function() {
                      return __slot_1.outfile = arguments[0];
                    };
                  })(_this),
                  lineno: 97
                })));
                __iced_deferrals._fulfill();
              })(__iced_k);
            } else {
              return __iced_k();
            }
          })(function() {
            (function(__iced_k) {
              if (enc && (_this.crypto_mode() !== constants.crypto_mode.NONE)) {
                new_key = _this.crypto_mode() === constants.crypto_mode.ENC;
                (function(__iced_k) {
                  __iced_deferrals = new iced.Deferrals(__iced_k, {
                    parent: ___iced_passed_deferral,
                    filename: "src/command/base.iced",
                    funcname: "Base.init2"
                  });
                  _this.pwmgr.derive_keys(new_key, esc.check_non_null(__iced_deferrals.defer({
                    assign_fn: (function(__slot_1) {
                      return function() {
                        return __slot_1.keys = arguments[0];
                      };
                    })(_this),
                    lineno: 100
                  })));
                  __iced_deferrals._fulfill();
                })(__iced_k);
              } else {
                return __iced_k();
              }
            })(function() {
              _this.eng = _this.make_eng({
                keys: _this.keys,
                infile: _this.infile,
                outfile: _this.outfile
              });
              return cb(true);
            });
          });
        });
      });
    };

    Base.prototype._init_pwmgr = function() {
      var pwopts;
      pwopts = {
        password: this.password(),
        salt: this.salt_or_email(),
        interactive: this.argv.interactive
      };
      return this.pwmgr.init(pwopts);
    };

    Base.prototype.password = function() {
      return pick(this.argv.password, this.config.password());
    };

    return Base;

  })();

}).call(this);
