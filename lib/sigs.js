// Generated by IcedCoffeeScript 1.6.3-g
(function() {
  var BaseSigGen, KeybaseProofGen, KeybasePushProofGen, SignatureEngine, TrackerProofGen, constants, env, iced, log, make_esc, proofs, req, session, __iced_k, __iced_k_noop, _ref, _ref1,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  iced = require('iced-coffee-script/lib/coffee-script/iced').runtime;
  __iced_k = __iced_k_noop = function() {};

  proofs = require('keybase-proofs');

  make_esc = require('iced-error').make_esc;

  req = require('./req');

  SignatureEngine = require('./hilev').SignatureEngine;

  constants = require('./constants').constants;

  session = require('./session');

  env = require('./env').env;

  log = require('./log');

  BaseSigGen = (function() {
    function BaseSigGen(_arg) {
      this.km = _arg.km;
    }

    BaseSigGen.prototype._get_seqno_type = function() {
      return "PUBLIC";
    };

    BaseSigGen.prototype._get_announce_number = function(cb) {
      var body, err, type, ___iced_passed_deferral, __iced_deferrals, __iced_k,
        _this = this;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      type = this._get_seqno_type();
      (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "src/sigs.iced",
          funcname: "BaseSigGen._get_announce_number"
        });
        req.get({
          endpoint: "sig/next_seqno",
          args: {
            type: type
          }
        }, __iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              err = arguments[0];
              return body = arguments[1];
            };
          })(),
          lineno: 24
        }));
        __iced_deferrals._fulfill();
      })(function() {
        if (typeof err === "undefined" || err === null) {
          _this.seqno = body.seqno;
          _this.prev = body.prev;
        }
        return cb(err);
      });
    };

    BaseSigGen.prototype._get_binding_eng = function() {
      return this._make_binding_eng({
        sig_eng: new SignatureEngine({
          km: this.km
        }),
        seqno: this.seqno,
        prev: this.prev,
        host: constants.canonical_host,
        user: {
          local: {
            uid: env().get_uid(),
            username: env().get_username()
          }
        }
      });
    };

    BaseSigGen.prototype._do_signature = function(cb) {
      var eng, err, ___iced_passed_deferral, __iced_deferrals, __iced_k,
        _this = this;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      eng = this._get_binding_eng();
      (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "src/sigs.iced",
          funcname: "BaseSigGen._do_signature"
        });
        eng.generate(__iced_deferrals.defer({
          assign_fn: (function(__slot_1) {
            return function() {
              err = arguments[0];
              return __slot_1.sig = arguments[1];
            };
          })(_this),
          lineno: 48
        }));
        __iced_deferrals._fulfill();
      })(function() {
        return cb(err);
      });
    };

    BaseSigGen.prototype._v_modify_store_arg = function(arg) {};

    BaseSigGen.prototype._get_api_endpoint = function() {
      return "sig/post";
    };

    BaseSigGen.prototype._store_signature = function(cb) {
      var args, body, endpoint, err, ___iced_passed_deferral, __iced_deferrals, __iced_k,
        _this = this;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      args = {
        sig: this.sig.pgp,
        sig_id_base: this.sig.id,
        sig_id_short: this.sig.short_id,
        is_remote_proof: true
      };
      this._v_modify_store_arg(args);
      log.debug("+ storing signature:");
      log.debug("| writing to " + endpoint);
      log.debug("| with args " + (JSON.stringify(args)));
      endpoint = this._get_api_endpoint();
      (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "src/sigs.iced",
          funcname: "BaseSigGen._store_signature"
        });
        req.post({
          endpoint: endpoint,
          args: args
        }, __iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              err = arguments[0];
              return body = arguments[1];
            };
          })(),
          lineno: 69
        }));
        __iced_deferrals._fulfill();
      })(function() {
        if (typeof err === "undefined" || err === null) {
          _this.proof_text = body.proof_text;
          _this.proof_id = body.proof_id;
        }
        log.debug("- stored signature (err = " + (typeof err !== "undefined" && err !== null ? err.message : void 0) + ")");
        return cb(err);
      });
    };

    BaseSigGen.prototype.run = function(cb) {
      var esc, ___iced_passed_deferral, __iced_deferrals, __iced_k,
        _this = this;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      esc = make_esc(cb, "BaseSigGen::run");
      (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "src/sigs.iced",
          funcname: "BaseSigGen.run"
        });
        _this._get_announce_number(esc(__iced_deferrals.defer({
          lineno: 80
        })));
        __iced_deferrals._fulfill();
      })(function() {
        (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "src/sigs.iced",
            funcname: "BaseSigGen.run"
          });
          _this._do_signature(esc(__iced_deferrals.defer({
            lineno: 81
          })));
          __iced_deferrals._fulfill();
        })(function() {
          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "src/sigs.iced",
              funcname: "BaseSigGen.run"
            });
            _this._store_signature(esc(__iced_deferrals.defer({
              lineno: 82
            })));
            __iced_deferrals._fulfill();
          })(function() {
            return cb(null, _this.sig);
          });
        });
      });
    };

    return BaseSigGen;

  })();

  exports.KeybaseProofGen = KeybaseProofGen = (function(_super) {
    __extends(KeybaseProofGen, _super);

    function KeybaseProofGen() {
      _ref = KeybaseProofGen.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    KeybaseProofGen.prototype._v_modify_store_arg = function(arg) {
      arg.type = "web_service_binding.keybase";
      return arg.is_remote_proof = false;
    };

    KeybaseProofGen.prototype._make_binding_eng = function(arg) {
      return new proofs.KeybaseBinding(arg);
    };

    return KeybaseProofGen;

  })(BaseSigGen);

  exports.KeybasePushProofGen = KeybasePushProofGen = (function(_super) {
    __extends(KeybasePushProofGen, _super);

    function KeybasePushProofGen() {
      _ref1 = KeybasePushProofGen.__super__.constructor.apply(this, arguments);
      return _ref1;
    }

    KeybasePushProofGen.prototype._store_signature = function(cb) {
      return cb(null);
    };

    KeybasePushProofGen.prototype._make_binding_eng = function(arg) {
      return new proofs.KeybaseBinding(arg);
    };

    return KeybasePushProofGen;

  })(BaseSigGen);

  exports.TrackerProofGen = TrackerProofGen = (function(_super) {
    __extends(TrackerProofGen, _super);

    function TrackerProofGen(_arg) {
      var km;
      km = _arg.km, this.prev = _arg.prev, this.seqno = _arg.seqno, this.uid = _arg.uid, this.track = _arg.track;
      TrackerProofGen.__super__.constructor.call(this, {
        km: km
      });
    }

    TrackerProofGen.prototype._get_announce_number = function(cb) {
      return cb(null);
    };

    TrackerProofGen.prototype._make_binding_eng = function(arg) {
      arg.track = this.track;
      return new proofs.Track(arg);
    };

    TrackerProofGen.prototype._v_modify_store_arg = function(arg) {
      arg.uid = this.uid;
      return arg.type = "track";
    };

    TrackerProofGen.prototype._get_api_endpoint = function() {
      return "follow";
    };

    return TrackerProofGen;

  })(BaseSigGen);

}).call(this);
