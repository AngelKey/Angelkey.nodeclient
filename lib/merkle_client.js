// Generated by IcedCoffeeScript 1.7.1-b
(function() {
  var E, Lock, MerkleClient, createHash, iced, log, make_esc, merkle, req, __iced_k, __iced_k_noop, _merkle_client,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  iced = require('iced-coffee-script').iced;
  __iced_k = __iced_k_noop = function() {};

  merkle = require('merkle-tree');

  req = require('./req');

  log = require('./log');

  E = require('./err').E;

  make_esc = require('iced-utils').make_esc;

  Lock = require('iced-utils').lock.Lock;

  createHash = require('crypto').createHash;

  MerkleClient = (function(_super) {
    __extends(MerkleClient, _super);

    function MerkleClient() {
      MerkleClient.__super__.constructor.call(this, {});
      this._root = null;
      this._nodes = {};
      this._lock = new Lock();
    }

    MerkleClient.prototype.hash_fn = function(s) {
      var h, ret;
      h = createHash('SHA512');
      h.update(s);
      ret = h.digest().toString('hex');
      return ret;
    };

    MerkleClient.prototype.lookup_root = function(cb) {
      var body, err, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      err = null;
      (function(_this) {
        return (function(__iced_k) {
          if (!_this._root) {
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "/Users/max/src/keybase/node-client/src/merkle_client.iced",
                funcname: "MerkleClient.lookup_root"
              });
              req.get({
                endpoint: "merkle/root"
              }, __iced_deferrals.defer({
                assign_fn: (function() {
                  return function() {
                    err = arguments[0];
                    return body = arguments[1];
                  };
                })(),
                lineno: 32
              }));
              __iced_deferrals._fulfill();
            })(function() {
              console.log("root");
              console.log(body);
              return __iced_k(err == null ? _this._root = body : void 0);
            });
          } else {
            return __iced_k();
          }
        });
      })(this)((function(_this) {
        return function() {
          return cb(err, _this._root.hash);
        };
      })(this));
    };

    MerkleClient.prototype.store_node = function(args, cb) {
      return cb(new E.UnimplementedError("not a storage engine"));
    };

    MerkleClient.prototype.store_root = function(args, cb) {
      return cb(new E.UnimplementedError("not a storage engine"));
    };

    MerkleClient.prototype.lookup_node = function(_arg, cb) {
      var args, body, err, key, ret, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      key = _arg.key;
      err = ret = null;
      (function(_this) {
        return (function(__iced_k) {
          if ((ret = _this._nodes[key]) == null) {
            args = {
              hash: key
            };
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "/Users/max/src/keybase/node-client/src/merkle_client.iced",
                funcname: "MerkleClient.lookup_node"
              });
              req.get({
                endpoint: "merkle/block",
                args: args
              }, __iced_deferrals.defer({
                assign_fn: (function() {
                  return function() {
                    err = arguments[0];
                    return body = arguments[1];
                  };
                })(),
                lineno: 54
              }));
              __iced_deferrals._fulfill();
            })(function() {
              console.log("block");
              console.log(body);
              return __iced_k(err == null ? ret = _this._nodes[key] = body.value : void 0);
            });
          } else {
            return __iced_k();
          }
        });
      })(this)((function(_this) {
        return function() {
          return cb(err, ret);
        };
      })(this));
    };

    MerkleClient.prototype.find = function(_arg, cb) {
      var err, key, ret, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      key = _arg.key;
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/max/src/keybase/node-client/src/merkle_client.iced",
            funcname: "MerkleClient.find"
          });
          _this._lock.acquire(__iced_deferrals.defer({
            lineno: 64
          }));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "/Users/max/src/keybase/node-client/src/merkle_client.iced",
              funcname: "MerkleClient.find"
            });
            MerkleClient.__super__.find.call(_this, {
              key: key
            }, __iced_deferrals.defer({
              assign_fn: (function() {
                return function() {
                  err = arguments[0];
                  return ret = arguments[1];
                };
              })(),
              lineno: 65
            }));
            __iced_deferrals._fulfill();
          })(function() {
            _this._lock.release();
            return cb(err, ret, _this._root);
          });
        };
      })(this));
    };

    return MerkleClient;

  })(merkle.Base);

  _merkle_client = null;

  exports.merkle_client = function() {
    if (_merkle_client == null) {
      _merkle_client = new MerkleClient();
    }
    return _merkle_client;
  };

}).call(this);
