// Generated by IcedCoffeeScript 1.7.1-b
(function() {
  var E, MerkleClient, a_json_parse, athrow, createHash, env, iced, keys, log, make_esc, master_ring, merkle, req, __iced_k, __iced_k_noop, _merkle_client, _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  iced = require('iced-coffee-script').iced;
  __iced_k = __iced_k_noop = function() {};

  merkle = require('merkle-tree');

  req = require('./req');

  log = require('./log');

  E = require('./err').E;

  make_esc = require('iced-error').make_esc;

  _ref = require('iced-utils').util, a_json_parse = _ref.a_json_parse, athrow = _ref.athrow;

  createHash = require('crypto').createHash;

  master_ring = require('./keyring').master_ring;

  keys = require('./keys');

  env = require('./env').env;

  MerkleClient = (function(_super) {
    __extends(MerkleClient, _super);

    function MerkleClient() {
      MerkleClient.__super__.constructor.call(this, {});
      this._root = null;
      this._nodes = {};
      this._keys = {};
      this._verified = {};
    }

    MerkleClient.prototype.hash_fn = function(s) {
      var h, ret;
      h = createHash('SHA512');
      h.update(s);
      ret = h.digest().toString('hex');
      return ret;
    };

    MerkleClient.prototype.lookup_root = function(cb) {
      var body, err, hash, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      err = hash = null;
      (function(_this) {
        return (function(__iced_k) {
          if (!_this._root) {
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "/Users/max/src/keybase/node-client/src/merkle_client.iced",
                funcname: "MerkleClient.lookup_root"
              });
              req.get({
                endpoint: "merkle/root"
              }, __iced_deferrals.defer({
                assign_fn: (function() {
                  return function() {
                    err = arguments[0];
                    return body = arguments[1];
                  };
                })(),
                lineno: 36
              }));
              __iced_deferrals._fulfill();
            })(function() {
              return __iced_k(err == null ? _this._root = body : void 0);
            });
          } else {
            return __iced_k();
          }
        });
      })(this)((function(_this) {
        return function() {
          if (_this._root != null) {
            hash = _this._root.hash;
          }
          return cb(err, hash, _this._root);
        };
      })(this));
    };

    MerkleClient.prototype.store_node = function(args, cb) {
      return this.cb_unimplemented(cb);
    };

    MerkleClient.prototype.store_root = function(args, cb) {
      return this.cb_unimplemented(cb);
    };

    MerkleClient.prototype.cb_unimplemented = function(cb) {
      return cb(new E.UnimplementedError("not a storage engine"));
    };

    MerkleClient.prototype.lookup_node = function(_arg, cb) {
      var args, body, err, key, ret, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      key = _arg.key;
      err = ret = null;
      (function(_this) {
        return (function(__iced_k) {
          if ((ret = _this._nodes[key]) == null) {
            args = {
              hash: key
            };
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "/Users/max/src/keybase/node-client/src/merkle_client.iced",
                funcname: "MerkleClient.lookup_node"
              });
              req.get({
                endpoint: "merkle/block",
                args: args
              }, __iced_deferrals.defer({
                assign_fn: (function() {
                  return function() {
                    err = arguments[0];
                    return body = arguments[1];
                  };
                })(),
                lineno: 57
              }));
              __iced_deferrals._fulfill();
            })(function() {
              return __iced_k(err == null ? ret = _this._nodes[key] = body.value : void 0);
            });
          } else {
            return __iced_k();
          }
        });
      })(this)((function(_this) {
        return function() {
          return cb(err, ret);
        };
      })(this));
    };

    MerkleClient.prototype.verify_root_json = function(_arg, cb) {
      var a, b, err, esc, json, root, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      root = _arg.root;
      esc = make_esc(cb, "MerkleClient::verify_root");
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/max/src/keybase/node-client/src/merkle_client.iced",
            funcname: "MerkleClient.verify_root_json"
          });
          a_json_parse(root.payload_json, esc(__iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                return json = arguments[0];
              };
            })(),
            lineno: 66
          })));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          var _ref1, _ref2, _ref3, _ref4, _ref5, _ref6;
          err = (a = root.hash) !== (b = (_ref1 = json.body) != null ? _ref1.root : void 0) ? new E.VerifyError("Root hash mismatch: " + a + " != " + b) : (a = root.seqno) !== (b = (_ref2 = json.body) != null ? _ref2.seqno : void 0) ? new E.VerifyError("Sequence # mismatch: " + a + " != " + b) : (a = (_ref3 = root.key_fingerprint) != null ? _ref3.toLowerCase() : void 0) !== (b = (_ref4 = json.body) != null ? (_ref5 = _ref4.key) != null ? (_ref6 = _ref5.fingerprint) != null ? _ref6.toLowerCase() : void 0 : void 0 : void 0) ? new E.VerifyError("Fingerprint mismatch: " + a + " != " + b) : (a = root.ctime) !== (b = json.ctime) ? new E.VerifyError("Ctime mismatch: " + a + " != " + b) : null;
          return cb(err);
        };
      })(this));
    };

    MerkleClient.prototype.check_key_fingerprint = function(_arg, cb) {
      var err, fingerprint;
      fingerprint = _arg.fingerprint;
      if (__indexOf.call(env().get_merkle_key_fingerprints(), fingerprint) >= 0) {
        err = null;
      } else {
        err = new E.KeyNotTrustedError("the fingerprint " + fingerprint + " isn't trusted");
      }
      return cb(err);
    };

    MerkleClient.prototype.find_key_data = function(_arg, cb) {
      var err, fingerprint, json, key_data, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      fingerprint = _arg.fingerprint;
      err = key_data = null;
      (function(_this) {
        return (function(__iced_k) {
          if ((key_data = keys.lookup[fingerprint]) == null) {
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "/Users/max/src/keybase/node-client/src/merkle_client.iced",
                funcname: "MerkleClient.find_key_data"
              });
              req.get({
                endpoint: "key/special",
                args: {
                  fingerprint: fingerprint
                }
              }, __iced_deferrals.defer({
                assign_fn: (function() {
                  return function() {
                    err = arguments[0];
                    return json = arguments[1];
                  };
                })(),
                lineno: 93
              }));
              __iced_deferrals._fulfill();
            })(function() {
              return __iced_k(err != null ? void 0 : (key_data = json.bundle) == null ? err = new E.KeyNotFoundError("have no key for " + fingerprint) : void 0);
            });
          } else {
            return __iced_k();
          }
        });
      })(this)((function(_this) {
        return function() {
          return cb(err, key_data);
        };
      })(this));
    };

    MerkleClient.prototype.get_merkle_key = function(_arg, cb) {
      var err, esc, fingerprint, index, key_data, obj, ret, ring, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      fingerprint = _arg.fingerprint;
      ring = master_ring();
      esc = make_esc(cb, "MerkleCleint::get_merkle_key");
      err = ret = null;
      log.debug("+ merkle get_merkle_key");
      (function(_this) {
        return (function(__iced_k) {
          if ((ret = _this._keys[fingerprint]) == null) {
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "/Users/max/src/keybase/node-client/src/merkle_client.iced",
                funcname: "MerkleClient.get_merkle_key"
              });
              ring.index2({}, esc(__iced_deferrals.defer({
                assign_fn: (function() {
                  return function() {
                    return index = arguments[0];
                  };
                })(),
                lineno: 107
              })));
              __iced_deferrals._fulfill();
            })(function() {
              var _ref1;
              _ref1 = index.lookup().fingerprint.get_0_or_1(fingerprint), err = _ref1[0], obj = _ref1[1];
              (function(__iced_k) {
                if (err != null) {
                  return __iced_k();
                } else {
                  (function(__iced_k) {
                    if (obj != null) {
                      log.debug("| merkle key already found in keyring");
                      return __iced_k(ret = ring.make_key({
                        fingerprint: fingerprint
                      }));
                    } else {
                      (function(__iced_k) {
                        __iced_deferrals = new iced.Deferrals(__iced_k, {
                          parent: ___iced_passed_deferral,
                          filename: "/Users/max/src/keybase/node-client/src/merkle_client.iced",
                          funcname: "MerkleClient.get_merkle_key"
                        });
                        _this.find_key_data({
                          fingerprint: fingerprint
                        }, esc(__iced_deferrals.defer({
                          assign_fn: (function() {
                            return function() {
                              return key_data = arguments[0];
                            };
                          })(),
                          lineno: 114
                        })));
                        __iced_deferrals._fulfill();
                      })(function() {
                        log.debug("| doing a merkle key import for " + fingerprint);
                        ret = ring.make_key({
                          fingerprint: fingerprint,
                          key_data: key_data
                        });
                        (function(__iced_k) {
                          __iced_deferrals = new iced.Deferrals(__iced_k, {
                            parent: ___iced_passed_deferral,
                            filename: "/Users/max/src/keybase/node-client/src/merkle_client.iced",
                            funcname: "MerkleClient.get_merkle_key"
                          });
                          ret.save(esc(__iced_deferrals.defer({
                            lineno: 117
                          })));
                          __iced_deferrals._fulfill();
                        })(function() {
                          return __iced_k(ret = ring.make_key({
                            fingerprint: fingerprint
                          }));
                        });
                      });
                    }
                  })(__iced_k);
                }
              })(function() {
                return __iced_k(ret != null ? _this._keys[fingerprint] = ret : void 0);
              });
            });
          } else {
            return __iced_k();
          }
        });
      })(this)((function(_this) {
        return function() {
          log.debug("- merkle get_merkle_key");
          return cb(err, ret);
        };
      })(this));
    };

    MerkleClient.prototype.verify_root = function(_arg, cb) {
      var err, esc, fingerprint, key, rh, root, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      root = _arg.root;
      root || (root = this._root);
      log.debug("+ merkle verify_root");
      err = null;
      (function(_this) {
        return (function(__iced_k) {
          if (root == null) {
            return __iced_k(err = new E.NotFoundError('no root found'));
          } else {
            (function(__iced_k) {
              if (_this._verified[(rh = root.hash)]) {
                return __iced_k(log.debug("| no need to verified root " + rh + "; already verified"));
              } else {
                fingerprint = root.key_fingerprint;
                esc = make_esc(cb, "Merkle::verify_root");
                (function(__iced_k) {
                  __iced_deferrals = new iced.Deferrals(__iced_k, {
                    parent: ___iced_passed_deferral,
                    filename: "/Users/max/src/keybase/node-client/src/merkle_client.iced",
                    funcname: "MerkleClient.verify_root"
                  });
                  _this.check_key_fingerprint({
                    fingerprint: fingerprint
                  }, esc(__iced_deferrals.defer({
                    lineno: 138
                  })));
                  __iced_deferrals._fulfill();
                })(function() {
                  (function(__iced_k) {
                    __iced_deferrals = new iced.Deferrals(__iced_k, {
                      parent: ___iced_passed_deferral,
                      filename: "/Users/max/src/keybase/node-client/src/merkle_client.iced",
                      funcname: "MerkleClient.verify_root"
                    });
                    _this.get_merkle_key({
                      fingerprint: fingerprint
                    }, esc(__iced_deferrals.defer({
                      assign_fn: (function() {
                        return function() {
                          return key = arguments[0];
                        };
                      })(),
                      lineno: 139
                    })));
                    __iced_deferrals._fulfill();
                  })(function() {
                    (function(__iced_k) {
                      __iced_deferrals = new iced.Deferrals(__iced_k, {
                        parent: ___iced_passed_deferral,
                        filename: "/Users/max/src/keybase/node-client/src/merkle_client.iced",
                        funcname: "MerkleClient.verify_root"
                      });
                      _this.verify_root_json({
                        root: root
                      }, esc(__iced_deferrals.defer({
                        lineno: 140
                      })));
                      __iced_deferrals._fulfill();
                    })(function() {
                      (function(__iced_k) {
                        __iced_deferrals = new iced.Deferrals(__iced_k, {
                          parent: ___iced_passed_deferral,
                          filename: "/Users/max/src/keybase/node-client/src/merkle_client.iced",
                          funcname: "MerkleClient.verify_root"
                        });
                        key.verify_sig({
                          which: "merkle root",
                          sig: root.sig,
                          payload: root.payload_json
                        }, esc(__iced_deferrals.defer({
                          lineno: 141
                        })));
                        __iced_deferrals._fulfill();
                      })(function() {
                        return __iced_k(_this._verified[rh] = true);
                      });
                    });
                  });
                });
              }
            })(__iced_k);
          }
        });
      })(this)((function(_this) {
        return function() {
          log.debug("- merkle verify_root");
          return cb(err);
        };
      })(this));
    };

    MerkleClient.prototype.find_and_verify = function(_arg, cb) {
      var err, key, root, val, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      key = _arg.key;
      log.debug("+ merkle find_and_verify: " + key);
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/max/src/keybase/node-client/src/merkle_client.iced",
            funcname: "MerkleClient.find_and_verify"
          });
          _this.find({
            key: key
          }, __iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                err = arguments[0];
                val = arguments[1];
                return root = arguments[2];
              };
            })(),
            lineno: 150
          }));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          log.debug("| find -> " + (JSON.stringify(val)));
          if (typeof err !== "undefined" && err !== null) {

          }
          (function(__iced_k) {
            if (typeof val === "undefined" || val === null) {
              return __iced_k(err = new E.NotFoundError("No value " + key + " found in merkle tree"));
            } else {
              (function(__iced_k) {
                if (!Array.isArray(val) || val.length < 2) {
                  return __iced_k(err = new E.BadValueError("expected an array of length 2 or more"));
                } else {
                  (function(__iced_k) {
                    __iced_deferrals = new iced.Deferrals(__iced_k, {
                      parent: ___iced_passed_deferral,
                      filename: "/Users/max/src/keybase/node-client/src/merkle_client.iced",
                      funcname: "MerkleClient.find_and_verify"
                    });
                    _this.verify_root({
                      root: root
                    }, __iced_deferrals.defer({
                      assign_fn: (function() {
                        return function() {
                          return err = arguments[0];
                        };
                      })(),
                      lineno: 157
                    }));
                    __iced_deferrals._fulfill();
                  })(__iced_k);
                }
              })(__iced_k);
            }
          })(function() {
            log.debug("- merkle find_and_verify -> " + err);
            return cb(err, val, root);
          });
        };
      })(this));
    };

    return MerkleClient;

  })(merkle.Base);

  _merkle_client = null;

  exports.merkle_client = function() {
    if (_merkle_client == null) {
      _merkle_client = new MerkleClient();
    }
    return _merkle_client;
  };

}).call(this);
