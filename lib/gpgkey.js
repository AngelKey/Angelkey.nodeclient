// Generated by IcedCoffeeScript 1.6.3-i
(function() {
  var E, GpgKey, IS, assert_no_collision, athrow, db, deq, gpg, gpgmod, iced, log, make_esc, parse, read_uids_from_key, strip, __iced_k, __iced_k_noop;

  iced = require('iced-coffee-script/lib/coffee-script/iced').runtime;
  __iced_k = __iced_k_noop = function() {};

  gpgmod = require('./gpg');

  gpg = gpgmod.gpg, assert_no_collision = gpgmod.assert_no_collision, read_uids_from_key = gpgmod.read_uids_from_key;

  parse = require('gpg-wrapper').parse;

  E = require('./err').E;

  db = require('./db').db;

  make_esc = require('iced-error').make_esc;

  IS = require('./constants').constants.import_state;

  log = require('./log');

  athrow = require('pgp-utils').util.athrow;

  deq = require('deep-equal');

  strip = function(m) {
    return m.split(/\s+/).join('');
  };

  exports.GpgKey = GpgKey = (function() {
    function GpgKey(user, _arg) {
      var secret, _ref, _ref1;
      this.user = user;
      secret = _arg.secret;
      this._fingerprint = this.user.fingerprint(true);
      this._username = this.user.username();
      this._is_self = this.user._is_self;
      this._secret = secret;
      this._uid = this.user.id;
      this._public_key_data = (_ref = this.user.public_keys) != null ? (_ref1 = _ref.primary) != null ? _ref1.bundle : void 0 : void 0;
    }

    GpgKey.prototype.fingerprint = function() {
      return this._fingerprint;
    };

    GpgKey.prototype.username = function() {
      return this._username;
    };

    GpgKey.prototype.key_id_64 = function() {
      return this.fingerprint().slice(-16);
    };

    GpgKey.prototype.query_key = function(cb) {
      var args, err, fp, out, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      (function(_this) {
        return (function(__iced_k) {
          if ((fp = _this._fingerprint) != null) {
            args = ["-" + (_this._secret ? 'K' : 'k'), fp];
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "/Users/max/src/keybase-node-client/src/gpgkey.iced",
                funcname: "GpgKey.query_key"
              });
              gpg({
                args: args,
                quiet: true
              }, __iced_deferrals.defer({
                assign_fn: (function() {
                  return function() {
                    err = arguments[0];
                    return out = arguments[1];
                  };
                })(),
                lineno: 41
              }));
              __iced_deferrals._fulfill();
            })(function() {
              return __iced_k(typeof err !== "undefined" && err !== null ? err = new E.NoLocalKeyError((_this._is_self ? "You don't have a local key!" : "the user " + _this._username + " doesn't have a local key")) : _this._import_state = IS.FINAL);
            });
          } else {
            return __iced_k(err = new E.NoRemoteKeyError((_this._is_self ? "You don't have a registered remote key! Try `keybase push`" : "the user " + _this._username + " doesn't have a remote key")));
          }
        });
      })(this)((function(_this) {
        return function() {
          return cb(err);
        };
      })(this));
    };

    GpgKey.prototype.import_key = function(cb) {
      var args, data, err, fingerprint, found, out, uid, un, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      un = this._username;
      uid = this._uid;
      fingerprint = this._fingerprint;
      found = false;
      log.debug("+ " + un + ": import public key");
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/max/src/keybase-node-client/src/gpgkey.iced",
            funcname: "GpgKey.import_key"
          });
          _this.query_key(__iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                return err = arguments[0];
              };
            })(),
            lineno: 64
          }));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          (function(__iced_k) {
            if (typeof err === "undefined" || err === null) {
              log.debug("| found locally");
              (function(__iced_k) {
                __iced_deferrals = new iced.Deferrals(__iced_k, {
                  parent: ___iced_passed_deferral,
                  filename: "/Users/max/src/keybase-node-client/src/gpgkey.iced",
                  funcname: "GpgKey.import_key"
                });
                db.get_import_state({
                  uid: uid,
                  fingerprint: fingerprint
                }, __iced_deferrals.defer({
                  assign_fn: (function(__slot_1) {
                    return function() {
                      err = arguments[0];
                      return __slot_1._import_state = arguments[1];
                    };
                  })(_this),
                  lineno: 67
                }));
                __iced_deferrals._fulfill();
              })(function() {
                return __iced_k(log.debug("| read state from DB as " + _this._import_state));
              });
            } else {
              (function(__iced_k) {
                if ((err instanceof E.NoLocalKeyError) == null) {
                  return __iced_k();
                } else {
                  (function(__iced_k) {
                    if ((data = _this._public_key_data) == null) {
                      return __iced_k(err = new E.ImportError("no public key found for " + un));
                    } else {
                      log.debug("| temporarily importing key to scratch GPG keychain");
                      _this._import_state = IS.TEMPORARY;
                      (function(__iced_k) {
                        __iced_deferrals = new iced.Deferrals(__iced_k, {
                          parent: ___iced_passed_deferral,
                          filename: "/Users/max/src/keybase-node-client/src/gpgkey.iced",
                          funcname: "GpgKey.import_key"
                        });
                        _this._db_log(__iced_deferrals.defer({
                          assign_fn: (function() {
                            return function() {
                              return err = arguments[0];
                            };
                          })(),
                          lineno: 75
                        }));
                        __iced_deferrals._fulfill();
                      })(function() {
                        (function(__iced_k) {
                          if (err == null) {
                            args = ["--import"];
                            (function(__iced_k) {
                              __iced_deferrals = new iced.Deferrals(__iced_k, {
                                parent: ___iced_passed_deferral,
                                filename: "/Users/max/src/keybase-node-client/src/gpgkey.iced",
                                funcname: "GpgKey.import_key"
                              });
                              _this.gpg({
                                args: args,
                                stdin: data,
                                quiet: true
                              }, __iced_deferrals.defer({
                                assign_fn: (function() {
                                  return function() {
                                    err = arguments[0];
                                    return out = arguments[1];
                                  };
                                })(),
                                lineno: 78
                              }));
                              __iced_deferrals._fulfill();
                            })(function() {
                              return __iced_k(err != null ? err = new E.ImportError("" + un + ": key import error: " + err.message) : void 0);
                            });
                          } else {
                            return __iced_k();
                          }
                        })(__iced_k);
                      });
                    }
                  })(__iced_k);
                }
              })(__iced_k);
            }
          })(function() {
            log.debug("- " + un + ": imported public key (state=" + _this._import_state + ")");
            return cb(err);
          });
        };
      })(this));
    };

    GpgKey.prototype.is_tmp = function() {
      return (this._import_state == null) || (this._import_state === IS.TEMPORARY);
    };

    GpgKey.prototype._remove = function(cb) {
      var err, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      log.debug("+ deleting public key " + this._username + "/" + this._fingerprint);
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/max/src/keybase-node-client/src/gpgkey.iced",
            funcname: "GpgKey._remove"
          });
          _this.gpg({
            args: ["--batch", "--delete-keys", _this._fingerprint]
          }, __iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                return err = arguments[0];
              };
            })(),
            lineno: 92
          }));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          log.debug("- deleted public key " + _this._username + "/" + _this._fingerprint);
          return cb(err);
        };
      })(this));
    };

    GpgKey.prototype._sign_key = function(signer, cb) {
      var args, err, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      log.debug("| GPG-signing " + (this.username()) + "'s key with your key");
      args = ["-u", signer.fingerprint(), "--sign-key", "--batch", "--yes", this.fingerprint()];
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/max/src/keybase-node-client/src/gpgkey.iced",
            funcname: "GpgKey._sign_key"
          });
          _this.gpg({
            args: args
          }, __iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                return err = arguments[0];
              };
            })(),
            lineno: 101
          }));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          return cb(err);
        };
      })(this));
    };

    GpgKey.prototype._verify_key_id_64 = function(ki64, cb) {
      var a, b, err, m, out, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      log.debug("+ Check key_id_64 " + ki64 + " against key " + (this.fingerprint()));
      (function(_this) {
        return (function(__iced_k) {
          if (ki64 === _this.key_id_64()) {
            return __iced_k(err = null);
          } else {
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "/Users/max/src/keybase-node-client/src/gpgkey.iced",
                funcname: "GpgKey._verify_key_id_64"
              });
              _this.gpg({
                args: ["--fingerprint", ki64]
              }, __iced_deferrals.defer({
                assign_fn: (function() {
                  return function() {
                    err = arguments[0];
                    return out = arguments[1];
                  };
                })(),
                lineno: 110
              }));
              __iced_deferrals._fulfill();
            })(function() {
              return __iced_k(err != null ? void 0 : (m = out.toString('utf8').match(/Key fingerprint = ([A-F0-9 ]+)/)) == null ? err = new E.VerifyError("Querying for a fingerprint failed") : !(a = strip(m[1])) === (b = _this.fingerprint()) ? err = new E.VerifyError("Fingerprint mismatch: " + a + " != " + b) : void 0);
            });
          }
        });
      })(this)((function(_this) {
        return function() {
          log.debug("- Check key_id_64 -> " + err);
          return cb(err);
        };
      })(this));
    };

    GpgKey.prototype.gpg_obj = function() {
      return gpgmod.obj(this.is_tmp());
    };

    GpgKey.prototype._verify_signed_with_this_key = function(_arg, cb) {
      var b, bl, esc, ki64, m, mout, msg, payload, pkts, sig, t, types, which, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      which = _arg.which, sig = _arg.sig, payload = _arg.payload;
      esc = make_esc(cb, "GpgKey::_verify_signed_with_this_key");
      log.debug("+ GpgKey::_verify_signed_with_this_key " + which);
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/max/src/keybase-node-client/src/gpgkey.iced",
            funcname: "GpgKey._verify_signed_with_this_key"
          });
          parse({
            gpg: _this.gpg_obj(),
            message: sig
          }, esc(__iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                return mout = arguments[0];
              };
            })(),
            lineno: 128
          })));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          var _ref;
          pkts = mout.packets();
          console.log(pkts);
          types = {
            w: ['compressed', 'onepass_sig', 'literal data', 'signature'],
            r: (function() {
              var _i, _len, _results;
              _results = [];
              for (_i = 0, _len = pkts.length; _i < _len; _i++) {
                t = pkts[_i];
                _results.push(t.type);
              }
              return _results;
            })()
          };
          b = null;
          msg = !(deq(types.w, types.r)) ? "got wrong packets in signature: " + (JSON.stringify(types.r)) : !(m = pkts[1].options.match(/^keyid ([A-F0-9]{16}$)/)) || ((ki64 = m[1]) == null) ? "didn't find a key ID in 'onepass_sig' packet" : !(m = (_ref = pkts[2].subfields()) != null ? _ref[1].match(/raw data: (\d+) bytes/) : void 0) || ((b = m[1]) == null) || (isNaN(bl = parseInt(b, 10)) != null) || (bl !== payload.length) ? "signature didn't cover the whole payload!" : !(m = pkts[3].options.match(/keyid ([A-F0-9]){16}$/)) || ((b = m[1]) == null) || (b !== ki64) ? "'signature' packet had wrong key: " + b + "; wanted " + ki64 : null;
          (function(__iced_k) {
            if (msg != null) {
              (function(__iced_k) {
                __iced_deferrals = new iced.Deferrals(__iced_k, {
                  parent: ___iced_passed_deferral,
                  filename: "/Users/max/src/keybase-node-client/src/gpgkey.iced",
                  funcname: "GpgKey._verify_signed_with_this_key"
                });
                athrow(new E.VerifyError(msg), esc(__iced_deferrals.defer({
                  lineno: 150
                })));
                __iced_deferrals._fulfill();
              })(__iced_k);
            } else {
              return __iced_k();
            }
          })(function() {
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "/Users/max/src/keybase-node-client/src/gpgkey.iced",
                funcname: "GpgKey._verify_signed_with_this_key"
              });
              _this._verify_key_id_64(ki64, esc(__iced_deferrals.defer({
                lineno: 151
              })));
              __iced_deferrals._fulfill();
            })(function() {
              log.debug("- GpgKey::_verify_signed_with_this_key " + which);
              return cb(null);
            });
          });
        };
      })(this));
    };

    GpgKey.prototype.verify_sig = function(_arg, cb) {
      var a, b, err, msg, out, payload, sig, which, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      which = _arg.which, sig = _arg.sig, payload = _arg.payload;
      log.debug("+ GpgKey::verify_sig " + which);
      err = null;
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/max/src/keybase-node-client/src/gpgkey.iced",
            funcname: "GpgKey.verify_sig"
          });
          _this.gpg({
            args: ["--decrypt"],
            stdin: sig,
            quiet: true
          }, __iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                err = arguments[0];
                return out = arguments[1];
              };
            })(),
            lineno: 162
          }));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          msg = err != null ? "signature verification failed" : (a = out.toString('utf8')) !== (b = payload) ? "wrong payload: " + a + " != " + b : null;
          if (msg != null) {
            err = new E.VerifyError("" + which + ": " + msg);
          }
          (function(__iced_k) {
            if (err == null) {
              (function(__iced_k) {
                __iced_deferrals = new iced.Deferrals(__iced_k, {
                  parent: ___iced_passed_deferral,
                  filename: "/Users/max/src/keybase-node-client/src/gpgkey.iced",
                  funcname: "GpgKey.verify_sig"
                });
                _this._verify_signed_with_this_key({
                  which: which,
                  sig: sig,
                  payload: payload
                }, __iced_deferrals.defer({
                  assign_fn: (function() {
                    return function() {
                      return err = arguments[0];
                    };
                  })(),
                  lineno: 172
                }));
                __iced_deferrals._fulfill();
              })(__iced_k);
            } else {
              return __iced_k();
            }
          })(function() {
            log.debug("- GpgKey::verify_sig " + which + " -> " + err);
            return cb(err);
          });
        };
      })(this));
    };

    GpgKey.prototype.rollback = function(cb) {
      var esc, stdin, un, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      esc = make_esc(cb, "GpgKey::commit");
      (function(_this) {
        return (function(__iced_k) {
          if (_this._import_state === IS.TEMPORARY) {
            un = _this._username;
            log.debug("+ " + un + ": rollback key " + _this._fingerprint);
            stdin = _this._public_key_data;
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "/Users/max/src/keybase-node-client/src/gpgkey.iced",
                funcname: "GpgKey.rollback"
              });
              _this._remove(esc(__iced_deferrals.defer({
                lineno: 185
              })));
              __iced_deferrals._fulfill();
            })(function() {
              _this._import_state = IS.CANCELED;
              (function(__iced_k) {
                __iced_deferrals = new iced.Deferrals(__iced_k, {
                  parent: ___iced_passed_deferral,
                  filename: "/Users/max/src/keybase-node-client/src/gpgkey.iced",
                  funcname: "GpgKey.rollback"
                });
                _this._db_log(esc(__iced_deferrals.defer({
                  lineno: 187
                })));
                __iced_deferrals._fulfill();
              })(function() {
                return __iced_k(log.debug("- " + un + ": rollback key " + _this._fingerprint));
              });
            });
          } else {
            return __iced_k(log.debug("| no need to rollback key since it was previously imported"));
          }
        });
      })(this)((function(_this) {
        return function() {
          return cb(null);
        };
      })(this));
    };

    GpgKey.prototype._db_log = function(cb) {
      var err, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      log.debug("| DB log update " + this._fingerprint + " -> " + this._import_state);
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/max/src/keybase-node-client/src/gpgkey.iced",
            funcname: "GpgKey._db_log"
          });
          db.log_key_import({
            uid: _this._uid,
            state: _this._import_state,
            fingerprint: _this._fingerprint
          }, __iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                return err = arguments[0];
              };
            })(),
            lineno: 197
          }));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          return cb(err);
        };
      })(this));
    };

    GpgKey.prototype.read_uids_from_key = function(cb) {
      var err, opts, uids, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      opts = {
        tmp: this.is_tmp(),
        fingerprint: this._fingerprint
      };
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/max/src/keybase-node-client/src/gpgkey.iced",
            funcname: "GpgKey.read_uids_from_key"
          });
          read_uids_from_key(opts, __iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                err = arguments[0];
                return uids = arguments[1];
              };
            })(),
            lineno: 206
          }));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          return cb(err, uids);
        };
      })(this));
    };

    GpgKey.prototype.gpg = function(opts, cb) {
      opts.tmp = this.is_tmp();
      return gpg(opts, cb);
    };

    GpgKey.prototype.commit = function(signer, cb) {
      var esc, stdin, un, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      esc = make_esc(cb, "GpgKey::commit");
      un = this._username;
      log.debug("+ " + un + ": remove temporarily imported public key");
      stdin = this._public_key_data;
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/max/src/keybase-node-client/src/gpgkey.iced",
            funcname: "GpgKey.commit"
          });
          _this._remove(esc(__iced_deferrals.defer({
            lineno: 222
          })));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          _this._import_state = IS.FINAL;
          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "/Users/max/src/keybase-node-client/src/gpgkey.iced",
              funcname: "GpgKey.commit"
            });
            _this.gpg({
              args: ["--import"],
              stdin: stdin,
              quiet: true
            }, esc(__iced_deferrals.defer({
              lineno: 224
            })));
            __iced_deferrals._fulfill();
          })(function() {
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "/Users/max/src/keybase-node-client/src/gpgkey.iced",
                funcname: "GpgKey.commit"
              });
              _this._sign_key(signer, esc(__iced_deferrals.defer({
                lineno: 225
              })));
              __iced_deferrals._fulfill();
            })(function() {
              (function(__iced_k) {
                __iced_deferrals = new iced.Deferrals(__iced_k, {
                  parent: ___iced_passed_deferral,
                  filename: "/Users/max/src/keybase-node-client/src/gpgkey.iced",
                  funcname: "GpgKey.commit"
                });
                _this._db_log(esc(__iced_deferrals.defer({
                  lineno: 226
                })));
                __iced_deferrals._fulfill();
              })(function() {
                log.debug("+ " + un + ": remove temporarily imported public key");
                return cb(null);
              });
            });
          });
        };
      })(this));
    };

    GpgKey.prototype.assert_no_collision = function(short_id, cb) {
      return assert_no_collision({
        short_id: short_id,
        tmp: this.is_tmp()
      }, cb);
    };

    return GpgKey;

  })();

}).call(this);
