// Generated by IcedCoffeeScript 1.6.3-i
(function() {
  var E, GpgKey, IS, db, gpg, iced, log, make_esc, __iced_k, __iced_k_noop;

  iced = require('iced-coffee-script/lib/coffee-script/iced').runtime;
  __iced_k = __iced_k_noop = function() {};

  gpg = require('./tmpgpg').gpg;

  E = require('./err').E;

  db = require('./db').db;

  make_esc = require('iced-error').make_esc;

  IS = require('./constants').constants.import_state;

  log = require('./log');

  exports.GpgKey = GpgKey = (function() {
    function GpgKey(user, _arg) {
      var secret, _ref, _ref1;
      this.user = user;
      secret = _arg.secret;
      this._fingerprint = this.user.fingerprint(true);
      this._username = this.user.username();
      this._is_self = this.user.is_self;
      this._secret = secret;
      this._uid = this.user.id;
      this._public_key_data = (_ref = this.user.public_keys) != null ? (_ref1 = _ref.primary) != null ? _ref1.bundle : void 0 : void 0;
    }

    GpgKey.prototype.fingerprint = function() {
      return this._fingerprint;
    };

    GpgKey.prototype.username = function() {
      return this._username;
    };

    GpgKey.prototype.query_key = function(cb) {
      var args, err, fp, out, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      (function(_this) {
        return (function(__iced_k) {
          if ((fp = _this._fingerprint) != null) {
            args = ["-" + (_this._secret ? 'K' : 'k'), fp];
            _this._import_state = IS.FINAL;
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "/Users/max/src/keybase-node-client/src/gpgkey.iced",
                funcname: "GpgKey.query_key"
              });
              gpg({
                args: args,
                quiet: true
              }, __iced_deferrals.defer({
                assign_fn: (function() {
                  return function() {
                    err = arguments[0];
                    return out = arguments[1];
                  };
                })(),
                lineno: 34
              }));
              __iced_deferrals._fulfill();
            })(function() {
              return __iced_k(typeof err !== "undefined" && err !== null ? err = new E.NoLocalKeyError((_this._is_self ? "You don't have a local key!" : "the user " + _this._username + " doesn't have a local key")) : void 0);
            });
          } else {
            return __iced_k(err = new E.NoRemoteKeyError((_this._is_self ? "You don't have a registered remote key! Try `keybase push`" : "the user " + _this._username + " doesn't have a remote key")));
          }
        });
      })(this)((function(_this) {
        return function() {
          return cb(err);
        };
      })(this));
    };

    GpgKey.prototype.import_key = function(cb) {
      var args, data, err, fingerprint, found, out, uid, un, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      un = this._username;
      uid = this._uid;
      fingerprint = this._fingerprint;
      found = false;
      log.debug("+ " + un + ": import public key");
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/max/src/keybase-node-client/src/gpgkey.iced",
            funcname: "GpgKey.import_key"
          });
          _this.query_key(__iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                return err = arguments[0];
              };
            })(),
            lineno: 55
          }));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          (function(__iced_k) {
            if (typeof err === "undefined" || err === null) {
              log.debug("| found locally");
              (function(__iced_k) {
                __iced_deferrals = new iced.Deferrals(__iced_k, {
                  parent: ___iced_passed_deferral,
                  filename: "/Users/max/src/keybase-node-client/src/gpgkey.iced",
                  funcname: "GpgKey.import_key"
                });
                db.get_import_state({
                  uid: uid,
                  fingerprint: fingerprint
                }, __iced_deferrals.defer({
                  assign_fn: (function(__slot_1) {
                    return function() {
                      err = arguments[0];
                      return __slot_1._import_state = arguments[1];
                    };
                  })(_this),
                  lineno: 58
                }));
                __iced_deferrals._fulfill();
              })(function() {
                return __iced_k(log.debug("| read state from DB as " + _this._import_state));
              });
            } else {
              (function(__iced_k) {
                if ((err instanceof E.NoLocalKeyError) == null) {
                  return __iced_k();
                } else {
                  (function(__iced_k) {
                    if ((data = _this._public_key_data) == null) {
                      return __iced_k(err = new E.ImportError("no public key found for " + un));
                    } else {
                      log.debug("| temporarily importing key to scratch GPG keychain");
                      _this._import_state = IS.TEMPORARY;
                      (function(__iced_k) {
                        __iced_deferrals = new iced.Deferrals(__iced_k, {
                          parent: ___iced_passed_deferral,
                          filename: "/Users/max/src/keybase-node-client/src/gpgkey.iced",
                          funcname: "GpgKey.import_key"
                        });
                        _this._db_log(__iced_deferrals.defer({
                          assign_fn: (function() {
                            return function() {
                              return err = arguments[0];
                            };
                          })(),
                          lineno: 66
                        }));
                        __iced_deferrals._fulfill();
                      })(function() {
                        (function(__iced_k) {
                          if (err == null) {
                            args = ["--import"];
                            (function(__iced_k) {
                              __iced_deferrals = new iced.Deferrals(__iced_k, {
                                parent: ___iced_passed_deferral,
                                filename: "/Users/max/src/keybase-node-client/src/gpgkey.iced",
                                funcname: "GpgKey.import_key"
                              });
                              _this.gpg({
                                args: args,
                                stdin: data,
                                quiet: true
                              }, __iced_deferrals.defer({
                                assign_fn: (function() {
                                  return function() {
                                    err = arguments[0];
                                    return out = arguments[1];
                                  };
                                })(),
                                lineno: 69
                              }));
                              __iced_deferrals._fulfill();
                            })(function() {
                              return __iced_k(err != null ? err = new E.ImportError("" + un + ": key import error: {err.message}") : void 0);
                            });
                          } else {
                            return __iced_k();
                          }
                        })(__iced_k);
                      });
                    }
                  })(__iced_k);
                }
              })(__iced_k);
            }
          })(function() {
            log.debug("- " + un + ": imported public key (state=" + _this._import_state + ")");
            return cb(err);
          });
        };
      })(this));
    };

    GpgKey.prototype.is_tmp = function() {
      return (this._import_state == null) || (this._import_state === IS.TEMPORARY);
    };

    GpgKey.prototype._remove = function(cb) {
      var err, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      log.debug("+ deleting public key " + this._username + "/" + this._fingerprint);
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/max/src/keybase-node-client/src/gpgkey.iced",
            funcname: "GpgKey._remove"
          });
          _this.gpg({
            args: ["--batch", "--delete-keys", _this._fingerprint]
          }, __iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                return err = arguments[0];
              };
            })(),
            lineno: 83
          }));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          log.debug("- deleted public key " + _this._username + "/" + _this._fingerprint);
          return cb(err);
        };
      })(this));
    };

    GpgKey.prototype._sign_key = function(signer, cb) {
      var args, err, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      log.debug("| GPG-siging " + (key.username()) + "'s key with your key");
      args = ["-u", signer.fingerprint(), "--sign-key", this.fingerprint(), "--batch", "--yes"];
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/max/src/keybase-node-client/src/gpgkey.iced",
            funcname: "GpgKey._sign_key"
          });
          _this.gpg({
            args: args
          }, __iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                return err = arguments[0];
              };
            })(),
            lineno: 92
          }));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          return cb(err);
        };
      })(this));
    };

    GpgKey.prototype.rollback = function(cb) {
      var esc, stdin, un, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      esc = make_esc(cb, "GpgKey::commit");
      (function(_this) {
        return (function(__iced_k) {
          if (_this._import_state === IS.TEMPORARY) {
            un = _this._username;
            log.debug("+ " + un + ": rollback key " + _this._fingerprint);
            stdin = _this._public_key_data;
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "/Users/max/src/keybase-node-client/src/gpgkey.iced",
                funcname: "GpgKey.rollback"
              });
              _this._remove(esc(__iced_deferrals.defer({
                lineno: 103
              })));
              __iced_deferrals._fulfill();
            })(function() {
              _this._import_state = IS.CANCELED;
              (function(__iced_k) {
                __iced_deferrals = new iced.Deferrals(__iced_k, {
                  parent: ___iced_passed_deferral,
                  filename: "/Users/max/src/keybase-node-client/src/gpgkey.iced",
                  funcname: "GpgKey.rollback"
                });
                _this._db_log(esc(__iced_deferrals.defer({
                  lineno: 105
                })));
                __iced_deferrals._fulfill();
              })(function() {
                return __iced_k(log.debug("- " + un + ": rollback key " + _this._fingerprint));
              });
            });
          } else {
            return __iced_k(log.debug("| no need to rollback key since it was previously imported"));
          }
        });
      })(this)((function(_this) {
        return function() {
          return cb(null);
        };
      })(this));
    };

    GpgKey.prototype._db_log = function(cb) {
      var err, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      log.debug("| DB log update " + this._fingerprint + " -> " + this._import_state);
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/max/src/keybase-node-client/src/gpgkey.iced",
            funcname: "GpgKey._db_log"
          });
          db.log_key_import({
            uid: _this._uid,
            state: _this._import_state,
            fingerprint: _this._fingerprint
          }, __iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                return err = arguments[0];
              };
            })(),
            lineno: 115
          }));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          return cb(err);
        };
      })(this));
    };

    GpgKey.prototype.gpg = function(opts, cb) {
      opts.tmp = this.is_tmp();
      return gpg(opts, cb);
    };

    GpgKey.prototype.commit = function(signer, cb) {
      var esc, stdin, un, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      esc = make_esc(cb, "GpgKey::commit");
      un = this._username;
      log.debug("+ " + un + ": remove temporarily imported public key");
      stdin = this._public_key_data;
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/max/src/keybase-node-client/src/gpgkey.iced",
            funcname: "GpgKey.commit"
          });
          _this._remove(esc(__iced_deferrals.defer({
            lineno: 131
          })));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          _this._import_state = IS.FINAL;
          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "/Users/max/src/keybase-node-client/src/gpgkey.iced",
              funcname: "GpgKey.commit"
            });
            _this.gpg({
              args: ["--import"],
              stdin: data,
              quiet: true
            }, esc(__iced_deferrals.defer({
              lineno: 133
            })));
            __iced_deferrals._fulfill();
          })(function() {
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "/Users/max/src/keybase-node-client/src/gpgkey.iced",
                funcname: "GpgKey.commit"
              });
              _this._sign_key(signer, esc(__iced_deferrals.defer({
                lineno: 134
              })));
              __iced_deferrals._fulfill();
            })(function() {
              (function(__iced_k) {
                __iced_deferrals = new iced.Deferrals(__iced_k, {
                  parent: ___iced_passed_deferral,
                  filename: "/Users/max/src/keybase-node-client/src/gpgkey.iced",
                  funcname: "GpgKey.commit"
                });
                _this._db_log(esc(__iced_deferrals.defer({
                  lineno: 135
                })));
                __iced_deferrals._fulfill();
              })(function() {
                log.debug("+ " + un + ": remove temporarily imported public key");
                return cb(null);
              });
            });
          });
        };
      })(this));
    };

    return GpgKey;

  })();

}).call(this);
