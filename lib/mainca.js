// Generated by IcedCoffeeScript 1.7.1-a
(function() {
  var ca, constants, env, fs, iced, log, make_esc, mkdir_p, path, __iced_k, __iced_k_noop, _certs;

  iced = require('iced-coffee-script').iced;
  __iced_k = __iced_k_noop = function() {};

  fs = require('fs');

  path = require('path');

  env = require('./env').env;

  make_esc = require('iced-error').make_esc;

  ca = require('./ca');

  constants = require('./constants');

  mkdir_p = require('iced-utils').fs.mkdir_p;

  log = require('./log');

  _certs = {};

  exports.get_file = function(host, cb) {
    var buf, cert, err, esc, fn, mode, ret, skip, stat, ___iced_passed_deferral, __iced_deferrals, __iced_k;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    mode = 0x180;
    log.debug("+ Get main CA cert (host=" + host + ")");
    cert = ca.certs[host];
    ret = _certs[host];
    esc = make_esc(cb, "mainca.get_file");
    (function(_this) {
      return (function(__iced_k) {
        if ((ret == null) && (cert != null)) {
          fn = path.join(env().get_ca_cert_dir(), host);
          log.debug("| file in question is '" + fn + "'");
          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "/Users/max/src/keybase/node-client/src/mainca.iced",
              funcname: "get_file"
            });
            fs.readFile(fn, __iced_deferrals.defer({
              assign_fn: (function() {
                return function() {
                  err = arguments[0];
                  return buf = arguments[1];
                };
              })(),
              lineno: 25
            }));
            __iced_deferrals._fulfill();
          })(function() {
            skip = false;
            (function(__iced_k) {
              if (typeof err !== "undefined" && err !== null) {
                return __iced_k(log.debug("| no existing cert found (" + err + ")"));
              } else {
                (function(__iced_k) {
                  __iced_deferrals = new iced.Deferrals(__iced_k, {
                    parent: ___iced_passed_deferral,
                    filename: "/Users/max/src/keybase/node-client/src/mainca.iced",
                    funcname: "get_file"
                  });
                  fs.stat(fn, __iced_deferrals.defer({
                    assign_fn: (function() {
                      return function() {
                        err = arguments[0];
                        return stat = arguments[1];
                      };
                    })(),
                    lineno: 30
                  }));
                  __iced_deferrals._fulfill();
                })(function() {
                  return __iced_k((typeof err !== "undefined" && err !== null) || (typeof stat === "undefined" || stat === null) ? log.debug("| failed to stat existing cert") : (stat.mode & 0x1ff) !== mode ? log.debug("| ignoring existing cert since its permissions are wrong") : (cert != null) && (cert !== buf.toString('utf8')) ? log.debug("| CA cert ignored, since it's wrong (according to ca.iced)") : (log.debug("| existing CA file checked out"), skip = true, ret = fn));
                });
              }
            })(function() {
              (function(__iced_k) {
                if (!skip && (cert != null)) {
                  (function(__iced_k) {
                    __iced_deferrals = new iced.Deferrals(__iced_k, {
                      parent: ___iced_passed_deferral,
                      filename: "/Users/max/src/keybase/node-client/src/mainca.iced",
                      funcname: "get_file"
                    });
                    mkdir_p(path.dirname(fn), 0x1c0, esc(__iced_deferrals.defer({
                      lineno: 43
                    })));
                    __iced_deferrals._fulfill();
                  })(function() {
                    log.info("Writing CA certfile to " + fn);
                    (function(__iced_k) {
                      __iced_deferrals = new iced.Deferrals(__iced_k, {
                        parent: ___iced_passed_deferral,
                        filename: "/Users/max/src/keybase/node-client/src/mainca.iced",
                        funcname: "get_file"
                      });
                      fs.writeFile(fn, cert, {
                        mode: mode
                      }, esc(__iced_deferrals.defer({
                        lineno: 45
                      })));
                      __iced_deferrals._fulfill();
                    })(__iced_k);
                  });
                } else {
                  return __iced_k();
                }
              })(function() {
                return __iced_k(ret != null ? _certs[host] = ret : void 0);
              });
            });
          });
        } else {
          return __iced_k();
        }
      });
    })(this)((function(_this) {
      return function() {
        log.debug("- get main CA cert -> " + ret);
        return cb(null, ret);
      };
    })(this));
  };

}).call(this);
