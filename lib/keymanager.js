// Generated by IcedCoffeeScript 1.7.0-a
(function() {
  var KeyManager, PackageJson, constants, env, iced, init, init_env, make_esc, master_ring, __iced_k, __iced_k_noop, _ref, _ref1;

  iced = require('iced-coffee-script').iced;
  __iced_k = __iced_k_noop = function() {};

  constants = require('./constants').constants;

  make_esc = require('iced-error').make_esc;

  PackageJson = require('./package').PackageJson;

  _ref = require('./keyring'), init = _ref.init, master_ring = _ref.master_ring;

  _ref1 = require('./env'), env = _ref1.env, init_env = _ref1.init_env;

  exports.KeyManager = KeyManager = (function() {
    function KeyManager(_arg) {
      this.username = _arg.username, this.config = _arg.config, this.passphrase = _arg.passphrase, this.ring = _arg.ring, this.tsenc = _arg.tsenc;
      this.ring || (this.ring = master_ring());
      this.key = null;
      this.lib = {
        KeyManager: require('kbpgp').KeyManager,
        Encryptor: require('triplesec').Encryptor
      };
    }

    KeyManager.generate = function(_arg, cb) {
      var config, err, km, passphrase, ring, username, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      username = _arg.username, config = _arg.config, passphrase = _arg.passphrase, ring = _arg.ring;
      username || (username = env().get_username());
      config || (config = constants.keygen);
      ring || (ring = master_ring());
      km = new KeyManager({
        username: username,
        config: config,
        passphrase: passphrase,
        ring: ring
      });
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/max/src/keybase-node-client/src/keymanager.iced",
            funcname: "KeyManager.generate"
          });
          km._gen(__iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                return err = arguments[0];
              };
            })(),
            lineno: 27
          }));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          if (typeof err !== "undefined" && err !== null) {
            km = null;
          }
          return cb(err, km);
        };
      })(this));
    };

    KeyManager.prototype._gen = function(cb) {
      var args, email, esc, h, script, stdin, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      esc = make_esc(cb, "KeyGen::Gen");
      h = constants.canonical_host;
      email = this.username + ("@" + h);
      script = ["%echo generating", "Key-Type: RSA", "Key-Length: " + this.config.master.bits, "Subkey-Type: RSA", "Subkey-Length: " + this.config.subkey.bits, "Name-Real: " + h + "/" + this.username, "Name-Email: " + email, "Expire-date: " + this.config.expire, "Passphrase: " + this.passphrase, "%commit"];
      stdin = script.join("\n");
      args = ["--batch", "--gen-key"];
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/max/src/keybase-node-client/src/keymanager.iced",
            funcname: "KeyManager._gen"
          });
          _this.ring.gpg({
            args: args,
            stdin: stdin,
            quiet: true
          }, esc(__iced_deferrals.defer({
            lineno: 51
          })));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          _this.key = _this.ring.make_key({
            username: "<" + email + ">",
            secret: true
          });
          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "/Users/max/src/keybase-node-client/src/keymanager.iced",
              funcname: "KeyManager._gen"
            });
            _this.key.load(esc(__iced_deferrals.defer({
              lineno: 53
            })));
            __iced_deferrals._fulfill();
          })(function() {
            return cb(null);
          });
        };
      })(this));
    };

    KeyManager.prototype.get_tsenc = function() {
      if (!this.tsenc) {
        this.tsenc = new this.lib.Encryptor({
          key: new Buffer(this.passphrase, 'utf8')
        });
      }
      return this.tsenc;
    };

    KeyManager.prototype.export_to_p3skb = function(cb) {
      var esc, raw, warnings, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      esc = make_esc(cb, "KeyManager::encrypt_to_p3skb");
      raw = this.key.key_data().toString('utf8');
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/max/src/keybase-node-client/src/keymanager.iced",
            funcname: "KeyManager.export_to_p3skb"
          });
          _this.lib.KeyManager.import_from_armored_pgp({
            raw: raw
          }, esc(__iced_deferrals.defer({
            assign_fn: (function(__slot_1) {
              return function() {
                __slot_1.km = arguments[0];
                return warnings = arguments[1];
              };
            })(_this),
            lineno: 68
          })));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          _this.warn("Export to P3SKB format", warnings);
          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "/Users/max/src/keybase-node-client/src/keymanager.iced",
              funcname: "KeyManager.export_to_p3skb"
            });
            _this.km.unlock_pgp({
              passphrase: _this.passphrase
            }, esc(__iced_deferrals.defer({
              lineno: 70
            })));
            __iced_deferrals._fulfill();
          })(function() {
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "/Users/max/src/keybase-node-client/src/keymanager.iced",
                funcname: "KeyManager.export_to_p3skb"
              });
              _this.km.sign({}, esc(__iced_deferrals.defer({
                lineno: 71
              })));
              __iced_deferrals._fulfill();
            })(function() {
              (function(__iced_k) {
                __iced_deferrals = new iced.Deferrals(__iced_k, {
                  parent: ___iced_passed_deferral,
                  filename: "/Users/max/src/keybase-node-client/src/keymanager.iced",
                  funcname: "KeyManager.export_to_p3skb"
                });
                _this.km.export_private_to_server({
                  tsenc: _this.get_tsenc()
                }, esc(__iced_deferrals.defer({
                  assign_fn: (function(__slot_1) {
                    return function() {
                      return __slot_1.p3skb = arguments[0];
                    };
                  })(_this),
                  lineno: 72
                })));
                __iced_deferrals._fulfill();
              })(function() {
                return cb(null, _this.p3skb);
              });
            });
          });
        };
      })(this));
    };

    KeyManager.prototype.set_passphrase = function(p) {
      this.passphrase = p;
      return this.tsenc = null;
    };

    KeyManager.import_from_p3skb = function(_arg, cb) {
      var err, km, passphrase, raw, ring, tsenc, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      raw = _arg.raw, ring = _arg.ring, tsenc = _arg.tsenc, passphrase = _arg.passphrase;
      km = new KeyManager({
        ring: ring,
        tsenc: tsenc,
        passphrase: passphrase
      });
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/max/src/keybase-node-client/src/keymanager.iced",
            funcname: "KeyManager.import_from_p3skb"
          });
          km._import_from_p3skb({
            raw: raw
          }, __iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                return err = arguments[0];
              };
            })(),
            lineno: 85
          }));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          if (typeof err !== "undefined" && err !== null) {
            km = null;
          }
          return cb(err, km);
        };
      })(this));
    };

    KeyManager.prototype.warn = function(what, warnings) {
      var w, _i, _len, _ref2, _results;
      _ref2 = warnings.warnings();
      _results = [];
      for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
        w = _ref2[_i];
        _results.push(log.warn("" + what + ": " + w));
      }
      return _results;
    };

    KeyManager.prototype.save_to_ring = function(_arg, cb) {
      var esc, key_data, passphrase, ring, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      passphrase = _arg.passphrase, ring = _arg.ring;
      esc = make_esc(cb, "KeyManager::save_to_ring");
      if (ring != null) {
        this.ring = ring;
      }
      if (passphrase != null) {
        this.set_passphrase(passphrase);
      }
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/max/src/keybase-node-client/src/keymanager.iced",
            funcname: "KeyManager.save_to_ring"
          });
          _this.km.sign({}, esc(__iced_deferrals.defer({
            lineno: 101
          })));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "/Users/max/src/keybase-node-client/src/keymanager.iced",
              funcname: "KeyManager.save_to_ring"
            });
            _this.km.export_pgp_private_to_client({
              passphrase: _this.passphrase
            }, esc(__iced_deferrals.defer({
              assign_fn: (function() {
                return function() {
                  return key_data = arguments[0];
                };
              })(),
              lineno: 102
            })));
            __iced_deferrals._fulfill();
          })(function() {
            _this.key = _this.ring.make_key({
              key_data: key_data,
              fingerprint: _this.km.get_pgp_fingerprint()
            });
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "/Users/max/src/keybase-node-client/src/keymanager.iced",
                funcname: "KeyManager.save_to_ring"
              });
              _this.key.save(esc(__iced_deferrals.defer({
                lineno: 104
              })));
              __iced_deferrals._fulfill();
            })(function() {
              return cb(null);
            });
          });
        };
      })(this));
    };

    KeyManager.prototype._import_from_p3skb = function(_arg, cb) {
      var esc, raw, warnings, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      raw = _arg.raw;
      esc = make_esc(cb, "KeyManager::_import_from_p3skb");
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/max/src/keybase-node-client/src/keymanager.iced",
            funcname: "KeyManager._import_from_p3skb"
          });
          _this.lib.KeyManager.import_from_p3skb({
            raw: raw
          }, esc(__iced_deferrals.defer({
            assign_fn: (function(__slot_1) {
              return function() {
                __slot_1.km = arguments[0];
                return warnings = arguments[1];
              };
            })(_this),
            lineno: 111
          })));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          _this.warn("Import from P3SKB format", warnings);
          (function(__iced_k) {
            if (_this.km.is_p3skb_locked() && (_this.passphrase != null)) {
              (function(__iced_k) {
                __iced_deferrals = new iced.Deferrals(__iced_k, {
                  parent: ___iced_passed_deferral,
                  filename: "/Users/max/src/keybase-node-client/src/keymanager.iced",
                  funcname: "KeyManager._import_from_p3skb"
                });
                _this.km.unlock_p3skb({
                  tsenc: _this.get_tsenc()
                }, esc(__iced_deferrals.defer({
                  lineno: 114
                })));
                __iced_deferrals._fulfill();
              })(__iced_k);
            } else {
              return __iced_k();
            }
          })(function() {
            return cb(null);
          });
        };
      })(this));
    };

    return KeyManager;

  })();

}).call(this);
