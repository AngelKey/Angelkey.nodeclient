// Generated by IcedCoffeeScript 1.6.3-i
(function() {
  var E, GE, KeyManager, gpg, iced, make_esc, __iced_k, __iced_k_noop, _ref;

  iced = require('iced-coffee-script/lib/coffee-script/iced').runtime;
  __iced_k = __iced_k_noop = function() {};

  gpg = require('gpg-wrapper').gpg;

  make_esc = require('iced-error').make_esc;

  _ref = require('./err'), GE = _ref.GE, E = _ref.E;

  exports.KeyManager = KeyManager = (function() {
    function KeyManager(_arg) {
      this.key = _arg.key, this.lookup = _arg.lookup, this.fingerprint = _arg.fingerprint, this.key_id = _arg.key_id;
    }

    KeyManager.load = function(id, cb) {
      var err, esc, m, obj, out, raw, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      out = null;
      obj = {
        lookup: id
      };
      esc = make_esc(cb, "KeyManager.load");
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/max/src/keybase-node-client/src/keymanager.iced",
            funcname: "KeyManager.load"
          });
          gpg({
            args: ["--export", "-a", id]
          }, esc(__iced_deferrals.defer({
            assign_fn: (function(__slot_1) {
              return function() {
                return __slot_1.key = arguments[0];
              };
            })(obj),
            lineno: 17
          })));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "/Users/max/src/keybase-node-client/src/keymanager.iced",
              funcname: "KeyManager.load"
            });
            gpg({
              args: ["--fingerprint", id]
            }, esc(__iced_deferrals.defer({
              assign_fn: (function() {
                return function() {
                  return raw = arguments[0];
                };
              })(),
              lineno: 18
            })));
            __iced_deferrals._fulfill();
          })(function() {
            if ((m = raw.toString().match(/Key fingerprint = ([A-F0-9 ]+)/)) != null) {
              obj.fingerprint = m[1].replace(new RegExp(" ", "g"), '').toLowerCase();
              obj.key_id = obj.fingerprint.slice(-16);
              out = new KeyManager(obj);
            } else {
              err = new GE.GpgError("Got unexpected GPG output when looking for a fingerprint");
            }
            return cb(err, out);
          });
        };
      })(this));
    };

    KeyManager.prototype.get_pgp_key_id = function() {
      return this.key_id;
    };

    KeyManager.prototype.get_pgp_fingerprint = function() {
      return this.fingerprint;
    };

    return KeyManager;

  })();

}).call(this);
