// Generated by IcedCoffeeScript 1.6.3-i
(function() {
  var Logger, bold_red, c, colors, error, info, log, rpc, warn, winston, _daemonize,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  colors = require('colors');

  winston = require('winston');

  rpc = require('framed-msgpack-rpc').log;

  _daemonize = false;

  c = function(fn, msg) {
    if (_daemonize) {
      return msg;
    } else {
      return fn(msg);
    }
  };

  bold_red = function(x) {
    return colors.bold(colors.red(x));
  };

  exports.log = log = function(msg) {
    return info(msg);
  };

  exports.warn = warn = function(msg) {
    return winston.warn(c(colors.magenta, msg));
  };

  exports.error = error = function(msg) {
    return winston.error(c(bold_red, msg));
  };

  exports.info = info = function(msg) {
    return winston.info(c(colors.green, msg));
  };

  exports.debug = info = function(msg) {
    return winston.debug(msg);
  };

  exports.daemonize = function(file) {
    _daemonize = true;
    winston.add(winston.transports.File, {
      filename: file,
      json: false
    });
    return winston.remove(winston.transports.Console);
  };

  Logger = (function(_super) {
    __extends(Logger, _super);

    function Logger() {
      return Logger.__super__.constructor.apply(this, arguments);
    }

    Logger.prototype._log = function(m, l, ohook) {
      var map, msg, parts;
      parts = [];
      if (this.prefix != null) {
        parts.push(this.prefix);
      }
      parts.push(m);
      msg = parts.join(" ");
      map = {
        D: "debug",
        I: "info",
        W: "warn",
        E: "error",
        F: "fatal"
      };
      l = map[l] || "warn";
      return exports[l](msg);
    };

    Logger.prototype.make_child = function(d) {
      return new Logger(d);
    };

    return Logger;

  })(rpc.Logger);

  rpc.set_default_logger_class(Logger);

}).call(this);
