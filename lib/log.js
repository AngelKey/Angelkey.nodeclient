// Generated by IcedCoffeeScript 1.6.3-g
(function() {
  var Env, Level, Logger, Package, bold_red, colors, default_levels, init, rpc, _package, _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };



  colors = require('colors');

  rpc = require('framed-msgpack-rpc').log;

  bold_red = function(x) {
    return colors.bold(colors.red(x));
  };

  Env = (function() {
    function Env(_arg) {
      this.use_color = _arg.use_color, this.level = _arg.level;
    }

    Env.prototype.set_level = function(l) {
      return this.level = l;
    };

    Env.prototype.set_use_color = function(c) {
      return this.use_color = c;
    };

    return Env;

  })();

  Level = (function() {
    function Level(_arg) {
      this.level = _arg.level, this.color_fn = _arg.color_fn, this.prefix = _arg.prefix;
    }

    Level.prototype.log = function(env, msg) {
      var line, lines, _i, _len, _results;
      if (env.level <= this.level) {
        lines = msg.split("\n");
        _results = [];
        for (_i = 0, _len = lines.length; _i < _len; _i++) {
          line = lines[_i];
          _results.push(this._log_line(env, line));
        }
        return _results;
      }
    };

    Level.prototype._log_line = function(env, line) {
      line = [this.prefix + ":", line].join(' ');
      if ((this.color_fn != null) && env.use_color) {
        line = this.color_fn(line);
      }
      return this.__log_line(line);
    };

    Level.prototype.__log_line = function(x) {
      return console.log(x);
    };

    return Level;

  })();

  default_levels = {
    debug: new Level({
      level: 0,
      color_fn: colors.blue,
      prefix: "debug"
    }),
    info: new Level({
      level: 1,
      color_fn: colors.green,
      prefix: "info"
    }),
    warn: new Level({
      level: 2,
      color_fn: colors.magenta,
      prefix: "warn"
    }),
    error: new Level({
      level: 3,
      color_fn: bold_red,
      prefix: "error"
    })
  };

  Package = (function() {
    function Package(_arg) {
      var config, env, key, val, _fn,
        _this = this;
      env = _arg.env, config = _arg.config;
      this._env = env;
      this._config = config;
      _fn = function(k, v) {
        _this[k] = function(m) {
          return v.log(_this._env, m);
        };
        return _this[k.toUpperCase()] = v.level;
      };
      for (key in config) {
        val = config[key];
        _fn(key, val);
      }
    }

    Package.prototype.env = function() {
      return this._env;
    };

    Package.prototype.export_to = function(exports) {
      var k, v, _ref,
        _this = this;
      _ref = this._config;
      for (k in _ref) {
        v = _ref[k];
        exports[k] = this[k];
      }
      return exports["package"] = function() {
        return _this;
      };
    };

    return Package;

  })();

  _package = null;

  exports.init = init = function(_arg) {
    var config, env;
    env = _arg.env, config = _arg.config;
    return (_package = new Package({
      env: env,
      config: config
    })).export_to(exports);
  };

  init({
    env: new Env({
      use_color: true,
      level: default_levels.info.level
    }),
    config: default_levels
  });

  Logger = (function(_super) {
    __extends(Logger, _super);

    function Logger() {
      _ref = Logger.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    Logger.prototype._log = function(m, l, ohook) {
      var map, msg, parts;
      parts = [];
      if (this.prefix != null) {
        parts.push(this.prefix);
      }
      parts.push(m);
      msg = parts.join(" ");
      map = {
        D: "debug",
        I: "info",
        W: "warn",
        E: "error",
        F: "fatal"
      };
      l = map[l] || "warn";
      return _pacakage[l](msg);
    };

    Logger.prototype.make_child = function(d) {
      return new Logger(d);
    };

    return Logger;

  })(rpc.Logger);

  rpc.set_default_logger_class(Logger);

}).call(this);
