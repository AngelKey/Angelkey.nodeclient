// Generated by IcedCoffeeScript 1.6.3-g
(function() {
  var E, Session, env, iced, make_esc, req, __iced_k, __iced_k_noop;

  iced = require('iced-coffee-script/lib/coffee-script/iced').runtime;
  __iced_k = __iced_k_noop = function() {};

  env = require('./env').env;

  req = require('./req');

  E = require('./err').E;

  make_esc = require('iced-error').make_esc;

  Session = (function() {
    function Session() {}

    Session.prototype.get_id = function(cb) {
      var err, ret, s;
      err = ret = null;
      if ((s = env().session) == null) {
        err = new E.InternalError("no session object available");
      } else {
        ret = s.obj().session;
      }
      return cb(err, ret);
    };

    Session.prototype.check = function(cb) {
      var esc, id, ___iced_passed_deferral, __iced_deferrals, __iced_k,
        _this = this;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      esc = make_esc(cb, "Session::check");
      (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "src/session.iced",
          funcname: "Session.check"
        });
        _this.get_id(esc(__iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              return id = arguments[0];
            };
          })(),
          lineno: 28
        })));
        __iced_deferrals._fulfill();
      })(function() {
        return cb(null);
      });
    };

    return Session;

  })();

}).call(this);
