// Generated by IcedCoffeeScript 1.6.3-g
(function() {
  var Config, E, Session, env, iced, k, make_esc, req, __iced_k, __iced_k_noop, _fn, _session,
    __slice = [].slice;

  iced = require('iced-coffee-script/lib/coffee-script/iced').runtime;
  __iced_k = __iced_k_noop = function() {};

  env = require('./env').env;

  req = require('./req');

  E = require('./err').E;

  make_esc = require('iced-error').make_esc;

  Config = require('./config').Config;

  exports.Session = Session = (function() {
    function Session() {
      this._file = null;
      this._loaded = false;
      this._id = null;
      this._logged_in = false;
    }

    Session.prototype.load = function(cb) {
      var err, s, ___iced_passed_deferral, __iced_deferrals, __iced_k,
        _this = this;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      if (!this._file) {
        this._file = new Config(env().get_session_filename(), {
          quiet: true
        });
      }
      (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "src/session.iced",
          funcname: "Session.load"
        });
        _this._file.open(__iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              return err = arguments[0];
            };
          })(),
          lineno: 24
        }));
        __iced_deferrals._fulfill();
      })(function() {
        var _ref;
        if ((typeof err === "undefined" || err === null) && _this._file.found) {
          _this._loaded = true;
          if ((s = (_ref = _this._file.obj()) != null ? _ref.session : void 0) != null) {
            req.set_session(s);
            _this._id = s;
          }
        }
        return cb(err);
      });
    };

    Session.prototype.set_id = function(s) {
      this._id = s;
      req.set_session(s);
      return this._file.set("session", s);
    };

    Session.prototype.write = function(cb) {
      var err, ___iced_passed_deferral, __iced_deferrals, __iced_k,
        _this = this;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      err = null;
      (function(__iced_k) {
        if (!_this._loaded) {
          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "src/session.iced",
              funcname: "Session.write"
            });
            _this.load(__iced_deferrals.defer({
              assign_fn: (function() {
                return function() {
                  return err = arguments[0];
                };
              })(),
              lineno: 43
            }));
            __iced_deferrals._fulfill();
          })(__iced_k);
        } else {
          return __iced_k();
        }
      })(function() {
        (function(__iced_k) {
          if (err == null) {
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "src/session.iced",
                funcname: "Session.write"
              });
              _this._file.write(__iced_deferrals.defer({
                assign_fn: (function() {
                  return function() {
                    return err = arguments[0];
                  };
                })(),
                lineno: 44
              }));
              __iced_deferrals._fulfill();
            })(__iced_k);
          } else {
            return __iced_k();
          }
        })(function() {
          return cb(err);
        });
      });
    };

    Session.prototype.get_id = function() {
      var _ref, _ref1;
      return this._id || ((_ref = this._file) != null ? (_ref1 = _ref.obj()) != null ? _ref1.session : void 0 : void 0);
    };

    Session.prototype.check = function(cb) {
      var body, err, ___iced_passed_deferral, __iced_deferrals, __iced_k,
        _this = this;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      (function(__iced_k) {
        if (req.get_session()) {
          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "src/session.iced",
              funcname: "Session.check"
            });
            req.get({
              endpoint: "sesscheck"
            }, __iced_deferrals.defer({
              assign_fn: (function() {
                return function() {
                  err = arguments[0];
                  return body = arguments[1];
                };
              })(),
              lineno: 55
            }));
            __iced_deferrals._fulfill();
          })(function() {
            var _ref;
            return __iced_k(typeof err === "undefined" || err === null ? _this._logged_in = true : err && (err instanceof E.KeybaseError) && ((typeof body !== "undefined" && body !== null ? (_ref = body.status) != null ? _ref.name : void 0 : void 0) === "BAD_SESSION") ? err = null : void 0);
          });
        } else {
          return __iced_k();
        }
      })(function() {
        return cb(err, _this._logged_in);
      });
    };

    Session.prototype.logged_in = function() {
      return this._logged_in;
    };

    return Session;

  })();

  exports.session = _session = new Session;

  _fn = function(fname) {
    return exports[fname] = function() {
      var args;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return _session[fname].apply(_session, args);
    };
  };
  for (k in Session.prototype) {
    _fn(k);
  }

}).call(this);
