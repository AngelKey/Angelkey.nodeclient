// Generated by IcedCoffeeScript 1.6.3-i
(function() {
  var Config, E, ProgressBar, SC, Session, constants, env, iced, k, make_esc, prompt_email_and_username, prompt_passphrase, req, triplesec, __iced_k, __iced_k_noop, _fn, _ref, _session,
    __slice = [].slice;

  iced = require('iced-coffee-script/lib/coffee-script/iced').runtime;
  __iced_k = __iced_k_noop = function() {};

  env = require('./env').env;

  req = require('./req');

  E = require('./err').E;

  make_esc = require('iced-error').make_esc;

  Config = require('./config').Config;

  _ref = require('./prompter'), prompt_passphrase = _ref.prompt_passphrase, prompt_email_and_username = _ref.prompt_email_and_username;

  constants = require('./constants').constants;

  SC = constants.security;

  triplesec = require('triplesec');

  ProgressBar = require('progress');

  exports.Session = Session = (function() {
    Session.prototype.get_passphrase = function(cb) {
      var err, pp, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      err = null;
      pp = env().get_passphrase();
      (function(_this) {
        return (function(__iced_k) {
          if (pp == null) {
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "/Users/max/src/keybase-node-client/src/session.iced",
                funcname: "Session.get_passphrase"
              });
              prompt_passphrase(__iced_deferrals.defer({
                assign_fn: (function() {
                  return function() {
                    err = arguments[0];
                    return pp = arguments[1];
                  };
                })(),
                lineno: 22
              }));
              __iced_deferrals._fulfill();
            })(__iced_k);
          } else {
            return __iced_k();
          }
        });
      })(this)((function(_this) {
        return function() {
          return cb(err, pp);
        };
      })(this));
    };

    Session.prototype.get_email_or_username = function(cb) {
      var c, email, err, username, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      err = null;
      username = env().get_username();
      email = env().get_username();
      (function(_this) {
        return (function(__iced_k) {
          if (!((username != null) || (email != null))) {
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "/Users/max/src/keybase-node-client/src/session.iced",
                funcname: "Session.get_email_or_username"
              });
              prompt_email_or_username(__iced_deferrals.defer({
                assign_fn: (function() {
                  return function() {
                    err = arguments[0];
                    email = arguments[1].email;
                    return username = arguments[1].username;
                  };
                })(),
                lineno: 32
              }));
              __iced_deferrals._fulfill();
            })(function() {
              return __iced_k(err == null ? (c = env().config, email != null ? c.set("user.email", email) : void 0, typeof name !== "undefined" && name !== null ? c.set("user.name", name) : void 0) : void 0);
            });
          } else {
            return __iced_k();
          }
        });
      })(this)((function(_this) {
        return function() {
          return cb(err, username || email);
        };
      })(this));
    };

    function Session() {
      this._file = null;
      this._loaded = false;
      this._id = null;
      this._logged_in = false;
      this._salt = null;
    }

    Session.prototype.load = function(cb) {
      var c, err, o, s, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      if (!this._file) {
        this._file = new Config(env().get_session_filename(), {
          quiet: true
        });
      }
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/max/src/keybase-node-client/src/session.iced",
            funcname: "Session.load"
          });
          _this._file.open(__iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                return err = arguments[0];
              };
            })(),
            lineno: 53
          }));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          if ((typeof err === "undefined" || err === null) && _this._file.found) {
            _this._loaded = true;
            if ((o = _this._file.obj()) != null) {
              if ((s = o.session) != null) {
                req.set_session(s);
                _this._id = s;
              }
              if ((c = o.csrf) != null) {
                req.set_csrf(c);
                _this._csrf = c;
              }
            }
          }
          return cb(err);
        };
      })(this));
    };

    Session.prototype.set_id = function(s) {
      this._id = s;
      req.set_session(s);
      return this._file.set("session", s);
    };

    Session.prototype.set_csrf = function(c) {
      this._csrf = c;
      req.set_csrf(c);
      return this._file.set("csrf", c);
    };

    Session.prototype.write = function(cb) {
      var esc, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      esc = make_esc(cb, "write");
      (function(_this) {
        return (function(__iced_k) {
          if (!_this._loaded) {
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "/Users/max/src/keybase-node-client/src/session.iced",
                funcname: "Session.write"
              });
              _this.load(esc(__iced_deferrals.defer({
                lineno: 83
              })));
              __iced_deferrals._fulfill();
            })(__iced_k);
          } else {
            return __iced_k();
          }
        });
      })(this)((function(_this) {
        return function() {
          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "/Users/max/src/keybase-node-client/src/session.iced",
              funcname: "Session.write"
            });
            _this._file.write(esc(__iced_deferrals.defer({
              lineno: 84
            })));
            __iced_deferrals._fulfill();
          })(function() {
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "/Users/max/src/keybase-node-client/src/session.iced",
                funcname: "Session.write"
              });
              env().config.write(esc(__iced_deferrals.defer({
                lineno: 85
              })));
              __iced_deferrals._fulfill();
            })(function() {
              return cb(null);
            });
          });
        };
      })(this));
    };

    Session.prototype.gen_pwh = function(_arg, cb) {
      var bar, err, extra_keymaterial, km, passphrase, prev, progress_hook, salt, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      passphrase = _arg.passphrase, salt = _arg.salt;
      salt || (salt = this._salt);
      this.enc = new triplesec.Encryptor({
        key: new Buffer(passphrase, 'utf8'),
        version: SC.triplesec.version
      });
      bar = null;
      prev = 0;
      progress_hook = function(obj) {
        if (obj.what !== "scrypt") {

        } else {
          bar || (bar = new ProgressBar("- run scrypt [:bar] :percent", {
            width: 35,
            total: obj.total
          }));
          bar.tick(obj.i - prev);
          return prev = obj.i;
        }
      };
      extra_keymaterial = SC.pwh.derived_key_bytes + SC.openpgp.derived_key_bytes;
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/max/src/keybase-node-client/src/session.iced",
            funcname: "Session.gen_pwh"
          });
          _this.enc.resalt({
            salt: salt,
            extra_keymaterial: extra_keymaterial,
            progress_hook: progress_hook
          }, __iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                err = arguments[0];
                return km = arguments[1];
              };
            })(),
            lineno: 109
          }));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          if (typeof err === "undefined" || err === null) {
            _this._salt = _this.enc.salt.to_buffer();
            _this._pwh = km.extra.slice(0, SC.pwh.derived_key_bytes);
          }
          return cb(err, _this._pwh, _this._salt);
        };
      })(this));
    };

    Session.prototype.get_id = function() {
      var _ref1, _ref2;
      return this._id || ((_ref1 = this._file) != null ? (_ref2 = _ref1.obj()) != null ? _ref2.session : void 0 : void 0);
    };

    Session.prototype.check = function(cb) {
      var body, err, t, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      (function(_this) {
        return (function(__iced_k) {
          if (req.get_session()) {
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "/Users/max/src/keybase-node-client/src/session.iced",
                funcname: "Session.check"
              });
              req.get({
                endpoint: "sesscheck"
              }, __iced_deferrals.defer({
                assign_fn: (function() {
                  return function() {
                    err = arguments[0];
                    return body = arguments[1];
                  };
                })(),
                lineno: 123
              }));
              __iced_deferrals._fulfill();
            })(function() {
              var _ref1;
              return __iced_k(typeof err === "undefined" || err === null ? (_this._logged_in = true, env().config.set("user.id", body.logged_in_uid), (t = body.csrf_token) != null ? _this.set_csrf(t) : void 0) : err && (err instanceof E.KeybaseError) && ((typeof body !== "undefined" && body !== null ? (_ref1 = body.status) != null ? _ref1.name : void 0 : void 0) === "BAD_SESSION") ? err = null : void 0);
            });
          } else {
            return __iced_k();
          }
        });
      })(this)((function(_this) {
        return function() {
          return cb(err, _this._logged_in);
        };
      })(this));
    };

    Session.prototype.get_salt = function(args, cb) {
      var body, err, salt, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      salt = null;
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/max/src/keybase-node-client/src/session.iced",
            funcname: "Session.get_salt"
          });
          req.get({
            endpoint: "getsalt",
            args: args
          }, __iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                err = arguments[0];
                return body = arguments[1];
              };
            })(),
            lineno: 136
          }));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          if (typeof err === "undefined" || err === null) {
            salt = new Buffer(body.salt, 'hex');
            env().config.set("user.salt", body.salt);
          }
          return cb(err, salt);
        };
      })(this));
    };

    Session.prototype.post_login = function(args, cb) {
      var body, err, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/max/src/keybase-node-client/src/session.iced",
            funcname: "Session.post_login"
          });
          req.post({
            endpoint: "login",
            args: args
          }, __iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                err = arguments[0];
                return body = arguments[1];
              };
            })(),
            lineno: 145
          }));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          if (typeof err === "undefined" || err === null) {
            _this.set_id(body.session);
            _this.set_csrf(body.csrf_token);
            _this.uid = body.uid;
            _this._logged_in = true;
          }
          return cb(err);
        };
      })(this));
    };

    Session.prototype.login = function(cb) {
      var email_or_username, esc, passphrase, pwh, salt, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      esc = make_esc(cb, "login");
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/max/src/keybase-node-client/src/session.iced",
            funcname: "Session.login"
          });
          _this.check(esc(__iced_deferrals.defer({
            lineno: 157
          })));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          (function(__iced_k) {
            if (!_this.logged_in()) {
              (function(__iced_k) {
                __iced_deferrals = new iced.Deferrals(__iced_k, {
                  parent: ___iced_passed_deferral,
                  filename: "/Users/max/src/keybase-node-client/src/session.iced",
                  funcname: "Session.login"
                });
                _this.get_email_or_username(esc(__iced_deferrals.defer({
                  assign_fn: (function() {
                    return function() {
                      return email_or_username = arguments[0];
                    };
                  })(),
                  lineno: 159
                })));
                __iced_deferrals._fulfill();
              })(function() {
                (function(__iced_k) {
                  __iced_deferrals = new iced.Deferrals(__iced_k, {
                    parent: ___iced_passed_deferral,
                    filename: "/Users/max/src/keybase-node-client/src/session.iced",
                    funcname: "Session.login"
                  });
                  _this.get_passphrase(esc(__iced_deferrals.defer({
                    assign_fn: (function() {
                      return function() {
                        return passphrase = arguments[0];
                      };
                    })(),
                    lineno: 160
                  })));
                  __iced_deferrals._fulfill();
                })(function() {
                  (function(__iced_k) {
                    __iced_deferrals = new iced.Deferrals(__iced_k, {
                      parent: ___iced_passed_deferral,
                      filename: "/Users/max/src/keybase-node-client/src/session.iced",
                      funcname: "Session.login"
                    });
                    _this.get_salt({
                      email_or_username: email_or_username
                    }, esc(__iced_deferrals.defer({
                      assign_fn: (function() {
                        return function() {
                          return salt = arguments[0];
                        };
                      })(),
                      lineno: 161
                    })));
                    __iced_deferrals._fulfill();
                  })(function() {
                    (function(__iced_k) {
                      __iced_deferrals = new iced.Deferrals(__iced_k, {
                        parent: ___iced_passed_deferral,
                        filename: "/Users/max/src/keybase-node-client/src/session.iced",
                        funcname: "Session.login"
                      });
                      _this.gen_pwh({
                        passphrase: passphrase,
                        salt: salt
                      }, esc(__iced_deferrals.defer({
                        assign_fn: (function() {
                          return function() {
                            return pwh = arguments[0];
                          };
                        })(),
                        lineno: 162
                      })));
                      __iced_deferrals._fulfill();
                    })(function() {
                      (function(__iced_k) {
                        __iced_deferrals = new iced.Deferrals(__iced_k, {
                          parent: ___iced_passed_deferral,
                          filename: "/Users/max/src/keybase-node-client/src/session.iced",
                          funcname: "Session.login"
                        });
                        _this.post_login({
                          email_or_username: email_or_username,
                          pwh: pwh.toString('hex')
                        }, esc(__iced_deferrals.defer({
                          lineno: 163
                        })));
                        __iced_deferrals._fulfill();
                      })(__iced_k);
                    });
                  });
                });
              });
            } else {
              return __iced_k();
            }
          })(function() {
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "/Users/max/src/keybase-node-client/src/session.iced",
                funcname: "Session.login"
              });
              _this.write(esc(__iced_deferrals.defer({
                lineno: 164
              })));
              __iced_deferrals._fulfill();
            })(function() {
              return cb(null);
            });
          });
        };
      })(this));
    };

    Session.prototype.logged_in = function() {
      return this._logged_in;
    };

    return Session;

  })();

  exports.session = _session = new Session;

  _fn = function(fname) {
    return exports[fname] = function() {
      var args;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return _session[fname].apply(_session, args);
    };
  };
  for (k in Session.prototype) {
    _fn(k);
  }

}).call(this);
