// Generated by IcedCoffeeScript 1.6.3-g
(function() {
  var constants, db, gpg, iced, log, make_esc, __iced_k, __iced_k_noop;

  iced = require('iced-coffee-script/lib/coffee-script/iced').runtime;
  __iced_k = __iced_k_noop = function() {};

  db = require('./db').db;

  gpg = require('./gpg').gpg;

  log = require('./log');

  constants = require('./constants').constants;

  make_esc = require('iced-error').make_esc;

  exports.clean_key_imports = function(cb) {
    var args, err, esc, k, keys, state, ___iced_passed_deferral, __iced_deferrals, __iced_k,
      _this = this;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    esc = make_esc(cb, "clean_key_imports");
    log.debug("+ clean key imports");
    state = constants.import_state.TEMPORARY;
    (function(__iced_k) {
      __iced_deferrals = new iced.Deferrals(__iced_k, {
        parent: ___iced_passed_deferral,
        filename: "src/keyring.iced",
        funcname: "clean_key_imports"
      });
      db.select_key_imports_by_state(state, esc(__iced_deferrals.defer({
        assign_fn: (function() {
          return function() {
            return keys = arguments[0];
          };
        })(),
        lineno: 13
      })));
      __iced_deferrals._fulfill();
    })(function() {
      log.debug("| queried for temp keys, got: " + (JSON.stringify(keys)));
      (function(__iced_k) {
        if (keys.length) {
          args = ["--batch", "--delete-keys"].concat((function() {
            var _i, _len, _results;
            _results = [];
            for (_i = 0, _len = keys.length; _i < _len; _i++) {
              k = keys[_i];
              _results.push(k.toUpperCase());
            }
            return _results;
          })());
          log.debug("| calling GPG client with " + (JSON.stringify(args)));
          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "src/keyring.iced",
              funcname: "clean_key_imports"
            });
            gpg({
              args: args
            }, __iced_deferrals.defer({
              assign_fn: (function() {
                return function() {
                  return err = arguments[0];
                };
              })(),
              lineno: 18
            }));
            __iced_deferrals._fulfill();
          })(function() {
            state = constants.import_state.CANCELED;
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "src/keyring.iced",
                funcname: "clean_key_imports"
              });
              db.batch_update_key_import({
                fingerprints: keys,
                state: state
              }, esc(__iced_deferrals.defer({
                lineno: 20
              })));
              __iced_deferrals._fulfill();
            })(function() {
              return __iced_k(log.debug("- clean key imports"));
            });
          });
        } else {
          return __iced_k();
        }
      })(function() {
        return cb(null);
      });
    });
  };

}).call(this);
