// Generated by IcedCoffeeScript 1.6.3-g
(function() {
  var Client, E, env, iced, m, request, urlmod, __iced_k, __iced_k_noop, _cli,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },
    __slice = [].slice;

  iced = require('iced-coffee-script/lib/coffee-script/iced').runtime;
  __iced_k = __iced_k_noop = function() {};

  request = require('request');

  env = require('./env').env;

  urlmod = require('url');

  E = require('./err').E;

  m = function(dict, method) {
    dict.method = method;
    return dict;
  };

  Client = (function() {
    function Client(headers) {
      this.headers = headers;
    }

    Client.prototype.set_headers = function(h) {
      return this.headers = h;
    };

    Client.prototype.get_headers = function() {
      return this.headers;
    };

    Client.prototype.add_headers = function(d) {
      var k, v;
      this.headers || (this.headers = {});
      for (k in d) {
        v = d[k];
        this.headers[k] = v;
      }
      return true;
    };

    Client.prototype.req = function(_arg, cb) {
      var args, body, endpoint, err, http_status, kb_status, method, opts, res, uri_fields, ___iced_passed_deferral, __iced_deferrals, __iced_k,
        _this = this;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      method = _arg.method, endpoint = _arg.endpoint, args = _arg.args, http_status = _arg.http_status, kb_status = _arg.kb_status;
      opts = {
        method: method,
        json: true
      };
      if (this.headers != null) {
        opts.headers = this.headers;
      }
      kb_status || (kb_status = ["OK"]);
      http_status || (http_status = [200]);
      uri_fields = {
        protocol: "http" + (env().get_no_tls() ? '' : 's'),
        hostname: env().get_host(),
        port: env().get_port(),
        pathname: [env().get_api_uri_prefix(), endpoint + ".json"].join("/")
      };
      if (method === 'GET' || method === 'DELETE') {
        uri_fields.query = args;
      }
      opts.uri = urlmod.format(uri_fields);
      if (method === 'POST') {
        opts.body = args;
      }
      console.log(opts);
      (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "src/req.iced",
          funcname: "Client.req"
        });
        request(opts, __iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              err = arguments[0];
              res = arguments[1];
              return body = arguments[2];
            };
          })(),
          lineno: 48
        }));
        __iced_deferrals._fulfill();
      })(function() {
        var _ref, _ref1, _ref2;
        if (typeof err !== "undefined" && err !== null) {

        } else if (!(_ref = res.statusCode, __indexOf.call(http_status, _ref) >= 0)) {
          err = new E.HttpError("Got reply " + res.statusCode);
        } else if (!(_ref1 = typeof body !== "undefined" && body !== null ? (_ref2 = body.status) != null ? _ref2.name : void 0 : void 0, __indexOf.call(kb_status, _ref1) >= 0)) {
          err = new E.KeybaseError("Got status " + (JSON.stringify(body.status)));
        }
        return cb(err, body, res);
      });
    };

    Client.prototype.post = function(args, cb) {
      return this.req(m(args, "POST"), cb);
    };

    Client.prototype.get = function(args, cb) {
      return this.req(m(args, "GET"), cb);
    };

    return Client;

  })();

  _cli = new Client();

  module.exports = {
    client: _cli,
    Client: Client,
    get: function() {
      var args;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return _cli.get.apply(_cli, args);
    },
    post: function() {
      var args;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return _cli.post.apply(_cli, args);
    },
    req: function() {
      var args;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return _cli.req.apply(_cli, args);
    }
  };

}).call(this);
