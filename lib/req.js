// Generated by IcedCoffeeScript 1.7.1-a
(function() {
  var Client, E, PackageJson, certs, env, iced, k, log, m, request, urlmod, __iced_k, __iced_k_noop, _cli, _fn,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },
    __slice = [].slice;

  iced = require('iced-coffee-script').iced;
  __iced_k = __iced_k_noop = function() {};

  request = require('request');

  env = require('./env').env;

  urlmod = require('url');

  E = require('./err').E;

  log = require('./log');

  certs = require('./ca').certs;

  PackageJson = require('./package').PackageJson;

  m = function(dict, method) {
    dict.method = method;
    return dict;
  };

  exports.Client = Client = (function() {
    function Client(headers) {
      this.headers = headers;
      this._cookies = {};
      this._session = null;
      this._csrf = null;
      this._warned = false;
    }

    Client.prototype.set_headers = function(h) {
      return this.headers = h;
    };

    Client.prototype.get_headers = function() {
      return this.headers;
    };

    Client.prototype.add_headers = function(d) {
      var k, v;
      this.headers || (this.headers = {});
      for (k in d) {
        v = d[k];
        this.headers[k] = v;
      }
      return true;
    };

    Client.prototype.set_session = function(s) {
      this.add_headers({
        "X-Keybase-Session": s
      });
      return this._session = s;
    };

    Client.prototype.set_csrf = function(c) {
      this.add_headers({
        "X-CSRF-Token": c
      });
      return this._csrf = c;
    };

    Client.prototype.get_session = function() {
      return this._session;
    };

    Client.prototype.get_csrf = function() {
      return this._csrf;
    };

    Client.prototype._find_cookies = function(res) {
      var cookie_line, name, parts, v, val, _i, _len, _ref, _ref1, _results;
      if ((v = (_ref = res.headers) != null ? _ref['set-cookie'] : void 0) != null) {
        _results = [];
        for (_i = 0, _len = v.length; _i < _len; _i++) {
          cookie_line = v[_i];
          parts = cookie_line.split("; ");
          if (parts.length) {
            _ref1 = parts[0].split("="), name = _ref1[0], val = _ref1[1];
            _results.push(this._cookies[name] = decodeURIComponent(val));
          } else {
            _results.push(void 0);
          }
        }
        return _results;
      }
    };

    Client.prototype.req = function(_arg, cb) {
      var args, body, ca, endpoint, err, http_status, kb_status, method, opts, res, tls, uri_fields, v, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      method = _arg.method, endpoint = _arg.endpoint, args = _arg.args, http_status = _arg.http_status, kb_status = _arg.kb_status;
      method || (method = 'GET');
      opts = {
        method: method,
        json: true,
        jar: true
      };
      opts.headers = this.headers || {};
      opts.headers["X-Keybase-Client"] = (new PackageJson).identify_as();
      kb_status || (kb_status = ["OK"]);
      http_status || (http_status = [200]);
      tls = !env().get_no_tls();
      uri_fields = {
        protocol: "http" + (tls ? 's' : ''),
        hostname: env().get_host(),
        port: env().get_port(),
        pathname: [env().get_api_uri_prefix(), endpoint + ".json"].join("/")
      };
      if (method === 'GET' || method === 'DELETE') {
        uri_fields.query = args;
      }
      opts.uri = urlmod.format(uri_fields);
      if (method === 'POST') {
        opts.body = args;
      }
      if (tls && ((ca = certs[uri_fields.hostname]) != null)) {
        log.debug("| Adding a custom CA for host " + uri_fields.hostname + " when tls=" + tls);
        opts.ca = [ca];
      }
      log.debug("+ request to " + endpoint + " (" + opts.uri + ")");
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/home/max/src/keybase-node-client/src/req.iced",
            funcname: "Client.req"
          });
          request(opts, __iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                err = arguments[0];
                res = arguments[1];
                return body = arguments[2];
              };
            })(),
            lineno: 88
          }));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          var _ref, _ref1, _ref2, _ref3, _ref4;
          if (typeof err !== "undefined" && err !== null) {

          } else if (!(_ref = res.statusCode, __indexOf.call(http_status, _ref) >= 0)) {
            if (res.statusCode === 400 && ((_ref1 = res.headers) != null ? _ref1["x-keybase-client-unsupported"] : void 0)) {
              v = res.headers["x-keybase-client-upgrade-to"];
              err = new E.RequiredUpgradeError("Upgrade is required! Run `keybase-installer` to upgrade to v" + v);
              err.upgrade_to = v;
            } else {
              err = new E.HttpError("Got reply " + res.statusCode);
            }
          } else if (!(_ref2 = typeof body !== "undefined" && body !== null ? (_ref3 = body.status) != null ? _ref3.name : void 0 : void 0, __indexOf.call(kb_status, _ref2) >= 0)) {
            err = new E.KeybaseError("" + body.status.desc + " (error #" + body.status.code + ")");
            err.fields = ((_ref4 = body.status) != null ? _ref4.fields : void 0) || {};
            log.debug("Full request: " + (JSON.stringify(opts)));
            log.debug("Full reply: " + (JSON.stringify(body)));
          } else {
            if (((v = res.headers["x-keybase-client-upgrade-to"]) != null) && !_this._warned) {
              log.warn("Upgrade suggested! Run `keybase-installer` to upgrade to v" + v);
              _this._warned = true;
            }
            _this._find_cookies(res);
          }
          log.debug("- request to " + endpoint + " -> " + err);
          return cb(err, body, res);
        };
      })(this));
    };

    Client.prototype.post = function(args, cb) {
      return this.req(m(args, "POST"), cb);
    };

    Client.prototype.get = function(args, cb) {
      return this.req(m(args, "GET"), cb);
    };

    Client.prototype.cookies = function() {
      return this._cookies;
    };

    return Client;

  })();

  exports.client = _cli = new Client();

  _fn = function(fname) {
    return exports[fname] = function() {
      var args;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return _cli[fname].apply(_cli, args);
    };
  };
  for (k in Client.prototype) {
    _fn(k);
  }

}).call(this);
