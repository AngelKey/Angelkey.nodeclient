// Generated by IcedCoffeeScript 1.6.3-i
(function() {
  var E, ST, TrackSubSubCommand, TrackWrapper, User, colors, constants, db, deq, env, iced, log, make_esc, prompt_yn, proof_type_to_string, proofs, session, unix_time, util, __iced_k, __iced_k_noop;

  iced = require('iced-coffee-script/lib/coffee-script/iced').runtime;
  __iced_k = __iced_k_noop = function() {};

  db = require('./db').db;

  constants = require('./constants').constants;

  log = require('./log');

  proofs = require('keybase-proofs');

  proof_type_to_string = proofs.proof_type_to_string;

  ST = constants.signature_types;

  deq = require('deep-equal');

  E = require('./err').E;

  unix_time = require('pgp-utils').util.unix_time;

  make_esc = require('iced-error').make_esc;

  prompt_yn = require('./prompter').prompt_yn;

  colors = require('colors');

  session = require('./session').session;

  User = require('./user').User;

  db = require('./db');

  util = require('util');

  env = require('./env').env;

  TrackWrapper = require('./trackwrapper').TrackWrapper;

  exports.TrackSubSubCommand = TrackSubSubCommand = (function() {
    function TrackSubSubCommand(_arg) {
      this.args = _arg.args, this.opts = _arg.opts;
    }

    TrackSubSubCommand.prototype.prompt_ok = function(warnings, cb) {
      var err, prompt, ret, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      prompt = warnings ? (log.console.log(colors.red("Some remote proofs failed!")), "Still verify this user?") : "Are you satisfied with these proofs?";
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/max/src/keybase-node-client/src/tracksubsub.iced",
            funcname: "TrackSubSubCommand.prompt_ok"
          });
          prompt_yn({
            prompt: prompt,
            defval: false
          }, __iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                err = arguments[0];
                return ret = arguments[1];
              };
            })(),
            lineno: 36
          }));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          return cb(err, ret);
        };
      })(this));
    };

    TrackSubSubCommand.prototype.prompt_track = function(cb) {
      var err, prompt, ret, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      ret = err = null;
      (function(_this) {
        return (function(__iced_k) {
          if (_this.opts.remote) {
            return __iced_k(ret = true);
          } else {
            (function(__iced_k) {
              if (_this.opts.batch || _this.opts.local) {
                return __iced_k(ret = false);
              } else {
                prompt = "Permnanently track this user, and write proof to server?";
                (function(__iced_k) {
                  __iced_deferrals = new iced.Deferrals(__iced_k, {
                    parent: ___iced_passed_deferral,
                    filename: "/Users/max/src/keybase-node-client/src/tracksubsub.iced",
                    funcname: "TrackSubSubCommand.prompt_track"
                  });
                  prompt_yn({
                    prompt: prompt,
                    defval: true
                  }, __iced_deferrals.defer({
                    assign_fn: (function() {
                      return function() {
                        err = arguments[0];
                        return ret = arguments[1];
                      };
                    })(),
                    lineno: 47
                  }));
                  __iced_deferrals._fulfill();
                })(__iced_k);
              }
            })(__iced_k);
          }
        });
      })(this)((function(_this) {
        return function() {
          return cb(err, ret);
        };
      })(this));
    };

    TrackSubSubCommand.prototype.run = function(cb) {
      var accept, err, esc, found, me, them, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      esc = make_esc(cb, "Verify::run");
      log.debug("+ run");
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/max/src/keybase-node-client/src/tracksubsub.iced",
            funcname: "TrackSubSubCommand.run"
          });
          User.load_me(esc(__iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                return me = arguments[0];
              };
            })(),
            lineno: 56
          })));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "/Users/max/src/keybase-node-client/src/tracksubsub.iced",
              funcname: "TrackSubSubCommand.run"
            });
            User.load({
              username: _this.args.them
            }, esc(__iced_deferrals.defer({
              assign_fn: (function() {
                return function() {
                  return them = arguments[0];
                };
              })(),
              lineno: 58
            })));
            __iced_deferrals._fulfill();
          })(function() {
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "/Users/max/src/keybase-node-client/src/tracksubsub.iced",
                funcname: "TrackSubSubCommand.run"
              });
              them.import_public_key(esc(__iced_deferrals.defer({
                assign_fn: (function() {
                  return function() {
                    return found = arguments[0];
                  };
                })(),
                lineno: 59
              })));
              __iced_deferrals._fulfill();
            })(function() {
              (function(__iced_k) {
                __iced_deferrals = new iced.Deferrals(__iced_k, {
                  parent: ___iced_passed_deferral,
                  filename: "/Users/max/src/keybase-node-client/src/tracksubsub.iced",
                  funcname: "TrackSubSubCommand.run"
                });
                _this._run2({
                  me: me,
                  them: them
                }, __iced_deferrals.defer({
                  assign_fn: (function() {
                    return function() {
                      err = arguments[0];
                      return accept = arguments[1];
                    };
                  })(),
                  lineno: 63
                }));
                __iced_deferrals._fulfill();
              })(function() {
                (function(__iced_k) {
                  if (accept) {
                    log.debug("| commit_key");
                    (function(__iced_k) {
                      __iced_deferrals = new iced.Deferrals(__iced_k, {
                        parent: ___iced_passed_deferral,
                        filename: "/Users/max/src/keybase-node-client/src/tracksubsub.iced",
                        funcname: "TrackSubSubCommand.run"
                      });
                      them.commit_key(esc(__iced_deferrals.defer({
                        lineno: 67
                      })));
                      __iced_deferrals._fulfill();
                    })(__iced_k);
                  } else {
                    (function(__iced_k) {
                      if (!found) {
                        log.debug("| remove_key");
                        (function(__iced_k) {
                          __iced_deferrals = new iced.Deferrals(__iced_k, {
                            parent: ___iced_passed_deferral,
                            filename: "/Users/max/src/keybase-node-client/src/tracksubsub.iced",
                            funcname: "TrackSubSubCommand.run"
                          });
                          them.remove_key(esc(__iced_deferrals.defer({
                            lineno: 70
                          })));
                          __iced_deferrals._fulfill();
                        })(__iced_k);
                      } else {
                        return __iced_k();
                      }
                    })(__iced_k);
                  }
                })(function() {
                  log.debug("- run");
                  return cb(err);
                });
              });
            });
          });
        };
      })(this));
    };

    TrackSubSubCommand.prototype._run2 = function(_arg, cb) {
      var accept, approve, check, do_remote, err, esc, me, n_warnings, skp, store, them, trackw, warnings, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      me = _arg.me, them = _arg.them;
      esc = make_esc(cb, "Verify::_run2");
      log.debug("+ _run2");
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/max/src/keybase-node-client/src/tracksubsub.iced",
            funcname: "TrackSubSubCommand._run2"
          });
          them.verify(esc(__iced_deferrals.defer({
            lineno: 81
          })));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "/Users/max/src/keybase-node-client/src/tracksubsub.iced",
              funcname: "TrackSubSubCommand._run2"
            });
            TrackWrapper.load({
              tracker: me,
              trackee: them
            }, esc(__iced_deferrals.defer({
              assign_fn: (function() {
                return function() {
                  return trackw = arguments[0];
                };
              })(),
              lineno: 82
            })));
            __iced_deferrals._fulfill();
          })(function() {
            check = trackw.skip_remote_check();
            if (check === constants.skip.NONE) {
              log.console.log("...checking identity proofs");
              skp = false;
            } else {
              log.info("...all remote checks are up-to-date");
              skp = true;
            }
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "/Users/max/src/keybase-node-client/src/tracksubsub.iced",
                funcname: "TrackSubSubCommand._run2"
              });
              them.check_remote_proofs(skp, esc(__iced_deferrals.defer({
                assign_fn: (function() {
                  return function() {
                    return warnings = arguments[0];
                  };
                })(),
                lineno: 91
              })));
              __iced_deferrals._fulfill();
            })(function() {
              n_warnings = warnings.warnings().length;
              store = true;
              (function(__iced_k) {
                if ((approve = trackw.skip_approval()) !== constants.skip.NONE) {
                  log.debug("| skipping approval, since remote services & key are unchanged");
                  return __iced_k(accept = true);
                } else {
                  (function(__iced_k) {
                    if (_this.opts.batch) {
                      log.debug("| We needed approval, but we were in batch mode");
                      return __iced_k(accept = false);
                    } else {
                      (function(__iced_k) {
                        if (_this.opts.id) {
                          log.debug("| We are just ID'ing this user, no reason to prompt");
                          return __iced_k(store = false);
                        } else {
                          (function(__iced_k) {
                            __iced_deferrals = new iced.Deferrals(__iced_k, {
                              parent: ___iced_passed_deferral,
                              filename: "/Users/max/src/keybase-node-client/src/tracksubsub.iced",
                              funcname: "TrackSubSubCommand._run2"
                            });
                            _this.prompt_ok(n_warnings, esc(__iced_deferrals.defer({
                              assign_fn: (function() {
                                return function() {
                                  return accept = arguments[0];
                                };
                              })(),
                              lineno: 105
                            })));
                            __iced_deferrals._fulfill();
                          })(__iced_k);
                        }
                      })(__iced_k);
                    }
                  })(__iced_k);
                }
              })(function() {
                err = null;
                (function(__iced_k) {
                  if (!store) {
                    return __iced_k(log.debug("| Skipping store operation"));
                  } else {
                    (function(__iced_k) {
                      if (!accept) {
                        log.warn("Bailing out; proofs were not accepted");
                        return __iced_k(err = new E.CancelError("operation was canceled"));
                      } else {
                        (function(__iced_k) {
                          if ((check === constants.skip.REMOTE) && (approve === constants.skip.REMOTE)) {
                            return __iced_k(log.info("Nothing to do; tracking is up-to-date"));
                          } else {
                            (function(__iced_k) {
                              __iced_deferrals = new iced.Deferrals(__iced_k, {
                                parent: ___iced_passed_deferral,
                                filename: "/Users/max/src/keybase-node-client/src/tracksubsub.iced",
                                funcname: "TrackSubSubCommand._run2"
                              });
                              _this.prompt_track(esc(__iced_deferrals.defer({
                                assign_fn: (function() {
                                  return function() {
                                    return do_remote = arguments[0];
                                  };
                                })(),
                                lineno: 116
                              })));
                              __iced_deferrals._fulfill();
                            })(function() {
                              (function(__iced_k) {
                                if (do_remote) {
                                  (function(__iced_k) {
                                    __iced_deferrals = new iced.Deferrals(__iced_k, {
                                      parent: ___iced_passed_deferral,
                                      filename: "/Users/max/src/keybase-node-client/src/tracksubsub.iced",
                                      funcname: "TrackSubSubCommand._run2"
                                    });
                                    session.load_and_login(esc(__iced_deferrals.defer({
                                      lineno: 117
                                    })));
                                    __iced_deferrals._fulfill();
                                  })(__iced_k);
                                } else {
                                  return __iced_k();
                                }
                              })(function() {
                                (function(__iced_k) {
                                  __iced_deferrals = new iced.Deferrals(__iced_k, {
                                    parent: ___iced_passed_deferral,
                                    filename: "/Users/max/src/keybase-node-client/src/tracksubsub.iced",
                                    funcname: "TrackSubSubCommand._run2"
                                  });
                                  trackw.store_track({
                                    do_remote: do_remote
                                  }, esc(__iced_deferrals.defer({
                                    lineno: 118
                                  })));
                                  __iced_deferrals._fulfill();
                                })(__iced_k);
                              });
                            });
                          }
                        })(__iced_k);
                      }
                    })(__iced_k);
                  }
                })(function() {
                  log.debug("- _run2");
                  return cb(err, accept);
                });
              });
            });
          });
        };
      })(this));
    };

    return TrackSubSubCommand;

  })();

}).call(this);
