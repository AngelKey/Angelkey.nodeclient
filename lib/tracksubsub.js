// Generated by IcedCoffeeScript 1.7.1-a
(function() {
  var E, GE, ST, TmpKeyRing, TrackSubSubCommand, TrackWrapper, User, assertions, athrow, chain_err, colors, constants, db, deq, env, iced, log, make_esc, prompt_yn, proof_type_to_string, proofs, session, unix_time, util, __iced_k, __iced_k_noop, _ref, _ref1, _ref2;

  iced = require('iced-coffee-script').iced;
  __iced_k = __iced_k_noop = function() {};

  db = require('./db').db;

  constants = require('./constants').constants;

  log = require('./log');

  proofs = require('keybase-proofs');

  proof_type_to_string = proofs.proof_type_to_string;

  ST = constants.signature_types;

  deq = require('deep-equal');

  _ref = require('./err'), GE = _ref.GE, E = _ref.E;

  _ref1 = require('pgp-utils').util, athrow = _ref1.athrow, unix_time = _ref1.unix_time;

  _ref2 = require('iced-error'), chain_err = _ref2.chain_err, make_esc = _ref2.make_esc;

  prompt_yn = require('./prompter').prompt_yn;

  colors = require('colors');

  session = require('./session').session;

  User = require('./user').User;

  db = require('./db');

  util = require('util');

  env = require('./env').env;

  TrackWrapper = require('./trackwrapper').TrackWrapper;

  TmpKeyRing = require('./keyring').TmpKeyRing;

  assertions = require('./assertions');

  exports.TrackSubSubCommand = TrackSubSubCommand = (function() {
    TrackSubSubCommand.OPTS = {
      r: {
        alias: "track-remote",
        action: "storeTrue",
        help: "remotely track by default"
      },
      l: {
        alias: "track-local",
        action: "storeTrue",
        help: "don't prompt for remote tracking"
      },
      a: {
        action: 'append',
        alias: "assert",
        help: "provide a key assertion"
      },
      batch: {
        action: 'storeTrue',
        help: "batch-mode without interactivity"
      },
      "prompt-remote": {
        action: 'storeTrue',
        help: "prompt for remote tracking"
      }
    };

    function TrackSubSubCommand(_arg) {
      this.args = _arg.args, this.opts = _arg.opts, this.tmp_keyring = _arg.tmp_keyring, this.batch = _arg.batch, this.track_local = _arg.track_local;
      this.opts || (this.opts = {});
    }

    TrackSubSubCommand.prototype.is_batch = function() {
      return this.opts.batch || this.batch;
    };

    TrackSubSubCommand.prototype.prompt_ok = function(warnings, cb) {
      var err, prompt, ret, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      prompt = warnings ? (log.console.error(colors.red("Some remote proofs failed!")), "Still verify this user as " + this.args.them + "?") : "Is this the " + this.args.them + " you wanted?";
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/max/src/keybase-node-client/src/tracksubsub.iced",
            funcname: "TrackSubSubCommand.prompt_ok"
          });
          prompt_yn({
            prompt: prompt,
            defval: false
          }, __iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                err = arguments[0];
                return ret = arguments[1];
              };
            })(),
            lineno: 63
          }));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          return cb(err, ret);
        };
      })(this));
    };

    TrackSubSubCommand.prototype.prompt_track = function(cb) {
      var err, prompt, ret, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      ret = err = null;
      (function(_this) {
        return (function(__iced_k) {
          if (_this.opts.track_remote) {
            return __iced_k(ret = true);
          } else {
            (function(__iced_k) {
              if ((_this.is_batch() || _this.opts.track_local || _this.track_local) && !_this.opts.prompt_remote) {
                return __iced_k(ret = false);
              } else {
                prompt = "Permanently track this user, and write proof to server?";
                (function(__iced_k) {
                  __iced_deferrals = new iced.Deferrals(__iced_k, {
                    parent: ___iced_passed_deferral,
                    filename: "/Users/max/src/keybase-node-client/src/tracksubsub.iced",
                    funcname: "TrackSubSubCommand.prompt_track"
                  });
                  prompt_yn({
                    prompt: prompt,
                    defval: true
                  }, __iced_deferrals.defer({
                    assign_fn: (function() {
                      return function() {
                        err = arguments[0];
                        return ret = arguments[1];
                      };
                    })(),
                    lineno: 75
                  }));
                  __iced_deferrals._fulfill();
                })(__iced_k);
              }
            })(__iced_k);
          }
        });
      })(this)((function(_this) {
        return function() {
          return cb(err, ret);
        };
      })(this));
    };

    TrackSubSubCommand.prototype.key_cleanup = function(_arg, cb) {
      var accept, e2, err, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      accept = _arg.accept;
      log.debug("+ key_cleanup");
      err = null;
      (function(_this) {
        return (function(__iced_k) {
          if (_this.them) {
            (function(__iced_k) {
              if (accept) {
                log.debug("| commit_key");
                (function(__iced_k) {
                  __iced_deferrals = new iced.Deferrals(__iced_k, {
                    parent: ___iced_passed_deferral,
                    filename: "/Users/max/src/keybase-node-client/src/tracksubsub.iced",
                    funcname: "TrackSubSubCommand.key_cleanup"
                  });
                  _this.them.key.commit({}, __iced_deferrals.defer({
                    assign_fn: (function() {
                      return function() {
                        return err = arguments[0];
                      };
                    })(),
                    lineno: 86
                  }));
                  __iced_deferrals._fulfill();
                })(__iced_k);
              } else {
                (function(__iced_k) {
                  __iced_deferrals = new iced.Deferrals(__iced_k, {
                    parent: ___iced_passed_deferral,
                    filename: "/Users/max/src/keybase-node-client/src/tracksubsub.iced",
                    funcname: "TrackSubSubCommand.key_cleanup"
                  });
                  _this.them.key.rollback(__iced_deferrals.defer({
                    assign_fn: (function() {
                      return function() {
                        return err = arguments[0];
                      };
                    })(),
                    lineno: 88
                  }));
                  __iced_deferrals._fulfill();
                })(__iced_k);
              }
            })(__iced_k);
          } else {
            return __iced_k();
          }
        });
      })(this)((function(_this) {
        return function() {
          (function(__iced_k) {
            if (!_this.tmp_keyring) {
              return __iced_k();
            } else {
              (function(__iced_k) {
                if (env().get_preserve_tmp_keyring()) {
                  return __iced_k(log.info("Preserving " + (_this.tmp_keyring.to_string())));
                } else {
                  (function(__iced_k) {
                    __iced_deferrals = new iced.Deferrals(__iced_k, {
                      parent: ___iced_passed_deferral,
                      filename: "/Users/max/src/keybase-node-client/src/tracksubsub.iced",
                      funcname: "TrackSubSubCommand.key_cleanup"
                    });
                    _this.tmp_keyring.nuke(__iced_deferrals.defer({
                      assign_fn: (function() {
                        return function() {
                          return e2 = arguments[0];
                        };
                      })(),
                      lineno: 94
                    }));
                    __iced_deferrals._fulfill();
                  })(function() {
                    return __iced_k(typeof e2 !== "undefined" && e2 !== null ? log.warn("Problem in cleanup: " + e2.message) : void 0);
                  });
                }
              })(__iced_k);
            }
          })(function() {
            log.debug("- key_cleanup");
            return cb(err);
          });
        };
      })(this));
    };

    TrackSubSubCommand.prototype.on_decrypt = function(cb) {
      var esc, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      esc = make_esc(cb, "TrackSubSub::on_decrypt");
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/max/src/keybase-node-client/src/tracksubsub.iced",
            funcname: "TrackSubSubCommand.on_decrypt"
          });
          User.load({
            username: _this.args.them
          }, esc(__iced_deferrals.defer({
            assign_fn: (function(__slot_1) {
              return function() {
                return __slot_1.them = arguments[0];
              };
            })(_this),
            lineno: 103
          })));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          _this.them.reference_public_key({
            keyring: _this.tmp_keyring
          });
          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "/Users/max/src/keybase-node-client/src/tracksubsub.iced",
              funcname: "TrackSubSubCommand.on_decrypt"
            });
            User.load_me(esc(__iced_deferrals.defer({
              assign_fn: (function(__slot_1) {
                return function() {
                  return __slot_1.me = arguments[0];
                };
              })(_this),
              lineno: 105
            })));
            __iced_deferrals._fulfill();
          })(function() {
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "/Users/max/src/keybase-node-client/src/tracksubsub.iced",
                funcname: "TrackSubSubCommand.on_decrypt"
              });
              _this.check_not_self(esc(__iced_deferrals.defer({
                lineno: 106
              })));
              __iced_deferrals._fulfill();
            })(function() {
              (function(__iced_k) {
                __iced_deferrals = new iced.Deferrals(__iced_k, {
                  parent: ___iced_passed_deferral,
                  filename: "/Users/max/src/keybase-node-client/src/tracksubsub.iced",
                  funcname: "TrackSubSubCommand.on_decrypt"
                });
                _this.them.verify(esc(__iced_deferrals.defer({
                  lineno: 107
                })));
                __iced_deferrals._fulfill();
              })(function() {
                (function(__iced_k) {
                  __iced_deferrals = new iced.Deferrals(__iced_k, {
                    parent: ___iced_passed_deferral,
                    filename: "/Users/max/src/keybase-node-client/src/tracksubsub.iced",
                    funcname: "TrackSubSubCommand.on_decrypt"
                  });
                  TrackWrapper.load({
                    tracker: _this.me,
                    trackee: _this.them
                  }, esc(__iced_deferrals.defer({
                    assign_fn: (function(__slot_1) {
                      return function() {
                        return __slot_1.trackw = arguments[0];
                      };
                    })(_this),
                    lineno: 108
                  })));
                  __iced_deferrals._fulfill();
                })(function() {
                  return cb(null);
                });
              });
            });
          });
        };
      })(this));
    };

    TrackSubSubCommand.prototype.check_remote_proofs = function(skip, cb) {
      var err, esc, opts, warnings, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      esc = make_esc(cb, "TrackSubSub::check_remote_proofs");
      log.debug("+ TrackSubSub::check_remote_proofs");
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/max/src/keybase-node-client/src/tracksubsub.iced",
            funcname: "TrackSubSubCommand.check_remote_proofs"
          });
          _this.parse_assertions(esc(__iced_deferrals.defer({
            lineno: 116
          })));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          opts = {
            skip: skip,
            assertions: _this.assertions
          };
          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "/Users/max/src/keybase-node-client/src/tracksubsub.iced",
              funcname: "TrackSubSubCommand.check_remote_proofs"
            });
            _this.them.check_remote_proofs(opts, esc(__iced_deferrals.defer({
              assign_fn: (function() {
                return function() {
                  return warnings = arguments[0];
                };
              })(),
              lineno: 118
            })));
            __iced_deferrals._fulfill();
          })(function() {
            if ((typeof err === "undefined" || err === null) && (_this.assertions != null) && !(_this.assertions.check())) {
              err = new E.BadAssertionError();
            }
            log.debug("- TrackSubSub::check_remote_proofs -> " + (err != null ? err.message : void 0));
            return cb(err, warnings);
          });
        };
      })(this));
    };

    TrackSubSubCommand.prototype.id = function(cb) {
      var accept, esc, warnings, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      cb = chain_err(cb, this.key_cleanup.bind(this, {}));
      esc = make_esc(cb, "TrackSubSub:id");
      log.debug("+ id");
      accept = false;
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/max/src/keybase-node-client/src/tracksubsub.iced",
            funcname: "TrackSubSubCommand.id"
          });
          User.load({
            username: _this.args.them,
            require_public_key: true
          }, esc(__iced_deferrals.defer({
            assign_fn: (function(__slot_1) {
              return function() {
                return __slot_1.them = arguments[0];
              };
            })(_this),
            lineno: 131
          })));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "/Users/max/src/keybase-node-client/src/tracksubsub.iced",
              funcname: "TrackSubSubCommand.id"
            });
            TmpKeyRing.make(esc(__iced_deferrals.defer({
              assign_fn: (function(__slot_1) {
                return function() {
                  return __slot_1.tmp_keyring = arguments[0];
                };
              })(_this),
              lineno: 132
            })));
            __iced_deferrals._fulfill();
          })(function() {
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "/Users/max/src/keybase-node-client/src/tracksubsub.iced",
                funcname: "TrackSubSubCommand.id"
              });
              _this.them.import_public_key({
                keyring: _this.tmp_keyring
              }, esc(__iced_deferrals.defer({
                lineno: 133
              })));
              __iced_deferrals._fulfill();
            })(function() {
              (function(__iced_k) {
                __iced_deferrals = new iced.Deferrals(__iced_k, {
                  parent: ___iced_passed_deferral,
                  filename: "/Users/max/src/keybase-node-client/src/tracksubsub.iced",
                  funcname: "TrackSubSubCommand.id"
                });
                _this.them.verify(esc(__iced_deferrals.defer({
                  lineno: 134
                })));
                __iced_deferrals._fulfill();
              })(function() {
                (function(__iced_k) {
                  __iced_deferrals = new iced.Deferrals(__iced_k, {
                    parent: ___iced_passed_deferral,
                    filename: "/Users/max/src/keybase-node-client/src/tracksubsub.iced",
                    funcname: "TrackSubSubCommand.id"
                  });
                  _this.check_remote_proofs(false, esc(__iced_deferrals.defer({
                    assign_fn: (function() {
                      return function() {
                        return warnings = arguments[0];
                      };
                    })(),
                    lineno: 135
                  })));
                  __iced_deferrals._fulfill();
                })(function() {
                  log.debug("- id");
                  return cb(null);
                });
              });
            });
          });
        };
      })(this));
    };

    TrackSubSubCommand.prototype.parse_assertions = function(cb) {
      var a, err, _ref3;
      err = null;
      if ((a = this.opts.assert) != null) {
        _ref3 = assertions.parse(a), err = _ref3[0], this.assertions = _ref3[1];
      }
      return cb(err);
    };

    TrackSubSubCommand.prototype.check_not_self = function(cb) {
      var err, t;
      err = null;
      if ((((t = this.args.them) != null) && (t === this.me.username())) || (((t = this.args.them_ki64) != null) && (t === this.me.key_id_64()))) {
        err = new E.SelfError("Cannot track yourself");
      }
      return cb(err);
    };

    TrackSubSubCommand.prototype.run = function(cb) {
      var esc, found_them, opts, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      opts = {};
      cb = chain_err(cb, this.key_cleanup.bind(this, opts));
      esc = make_esc(cb, "TrackSubSub::run");
      log.debug("+ run");
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/max/src/keybase-node-client/src/tracksubsub.iced",
            funcname: "TrackSubSubCommand.run"
          });
          User.load_me(esc(__iced_deferrals.defer({
            assign_fn: (function(__slot_1) {
              return function() {
                return __slot_1.me = arguments[0];
              };
            })(_this),
            lineno: 164
          })));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "/Users/max/src/keybase-node-client/src/tracksubsub.iced",
              funcname: "TrackSubSubCommand.run"
            });
            _this.check_not_self(esc(__iced_deferrals.defer({
              lineno: 165
            })));
            __iced_deferrals._fulfill();
          })(function() {
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "/Users/max/src/keybase-node-client/src/tracksubsub.iced",
                funcname: "TrackSubSubCommand.run"
              });
              User.load({
                username: _this.args.them,
                ki64: _this.args.them_ki64,
                require_public_key: true
              }, esc(__iced_deferrals.defer({
                assign_fn: (function(__slot_1) {
                  return function() {
                    return __slot_1.them = arguments[0];
                  };
                })(_this),
                lineno: 166
              })));
              __iced_deferrals._fulfill();
            })(function() {
              (function(__iced_k) {
                __iced_deferrals = new iced.Deferrals(__iced_k, {
                  parent: ___iced_passed_deferral,
                  filename: "/Users/max/src/keybase-node-client/src/tracksubsub.iced",
                  funcname: "TrackSubSubCommand.run"
                });
                _this.them.check_public_key(esc(__iced_deferrals.defer({
                  assign_fn: (function() {
                    return function() {
                      return found_them = arguments[0];
                    };
                  })(),
                  lineno: 170
                })));
                __iced_deferrals._fulfill();
              })(function() {
                (function(__iced_k) {
                  if (found_them) {
                    (function(__iced_k) {
                      __iced_deferrals = new iced.Deferrals(__iced_k, {
                        parent: ___iced_passed_deferral,
                        filename: "/Users/max/src/keybase-node-client/src/tracksubsub.iced",
                        funcname: "TrackSubSubCommand.run"
                      });
                      _this.them.load_public_key({
                        signer: _this.me.key
                      }, esc(__iced_deferrals.defer({
                        lineno: 172
                      })));
                      __iced_deferrals._fulfill();
                    })(__iced_k);
                  } else {
                    (function(__iced_k) {
                      if ((_this.tmp_keyring = _this.args.tmp_keyring) == null) {
                        (function(__iced_k) {
                          __iced_deferrals = new iced.Deferrals(__iced_k, {
                            parent: ___iced_passed_deferral,
                            filename: "/Users/max/src/keybase-node-client/src/tracksubsub.iced",
                            funcname: "TrackSubSubCommand.run"
                          });
                          _this.me.new_tmp_keyring({
                            secret: true
                          }, esc(__iced_deferrals.defer({
                            assign_fn: (function(__slot_1) {
                              return function() {
                                return __slot_1.tmp_keyring = arguments[0];
                              };
                            })(_this),
                            lineno: 174
                          })));
                          __iced_deferrals._fulfill();
                        })(__iced_k);
                      } else {
                        return __iced_k();
                      }
                    })(__iced_k);
                  }
                })(function() {
                  (function(__iced_k) {
                    if (!found_them) {
                      (function(__iced_k) {
                        __iced_deferrals = new iced.Deferrals(__iced_k, {
                          parent: ___iced_passed_deferral,
                          filename: "/Users/max/src/keybase-node-client/src/tracksubsub.iced",
                          funcname: "TrackSubSubCommand.run"
                        });
                        _this.them.import_public_key({
                          keyring: _this.tmp_keyring
                        }, esc(__iced_deferrals.defer({
                          lineno: 177
                        })));
                        __iced_deferrals._fulfill();
                      })(__iced_k);
                    } else {
                      return __iced_k();
                    }
                  })(function() {
                    (function(__iced_k) {
                      __iced_deferrals = new iced.Deferrals(__iced_k, {
                        parent: ___iced_passed_deferral,
                        filename: "/Users/max/src/keybase-node-client/src/tracksubsub.iced",
                        funcname: "TrackSubSubCommand.run"
                      });
                      _this.them.verify(esc(__iced_deferrals.defer({
                        lineno: 178
                      })));
                      __iced_deferrals._fulfill();
                    })(function() {
                      (function(__iced_k) {
                        __iced_deferrals = new iced.Deferrals(__iced_k, {
                          parent: ___iced_passed_deferral,
                          filename: "/Users/max/src/keybase-node-client/src/tracksubsub.iced",
                          funcname: "TrackSubSubCommand.run"
                        });
                        TrackWrapper.load({
                          tracker: _this.me,
                          trackee: _this.them
                        }, esc(__iced_deferrals.defer({
                          assign_fn: (function(__slot_1) {
                            return function() {
                              return __slot_1.trackw = arguments[0];
                            };
                          })(_this),
                          lineno: 179
                        })));
                        __iced_deferrals._fulfill();
                      })(function() {
                        (function(__iced_k) {
                          __iced_deferrals = new iced.Deferrals(__iced_k, {
                            parent: ___iced_passed_deferral,
                            filename: "/Users/max/src/keybase-node-client/src/tracksubsub.iced",
                            funcname: "TrackSubSubCommand.run"
                          });
                          _this.all_prompts(esc(__iced_deferrals.defer({
                            assign_fn: (function(__slot_1) {
                              return function() {
                                return __slot_1.accept = arguments[0];
                              };
                            })(opts),
                            lineno: 180
                          })));
                          __iced_deferrals._fulfill();
                        })(function() {
                          log.debug("- run");
                          return cb(null);
                        });
                      });
                    });
                  });
                });
              });
            });
          });
        };
      })(this));
    };

    TrackSubSubCommand.prototype.all_prompts = function(cb) {
      var accept, approve, check, do_remote, err, esc, n_warnings, skp, warnings, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      esc = make_esc(cb, "TrackSubSub::all_prompts");
      log.debug("+ TrackSubSub::all_prompts");
      check = this.trackw.skip_remote_check();
      if (check === constants.skip.NONE) {
        log.info("...checking identity proofs");
        skp = false;
      } else {
        log.info("...all remote checks are up-to-date");
        skp = true;
      }
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/max/src/keybase-node-client/src/tracksubsub.iced",
            funcname: "TrackSubSubCommand.all_prompts"
          });
          _this.check_remote_proofs(skp, esc(__iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                return warnings = arguments[0];
              };
            })(),
            lineno: 199
          })));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          n_warnings = warnings.warnings().length;
          (function(__iced_k) {
            if ((approve = _this.trackw.skip_approval()) !== constants.skip.NONE) {
              log.debug("| skipping approval, since remote services & key are unchanged");
              return __iced_k(accept = true);
            } else {
              (function(__iced_k) {
                var _ref3;
                if ((_ref3 = _this.assertions) != null ? _ref3.clean() : void 0) {
                  log.info("Identity accepted due to clean and complete assertions");
                  log.debug("| We can approve due to clean assertions");
                  return __iced_k(accept = true);
                } else {
                  (function(__iced_k) {
                    if (_this.is_batch()) {
                      log.warn("Interactive approval is needed");
                      log.debug("| We needed approval, but we were in batch mode");
                      return __iced_k(accept = false);
                    } else {
                      (function(__iced_k) {
                        __iced_deferrals = new iced.Deferrals(__iced_k, {
                          parent: ___iced_passed_deferral,
                          filename: "/Users/max/src/keybase-node-client/src/tracksubsub.iced",
                          funcname: "TrackSubSubCommand.all_prompts"
                        });
                        _this.prompt_ok(n_warnings, esc(__iced_deferrals.defer({
                          assign_fn: (function() {
                            return function() {
                              return accept = arguments[0];
                            };
                          })(),
                          lineno: 214
                        })));
                        __iced_deferrals._fulfill();
                      })(__iced_k);
                    }
                  })(__iced_k);
                }
              })(__iced_k);
            }
          })(function() {
            err = null;
            (function(__iced_k) {
              if (!accept) {
                log.warn("Bailing out; proofs were not accepted");
                return __iced_k(err = new E.CancelError("operation was canceled"));
              } else {
                (function(__iced_k) {
                  if ((check === constants.skip.REMOTE) && (approve === constants.skip.REMOTE)) {
                    return __iced_k(log.info("Nothing to do; tracking is up-to-date"));
                  } else {
                    (function(__iced_k) {
                      if ((approve === constants.skip.REMOTE) || _this.is_batch()) {
                        return __iced_k(do_remote = false);
                      } else {
                        (function(__iced_k) {
                          __iced_deferrals = new iced.Deferrals(__iced_k, {
                            parent: ___iced_passed_deferral,
                            filename: "/Users/max/src/keybase-node-client/src/tracksubsub.iced",
                            funcname: "TrackSubSubCommand.all_prompts"
                          });
                          _this.prompt_track(esc(__iced_deferrals.defer({
                            assign_fn: (function() {
                              return function() {
                                return do_remote = arguments[0];
                              };
                            })(),
                            lineno: 226
                          })));
                          __iced_deferrals._fulfill();
                        })(function() {
                          (function(__iced_k) {
                            if (do_remote) {
                              (function(__iced_k) {
                                __iced_deferrals = new iced.Deferrals(__iced_k, {
                                  parent: ___iced_passed_deferral,
                                  filename: "/Users/max/src/keybase-node-client/src/tracksubsub.iced",
                                  funcname: "TrackSubSubCommand.all_prompts"
                                });
                                session.load_and_login(esc(__iced_deferrals.defer({
                                  lineno: 228
                                })));
                                __iced_deferrals._fulfill();
                              })(__iced_k);
                            } else {
                              return __iced_k();
                            }
                          })(__iced_k);
                        });
                      }
                    })(function() {
                      (function(__iced_k) {
                        __iced_deferrals = new iced.Deferrals(__iced_k, {
                          parent: ___iced_passed_deferral,
                          filename: "/Users/max/src/keybase-node-client/src/tracksubsub.iced",
                          funcname: "TrackSubSubCommand.all_prompts"
                        });
                        _this.trackw.store_track({
                          do_remote: do_remote
                        }, esc(__iced_deferrals.defer({
                          lineno: 229
                        })));
                        __iced_deferrals._fulfill();
                      })(__iced_k);
                    });
                  }
                })(__iced_k);
              }
            })(function() {
              log.debug("- TrackSubSub::all_prompts");
              return cb(err, accept);
            });
          });
        };
      })(this));
    };

    return TrackSubSubCommand;

  })();

}).call(this);
