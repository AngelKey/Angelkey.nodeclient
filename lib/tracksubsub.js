// Generated by IcedCoffeeScript 1.6.3-i
(function() {
  var E, ST, TmpKeyRing, TrackSubSubCommand, TrackWrapper, User, colors, constants, db, deq, env, iced, log, make_esc, prompt_yn, proof_type_to_string, proofs, session, unix_time, util, __iced_k, __iced_k_noop;

  iced = require('iced-coffee-script/lib/coffee-script/iced').runtime;
  __iced_k = __iced_k_noop = function() {};

  db = require('./db').db;

  constants = require('./constants').constants;

  log = require('./log');

  proofs = require('keybase-proofs');

  proof_type_to_string = proofs.proof_type_to_string;

  ST = constants.signature_types;

  deq = require('deep-equal');

  E = require('./err').E;

  unix_time = require('pgp-utils').util.unix_time;

  make_esc = require('iced-error').make_esc;

  prompt_yn = require('./prompter').prompt_yn;

  colors = require('colors');

  session = require('./session').session;

  User = require('./user').User;

  db = require('./db');

  util = require('util');

  env = require('./env').env;

  TrackWrapper = require('./trackwrapper').TrackWrapper;

  TmpKeyRing = require('./keyring').TmpKeyRing;

  exports.TrackSubSubCommand = TrackSubSubCommand = (function() {
    function TrackSubSubCommand(_arg) {
      this.args = _arg.args, this.opts = _arg.opts;
    }

    TrackSubSubCommand.prototype.prompt_ok = function(warnings, cb) {
      var err, prompt, ret, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      prompt = warnings ? (log.console.log(colors.red("Some remote proofs failed!")), "Still verify this user?") : "Are you satisfied with these proofs?";
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/max/src/keybase-node-client/src/tracksubsub.iced",
            funcname: "TrackSubSubCommand.prompt_ok"
          });
          prompt_yn({
            prompt: prompt,
            defval: false
          }, __iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                err = arguments[0];
                return ret = arguments[1];
              };
            })(),
            lineno: 37
          }));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          return cb(err, ret);
        };
      })(this));
    };

    TrackSubSubCommand.prototype.prompt_track = function(cb) {
      var err, prompt, ret, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      ret = err = null;
      (function(_this) {
        return (function(__iced_k) {
          if (_this.opts.remote) {
            return __iced_k(ret = true);
          } else {
            (function(__iced_k) {
              if (_this.opts.batch || _this.opts.local) {
                return __iced_k(ret = false);
              } else {
                prompt = "Permnanently track this user, and write proof to server?";
                (function(__iced_k) {
                  __iced_deferrals = new iced.Deferrals(__iced_k, {
                    parent: ___iced_passed_deferral,
                    filename: "/Users/max/src/keybase-node-client/src/tracksubsub.iced",
                    funcname: "TrackSubSubCommand.prompt_track"
                  });
                  prompt_yn({
                    prompt: prompt,
                    defval: true
                  }, __iced_deferrals.defer({
                    assign_fn: (function() {
                      return function() {
                        err = arguments[0];
                        return ret = arguments[1];
                      };
                    })(),
                    lineno: 48
                  }));
                  __iced_deferrals._fulfill();
                })(__iced_k);
              }
            })(__iced_k);
          }
        });
      })(this)((function(_this) {
        return function() {
          return cb(err, ret);
        };
      })(this));
    };

    TrackSubSubCommand.prototype._key_cleanup = function(_arg, cb) {
      var accept, e2, err, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      accept = _arg.accept;
      err = null;
      (function(_this) {
        return (function(__iced_k) {
          if (accept) {
            log.debug("| commit_key");
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "/Users/max/src/keybase-node-client/src/tracksubsub.iced",
                funcname: "TrackSubSubCommand._key_cleanup"
              });
              _this.them.key.commit(_this.me.key, __iced_deferrals.defer({
                assign_fn: (function() {
                  return function() {
                    return err = arguments[0];
                  };
                })(),
                lineno: 57
              }));
              __iced_deferrals._fulfill();
            })(__iced_k);
          } else {
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "/Users/max/src/keybase-node-client/src/tracksubsub.iced",
                funcname: "TrackSubSubCommand._key_cleanup"
              });
              _this.them.key.rollback(__iced_deferrals.defer({
                assign_fn: (function() {
                  return function() {
                    return err = arguments[0];
                  };
                })(),
                lineno: 59
              }));
              __iced_deferrals._fulfill();
            })(__iced_k);
          }
        });
      })(this)((function(_this) {
        return function() {
          (function(__iced_k) {
            if (_this.tmp_keyring) {
              (function(__iced_k) {
                __iced_deferrals = new iced.Deferrals(__iced_k, {
                  parent: ___iced_passed_deferral,
                  filename: "/Users/max/src/keybase-node-client/src/tracksubsub.iced",
                  funcname: "TrackSubSubCommand._key_cleanup"
                });
                _this.tmp_keyring.nuke(__iced_deferrals.defer({
                  assign_fn: (function() {
                    return function() {
                      return e2 = arguments[0];
                    };
                  })(),
                  lineno: 61
                }));
                __iced_deferrals._fulfill();
              })(function() {
                return __iced_k(log.warn("Problem in cleanup: " + e2.message));
              });
            } else {
              return __iced_k();
            }
          })(function() {
            return cb(err);
          });
        };
      })(this));
    };

    TrackSubSubCommand.prototype.id = function(cb) {
      var accept, esc, them, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      esc = make_esc(cb, "TrackSubSub:id");
      log.debug("+ id");
      accept = false;
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/max/src/keybase-node-client/src/tracksubsub.iced",
            funcname: "TrackSubSubCommand.id"
          });
          User.load({
            username: _this.args.them
          }, esc(__iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                return them = arguments[0];
              };
            })(),
            lineno: 71
          })));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "/Users/max/src/keybase-node-client/src/tracksubsub.iced",
              funcname: "TrackSubSubCommand.id"
            });
            TmpKeyRing.make(esc(__iced_deferrals.defer({
              assign_fn: (function(__slot_1) {
                return function() {
                  return __slot_1.tmp_keyring = arguments[0];
                };
              })(_this),
              lineno: 72
            })));
            __iced_deferrals._fulfill();
          })(function() {
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "/Users/max/src/keybase-node-client/src/tracksubsub.iced",
                funcname: "TrackSubSubCommand.id"
              });
              _this._id2({
                them: them
              }, esc(__iced_deferrals.defer({
                lineno: 73
              })));
              __iced_deferrals._fulfill();
            })(function() {
              (function(__iced_k) {
                __iced_deferrals = new iced.Deferrals(__iced_k, {
                  parent: ___iced_passed_deferral,
                  filename: "/Users/max/src/keybase-node-client/src/tracksubsub.iced",
                  funcname: "TrackSubSubCommand.id"
                });
                _this._key_cleanup({}, esc(__iced_deferrals.defer({
                  lineno: 74
                })));
                __iced_deferrals._fulfill();
              })(function() {
                log.debug("- id");
                return cb(null);
              });
            });
          });
        };
      })(this));
    };

    TrackSubSubCommand.prototype._id2 = function(_arg, cb) {
      var esc, them, warnings, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      them = _arg.them;
      esc = make_esc(cb, "TrackSubSub:_id2");
      log.debug("+ _id2");
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/max/src/keybase-node-client/src/tracksubsub.iced",
            funcname: "TrackSubSubCommand._id2"
          });
          them.import_public_key({
            keyring: _this.tmp_keyring
          }, esc(__iced_deferrals.defer({
            lineno: 83
          })));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "/Users/max/src/keybase-node-client/src/tracksubsub.iced",
              funcname: "TrackSubSubCommand._id2"
            });
            them.verify(esc(__iced_deferrals.defer({
              lineno: 84
            })));
            __iced_deferrals._fulfill();
          })(function() {
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "/Users/max/src/keybase-node-client/src/tracksubsub.iced",
                funcname: "TrackSubSubCommand._id2"
              });
              them.check_remote_proofs(false, esc(__iced_deferrals.defer({
                assign_fn: (function() {
                  return function() {
                    return warnings = arguments[0];
                  };
                })(),
                lineno: 85
              })));
              __iced_deferrals._fulfill();
            })(function() {
              log.debug("- _id2");
              return cb(null);
            });
          });
        };
      })(this));
    };

    TrackSubSubCommand.prototype.run = function(cb) {
      var accept, err, esc, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      esc = make_esc(cb, "TrackSubSub::run");
      log.debug("+ run");
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/max/src/keybase-node-client/src/tracksubsub.iced",
            funcname: "TrackSubSubCommand.run"
          });
          User.load_me(esc(__iced_deferrals.defer({
            assign_fn: (function(__slot_1) {
              return function() {
                return __slot_1.me = arguments[0];
              };
            })(_this),
            lineno: 95
          })));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "/Users/max/src/keybase-node-client/src/tracksubsub.iced",
              funcname: "TrackSubSubCommand.run"
            });
            User.load({
              username: _this.args.them
            }, esc(__iced_deferrals.defer({
              assign_fn: (function(__slot_1) {
                return function() {
                  return __slot_1.them = arguments[0];
                };
              })(_this),
              lineno: 96
            })));
            __iced_deferrals._fulfill();
          })(function() {
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "/Users/max/src/keybase-node-client/src/tracksubsub.iced",
                funcname: "TrackSubSubCommand.run"
              });
              _this.me.new_tmp_keyring({
                secret: false
              }, esc(__iced_deferrals.defer({
                assign_fn: (function(__slot_1) {
                  return function() {
                    return __slot_1.tmp_keyring = arguments[0];
                  };
                })(_this),
                lineno: 97
              })));
              __iced_deferrals._fulfill();
            })(function() {
              (function(__iced_k) {
                __iced_deferrals = new iced.Deferrals(__iced_k, {
                  parent: ___iced_passed_deferral,
                  filename: "/Users/max/src/keybase-node-client/src/tracksubsub.iced",
                  funcname: "TrackSubSubCommand.run"
                });
                _this._run2(__iced_deferrals.defer({
                  assign_fn: (function() {
                    return function() {
                      err = arguments[0];
                      return accept = arguments[1];
                    };
                  })(),
                  lineno: 101
                }));
                __iced_deferrals._fulfill();
              })(function() {
                (function(__iced_k) {
                  __iced_deferrals = new iced.Deferrals(__iced_k, {
                    parent: ___iced_passed_deferral,
                    filename: "/Users/max/src/keybase-node-client/src/tracksubsub.iced",
                    funcname: "TrackSubSubCommand.run"
                  });
                  _this._key_cleanup({
                    accept: accept
                  }, esc(__iced_deferrals.defer({
                    lineno: 104
                  })));
                  __iced_deferrals._fulfill();
                })(function() {
                  log.debug("- run");
                  return cb(err);
                });
              });
            });
          });
        };
      })(this));
    };

    TrackSubSubCommand.prototype._run2 = function(cb) {
      var accept, approve, check, do_remote, err, esc, n_warnings, skp, trackw, warnings, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      esc = make_esc(cb, "TrackSubSub::_run2");
      log.debug("+ _run2");
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/max/src/keybase-node-client/src/tracksubsub.iced",
            funcname: "TrackSubSubCommand._run2"
          });
          _this.them.import_public_key({
            keyring: _this.tmp_keyring
          }, esc(__iced_deferrals.defer({
            lineno: 116
          })));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "/Users/max/src/keybase-node-client/src/tracksubsub.iced",
              funcname: "TrackSubSubCommand._run2"
            });
            _this.them.verify(esc(__iced_deferrals.defer({
              lineno: 117
            })));
            __iced_deferrals._fulfill();
          })(function() {
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "/Users/max/src/keybase-node-client/src/tracksubsub.iced",
                funcname: "TrackSubSubCommand._run2"
              });
              TrackWrapper.load({
                tracker: _this.me,
                trackee: _this.them
              }, esc(__iced_deferrals.defer({
                assign_fn: (function() {
                  return function() {
                    return trackw = arguments[0];
                  };
                })(),
                lineno: 118
              })));
              __iced_deferrals._fulfill();
            })(function() {
              check = trackw.skip_remote_check();
              if (check === constants.skip.NONE) {
                log.console.log("...checking identity proofs");
                skp = false;
              } else {
                log.info("...all remote checks are up-to-date");
                skp = true;
              }
              (function(__iced_k) {
                __iced_deferrals = new iced.Deferrals(__iced_k, {
                  parent: ___iced_passed_deferral,
                  filename: "/Users/max/src/keybase-node-client/src/tracksubsub.iced",
                  funcname: "TrackSubSubCommand._run2"
                });
                _this.them.check_remote_proofs(skp, esc(__iced_deferrals.defer({
                  assign_fn: (function() {
                    return function() {
                      return warnings = arguments[0];
                    };
                  })(),
                  lineno: 127
                })));
                __iced_deferrals._fulfill();
              })(function() {
                n_warnings = warnings.warnings().length;
                (function(__iced_k) {
                  if ((approve = trackw.skip_approval()) !== constants.skip.NONE) {
                    log.debug("| skipping approval, since remote services & key are unchanged");
                    return __iced_k(accept = true);
                  } else {
                    (function(__iced_k) {
                      if (_this.opts.batch) {
                        log.debug("| We needed approval, but we were in batch mode");
                        return __iced_k(accept = false);
                      } else {
                        (function(__iced_k) {
                          __iced_deferrals = new iced.Deferrals(__iced_k, {
                            parent: ___iced_passed_deferral,
                            filename: "/Users/max/src/keybase-node-client/src/tracksubsub.iced",
                            funcname: "TrackSubSubCommand._run2"
                          });
                          _this.prompt_ok(n_warnings, esc(__iced_deferrals.defer({
                            assign_fn: (function() {
                              return function() {
                                return accept = arguments[0];
                              };
                            })(),
                            lineno: 137
                          })));
                          __iced_deferrals._fulfill();
                        })(__iced_k);
                      }
                    })(__iced_k);
                  }
                })(function() {
                  err = null;
                  (function(__iced_k) {
                    if (!accept) {
                      log.warn("Bailing out; proofs were not accepted");
                      return __iced_k(err = new E.CancelError("operation was canceled"));
                    } else {
                      (function(__iced_k) {
                        if ((check === constants.skip.REMOTE) && (approve === constants.skip.REMOTE)) {
                          return __iced_k(log.info("Nothing to do; tracking is up-to-date"));
                        } else {
                          (function(__iced_k) {
                            __iced_deferrals = new iced.Deferrals(__iced_k, {
                              parent: ___iced_passed_deferral,
                              filename: "/Users/max/src/keybase-node-client/src/tracksubsub.iced",
                              funcname: "TrackSubSubCommand._run2"
                            });
                            _this.prompt_track(esc(__iced_deferrals.defer({
                              assign_fn: (function() {
                                return function() {
                                  return do_remote = arguments[0];
                                };
                              })(),
                              lineno: 146
                            })));
                            __iced_deferrals._fulfill();
                          })(function() {
                            (function(__iced_k) {
                              if (do_remote) {
                                (function(__iced_k) {
                                  __iced_deferrals = new iced.Deferrals(__iced_k, {
                                    parent: ___iced_passed_deferral,
                                    filename: "/Users/max/src/keybase-node-client/src/tracksubsub.iced",
                                    funcname: "TrackSubSubCommand._run2"
                                  });
                                  session.load_and_login(esc(__iced_deferrals.defer({
                                    lineno: 147
                                  })));
                                  __iced_deferrals._fulfill();
                                })(__iced_k);
                              } else {
                                return __iced_k();
                              }
                            })(function() {
                              (function(__iced_k) {
                                __iced_deferrals = new iced.Deferrals(__iced_k, {
                                  parent: ___iced_passed_deferral,
                                  filename: "/Users/max/src/keybase-node-client/src/tracksubsub.iced",
                                  funcname: "TrackSubSubCommand._run2"
                                });
                                trackw.store_track({
                                  do_remote: do_remote
                                }, esc(__iced_deferrals.defer({
                                  lineno: 148
                                })));
                                __iced_deferrals._fulfill();
                              })(__iced_k);
                            });
                          });
                        }
                      })(__iced_k);
                    }
                  })(function() {
                    log.debug("- _run2");
                    return cb(err, accept);
                  });
                });
              });
            });
          });
        };
      })(this));
    };

    return TrackSubSubCommand;

  })();

}).call(this);
