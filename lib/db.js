// Generated by IcedCoffeeScript 1.6.3-j
(function() {
  var DB, Database, Lock, constants, env, fs, iced, k, log, make_esc, mkdirp, path, sqlite3, util, v, __iced_k, __iced_k_noop, _db, _fn, _ref,
    __slice = [].slice;

  iced = require('iced-coffee-script/lib/coffee-script/iced').runtime;
  __iced_k = __iced_k_noop = function() {};

  env = require('./env').env;

  sqlite3 = require('sqlite3');

  Database = sqlite3.Database;

  fs = require('fs');

  path = require('path');

  make_esc = require('iced-error').make_esc;

  mkdirp = require('./fs').mkdirp;

  Lock = require('iced-utils').lock.Lock;

  util = require('pgp-utils').util;

  log = require('./log');

  constants = require('./constants').constants;

  DB = (function() {
    function DB(_arg) {
      this.filename = _arg.filename;
      this.lock = new Lock;
    }

    DB.prototype.get_filename = function() {
      this.filename || (this.filename = env().get_db_filename());
      return this.filename;
    };

    DB.prototype.open = function(cb) {
      var err, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      err = null;
      (function(_this) {
        return (function(__iced_k) {
          if (_this.db == null) {
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "/home/max/src/keybase-node-client/src/db.iced",
                funcname: "DB.open"
              });
              _this._open(__iced_deferrals.defer({
                assign_fn: (function() {
                  return function() {
                    return err = arguments[0];
                  };
                })(),
                lineno: 28
              }));
              __iced_deferrals._fulfill();
            })(__iced_k);
          } else {
            return __iced_k();
          }
        });
      })(this)((function(_this) {
        return function() {
          return cb(err);
        };
      })(this));
    };

    DB.prototype.unlink = function(cb) {
      var err, fn, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      fn = this.get_filename();
      log.info("Purging local cache: " + fn);
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/home/max/src/keybase-node-client/src/db.iced",
            funcname: "DB.unlink"
          });
          fs.unlink(fn, __iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                return err = arguments[0];
              };
            })(),
            lineno: 36
          }));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          return cb(err);
        };
      })(this));
    };

    DB.prototype._open = function(cb) {
      var db, err, esc, fn, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      esc = make_esc(cb, "DB::open");
      err = null;
      fn = this.get_filename();
      log.debug("+ opening sqlite3 database file: " + fn);
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/home/max/src/keybase-node-client/src/db.iced",
            funcname: "DB._open"
          });
          mkdirp(fn, esc(__iced_deferrals.defer({
            lineno: 46
          })));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          db = null;
          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "/home/max/src/keybase-node-client/src/db.iced",
              funcname: "DB._open"
            });
            db = new Database(_this.get_filename(), sqlite3.OPEN_READWRITE | sqlite3.OPEN_CREATE, esc(__iced_deferrals.defer({
              lineno: 50
            })));
            __iced_deferrals._fulfill();
          })(function() {
            _this.db = db;
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "/home/max/src/keybase-node-client/src/db.iced",
                funcname: "DB._open"
              });
              _this._init_db(esc(__iced_deferrals.defer({
                lineno: 53
              })));
              __iced_deferrals._fulfill();
            })(function() {
              log.debug("- DB opened");
              return cb(null);
            });
          });
        };
      })(this));
    };

    DB.prototype.log_key_import = function(_arg, cb) {
      var args, err, fingerprint, now, q, state, uid, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      uid = _arg.uid, fingerprint = _arg.fingerprint, state = _arg.state;
      now = util.unix_time();
      q = "INSERT OR REPLACE INTO `key_import_log`\n  (fingerprint,uid,mtime,state,ctime)\nVALUES($fingerprint,$uid,$now,$state,\n   COALESCE (\n     (SELECT ctime FROM key_import_log WHERE fingerprint = $fingerprint), \n      $now\n    ))";
      args = {
        $uid: uid,
        $fingerprint: fingerprint,
        $state: state,
        $now: now
      };
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/home/max/src/keybase-node-client/src/db.iced",
            funcname: "DB.log_key_import"
          });
          _this.db.run(q, args, __iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                return err = arguments[0];
              };
            })(),
            lineno: 73
          }));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          return cb(err);
        };
      })(this));
    };

    DB.prototype.get_import_state = function(_arg, cb) {
      var err, fingerprint, q, ret, row, uid, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      uid = _arg.uid, fingerprint = _arg.fingerprint;
      q = "SELECT state FROM key_import_log WHERE uid=$uid AND fingerprint=$fingerprint";
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/home/max/src/keybase-node-client/src/db.iced",
            funcname: "DB.get_import_state"
          });
          _this.db.get(q, {
            $uid: uid,
            $fingerprint: fingerprint
          }, __iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                err = arguments[0];
                return row = arguments[1];
              };
            })(),
            lineno: 80
          }));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          ret = typeof row !== "undefined" && row !== null ? row.state : constants.import_state.NONE;
          return cb(err, ret);
        };
      })(this));
    };

    DB.prototype.select_key_imports_by_state = function(state, cb) {
      var err, o, q, ret, rows, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      q = "SELECT fingerprint FROM key_import_log WHERE state=$state";
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/home/max/src/keybase-node-client/src/db.iced",
            funcname: "DB.select_key_imports_by_state"
          });
          _this.db.all(q, {
            $state: state
          }, __iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                err = arguments[0];
                return rows = arguments[1];
              };
            })(),
            lineno: 88
          }));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          ret = typeof err !== "undefined" && err !== null ? null : (function() {
            var _i, _len, _results;
            _results = [];
            for (_i = 0, _len = rows.length; _i < _len; _i++) {
              o = rows[_i];
              _results.push(o.fingerprint);
            }
            return _results;
          })();
          return cb(err, ret);
        };
      })(this));
    };

    DB.prototype.batch_update_key_import = function(_arg, cb) {
      var args, err, fingerprints, q, state, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      fingerprints = _arg.fingerprints, state = _arg.state;
      q = "UPDATE key_import_log SET state=? WHERE fingerprint IN (?)";
      args = [state, fingerprints.join(",")];
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/home/max/src/keybase-node-client/src/db.iced",
            funcname: "DB.batch_update_key_import"
          });
          _this.db.run(q, args, __iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                return err = arguments[0];
              };
            })(),
            lineno: 97
          }));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          return cb(err);
        };
      })(this));
    };

    DB.prototype.put = function(_arg, cb) {
      var args, esc, key, name, q, type, value, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      type = _arg.type, key = _arg.key, value = _arg.value, name = _arg.name;
      type || (type = key.slice(-2));
      esc = make_esc(cb, "DB::put");
      (function(_this) {
        return (function(__iced_k) {
          if (name != null) {
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "/home/max/src/keybase-node-client/src/db.iced",
                funcname: "DB.put"
              });
              _this.lock.acquire(__iced_deferrals.defer({
                lineno: 107
              }));
              __iced_deferrals._fulfill();
            })(function() {
              (function(__iced_k) {
                __iced_deferrals = new iced.Deferrals(__iced_k, {
                  parent: ___iced_passed_deferral,
                  filename: "/home/max/src/keybase-node-client/src/db.iced",
                  funcname: "DB.put"
                });
                _this.db.run("BEGIN", esc(__iced_deferrals.defer({
                  lineno: 108
                })));
                __iced_deferrals._fulfill();
              })(__iced_k);
            });
          } else {
            return __iced_k();
          }
        });
      })(this)((function(_this) {
        return function() {
          q = "REPLACE INTO kvstore(type,key,value) VALUES(?,?,?)";
          args = [type, key, JSON.stringify(value)];
          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "/home/max/src/keybase-node-client/src/db.iced",
              funcname: "DB.put"
            });
            _this.db.run(q, args, esc(__iced_deferrals.defer({
              lineno: 112
            })));
            __iced_deferrals._fulfill();
          })(function() {
            (function(__iced_k) {
              if (name != null) {
                q = "REPLACE INTO lookup(name_type,name,key_type,key) VALUES(?,?,?,?)";
                args = [name.type, name.name, type, key];
                (function(__iced_k) {
                  __iced_deferrals = new iced.Deferrals(__iced_k, {
                    parent: ___iced_passed_deferral,
                    filename: "/home/max/src/keybase-node-client/src/db.iced",
                    funcname: "DB.put"
                  });
                  _this.db.run(q, args, esc(__iced_deferrals.defer({
                    lineno: 117
                  })));
                  __iced_deferrals._fulfill();
                })(function() {
                  (function(__iced_k) {
                    __iced_deferrals = new iced.Deferrals(__iced_k, {
                      parent: ___iced_passed_deferral,
                      filename: "/home/max/src/keybase-node-client/src/db.iced",
                      funcname: "DB.put"
                    });
                    _this.db.run("COMMIT", esc(__iced_deferrals.defer({
                      lineno: 118
                    })));
                    __iced_deferrals._fulfill();
                  })(function() {
                    return __iced_k(_this.lock.release());
                  });
                });
              } else {
                return __iced_k();
              }
            })(function() {
              return cb(null);
            });
          });
        };
      })(this));
    };

    DB.prototype.get = function(_arg, cb) {
      var args, e, err, key, q, row, type, value, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      type = _arg.type, key = _arg.key;
      type || (type = key.slice(-2));
      q = "SELECT value FROM kvstore WHERE type=? AND key=?";
      args = [type, key];
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/home/max/src/keybase-node-client/src/db.iced",
            funcname: "DB.get"
          });
          _this.db.get(q, args, __iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                err = arguments[0];
                return row = arguments[1];
              };
            })(),
            lineno: 129
          }));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          value = null;
          if (typeof row !== "undefined" && row !== null) {
            try {
              value = JSON.parse(row.value);
            } catch (_error) {
              e = _error;
              err = e;
            }
          }
          return cb(err, value);
        };
      })(this));
    };

    DB.prototype.lookup = function(_arg, cb) {
      var args, e, err, name, q, row, type, value, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      type = _arg.type, name = _arg.name;
      q = "SELECT k.type AS type, k.key AS k, k.value AS value\nFROM lookup AS l\nINNER JOIN kvstore AS k ON (l.key_type = k.type AND l.key = k.key)\nWHERE l.name_type = ?\nAND l.name = ?";
      args = [type, name];
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/home/max/src/keybase-node-client/src/db.iced",
            funcname: "DB.lookup"
          });
          _this.db.get(q, args, __iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                err = arguments[0];
                return row = arguments[1];
              };
            })(),
            lineno: 147
          }));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          value = null;
          if (typeof row !== "undefined" && row !== null) {
            try {
              row.value = JSON.parse(row.value);
            } catch (_error) {
              e = _error;
              err = e;
            }
          }
          return cb(err, row);
        };
      })(this));
    };

    DB.prototype._init_db = function(cb) {
      var c, commands, data, esc, sql_file, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      esc = make_esc(cb, "DB::_init_db");
      sql_file = path.join(__dirname, "..", "sql", "schema.sql");
      log.debug("+ run sql setup file: " + sql_file);
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/home/max/src/keybase-node-client/src/db.iced",
            funcname: "DB._init_db"
          });
          fs.readFile(sql_file, esc(__iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                return data = arguments[0];
              };
            })(),
            lineno: 162
          })));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          commands = data.toString('utf8').split(/\s*;\s*/);
          (function(__iced_k) {
            var _i, _len, _ref, _results, _while;
            _ref = commands;
            _len = _ref.length;
            _i = 0;
            _results = [];
            _while = function(__iced_k) {
              var _break, _continue, _next;
              _break = function() {
                return __iced_k(_results);
              };
              _continue = function() {
                return iced.trampoline(function() {
                  ++_i;
                  return _while(__iced_k);
                });
              };
              _next = function(__iced_next_arg) {
                _results.push(__iced_next_arg);
                return _continue();
              };
              if (!(_i < _len)) {
                return _break();
              } else {
                c = _ref[_i];
                if (c.match(/\S+/)) {
                  (function(__iced_k) {
                    __iced_deferrals = new iced.Deferrals(__iced_k, {
                      parent: ___iced_passed_deferral,
                      filename: "/home/max/src/keybase-node-client/src/db.iced",
                      funcname: "DB._init_db"
                    });
                    _this.db.run(c + ";", esc(__iced_deferrals.defer({
                      lineno: 165
                    })));
                    __iced_deferrals._fulfill();
                  })(_next);
                } else {
                  return _continue();
                }
              }
            };
            _while(__iced_k);
          })(function() {
            log.debug("- database initialized");
            return cb(null);
          });
        };
      })(this));
    };

    return DB;

  })();

  exports.db = _db = new DB({});

  exports.DB = DB;

  _ref = DB.prototype;
  _fn = function(key) {
    return exports[key] = function() {
      var args;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return _db[key].apply(_db, args);
    };
  };
  for (k in _ref) {
    v = _ref[k];
    _fn(k);
  }

}).call(this);
