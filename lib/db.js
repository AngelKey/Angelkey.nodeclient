// Generated by IcedCoffeeScript 1.6.3-i
(function() {
  var DB, Database, env, fs, iced, k, make_esc, mkdirp, path, sqlite3, v, __iced_k, __iced_k_noop, _db, _fn, _ref,
    __slice = [].slice;

  iced = require('iced-coffee-script/lib/coffee-script/iced').runtime;
  __iced_k = __iced_k_noop = function() {};

  env = require('./env').env;

  sqlite3 = require('sqlite3');

  Database = sqlite3.Database;

  fs = require('fs');

  path = require('path');

  make_esc = require('iced-error').make_esc;

  mkdirp = require('./fs').mkdirp;

  DB = (function() {
    function DB(_arg) {
      this.filename = _arg.filename;
    }

    DB.prototype.get_filename = function() {
      this.filename || (this.filename = env().get_db_filename());
      return this.filename;
    };

    DB.prototype.open = function(cb) {
      var err, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      err = null;
      (function(_this) {
        return (function(__iced_k) {
          if (_this.db == null) {
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "/Users/max/src/keybase-node-client/src/db.iced",
                funcname: "DB.open"
              });
              _this._open(__iced_deferrals.defer({
                assign_fn: (function() {
                  return function() {
                    return err = arguments[0];
                  };
                })(),
                lineno: 23
              }));
              __iced_deferrals._fulfill();
            })(__iced_k);
          } else {
            return __iced_k();
          }
        });
      })(this)((function(_this) {
        return function() {
          return cb(err);
        };
      })(this));
    };

    DB.prototype._open = function(cb) {
      var db, err, esc, fn, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      esc = make_esc(cb, "DB::open");
      err = null;
      fn = this.get_filename();
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/max/src/keybase-node-client/src/db.iced",
            funcname: "DB._open"
          });
          mkdirp(fn, esc(__iced_deferrals.defer({
            lineno: 32
          })));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          db = null;
          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "/Users/max/src/keybase-node-client/src/db.iced",
              funcname: "DB._open"
            });
            db = new Database(_this.get_filename(), sqlite3.OPEN_READWRITE | sqlite3.OPEN_CREATE, esc(__iced_deferrals.defer({
              lineno: 36
            })));
            __iced_deferrals._fulfill();
          })(function() {
            _this.db = db;
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "/Users/max/src/keybase-node-client/src/db.iced",
                funcname: "DB._open"
              });
              _this._init_db(esc(__iced_deferrals.defer({
                lineno: 39
              })));
              __iced_deferrals._fulfill();
            })(function() {
              console.log("done with init db");
              return cb(null);
            });
          });
        };
      })(this));
    };

    DB.prototype._init_db = function(cb) {
      var c, commands, data, esc, sql_file, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      esc = make_esc(cb, "DB::_init_db");
      sql_file = path.join(__dirname, "..", "sql", "schema.sql");
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/max/src/keybase-node-client/src/db.iced",
            funcname: "DB._init_db"
          });
          fs.readFile(sql_file, esc(__iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                return data = arguments[0];
              };
            })(),
            lineno: 49
          })));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          commands = data.toString('utf8').split(/\s*;\s*/);
          (function(__iced_k) {
            var _i, _len, _ref, _results, _while;
            _ref = commands;
            _len = _ref.length;
            _i = 0;
            _results = [];
            _while = function(__iced_k) {
              var _break, _continue, _next;
              _break = function() {
                return __iced_k(_results);
              };
              _continue = function() {
                return iced.trampoline(function() {
                  ++_i;
                  return _while(__iced_k);
                });
              };
              _next = function(__iced_next_arg) {
                _results.push(__iced_next_arg);
                return _continue();
              };
              if (!(_i < _len)) {
                return _break();
              } else {
                c = _ref[_i];
                if (c.match(/\S+/)) {
                  (function(__iced_k) {
                    __iced_deferrals = new iced.Deferrals(__iced_k, {
                      parent: ___iced_passed_deferral,
                      filename: "/Users/max/src/keybase-node-client/src/db.iced",
                      funcname: "DB._init_db"
                    });
                    _this.db.run(c + ";", esc(__iced_deferrals.defer({
                      lineno: 52
                    })));
                    __iced_deferrals._fulfill();
                  })(function() {
                    return _next(console.log("OK for " + c));
                  });
                } else {
                  return _continue();
                }
              }
            };
            _while(__iced_k);
          })(function() {
            console.log("ok, ready to rock out of here...");
            return cb(null);
          });
        };
      })(this));
    };

    return DB;

  })();

  exports.db = _db = new DB({});

  exports.DB = DB;

  _ref = DB.prototype;
  _fn = function(key) {
    return exports[key] = function() {
      var args;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return _db[key].apply(_db, args);
    };
  };
  for (k in _ref) {
    v = _ref[k];
    _fn(k);
  }

}).call(this);
