// Generated by IcedCoffeeScript 1.7.1-a
(function() {
  var KeyPatcher, constants, env, iced, make_esc, master_ring, prompt_yn, __iced_k, __iced_k_noop;

  iced = require('iced-coffee-script').iced;
  __iced_k = __iced_k_noop = function() {};

  constants = require('./constants').constants;

  make_esc = require('iced-error').make_esc;

  master_ring = require('./keyring').master_ring;

  prompt_yn = require('./prompter').prompt_yn;

  env = require('./env').env;

  exports.KeyPatcher = KeyPatcher = (function() {
    function KeyPatcher(_arg) {
      var kbpgp;
      this.key = _arg.key;
      this.ring || (this.ring = master_ring());
      kbpgp = require('kbpgp');
      this.lib = {
        KeyManager: kbpgp.KeyManager,
        UserID: kbpgp.opkts.UserID,
        parse: kbpgp.parser.parse
      };
      this.did_patch = false;
      this.em = env().keybase_email();
    }

    KeyPatcher.prototype.import_key = function(cb) {
      var err, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/max/src/keybase/node-client/src/keypatch.iced",
            funcname: "KeyPatcher.import_key"
          });
          _this.lib.KeyManager.import_from_armored_pgp({
            raw: _this.key.key_data()
          }, __iced_deferrals.defer({
            assign_fn: (function(__slot_1) {
              return function() {
                err = arguments[0];
                return __slot_1.km = arguments[1];
              };
            })(_this),
            lineno: 26
          }));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          return cb(err);
        };
      })(this));
    };

    KeyPatcher.prototype.needs_patch = function() {
      return !this.key.has_canonical_username();
    };

    KeyPatcher.prototype.run_patch = function(cb) {
      var err, esc, gargs, out, packets, pgp, raw, uid, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      esc = make_esc(cb, "KeyPatcher::run_patch");
      pgp = this.km.pgp;
      console.log(env().make_pgp_uid());
      uid = this.lib.UserID.make(env().make_pgp_uid());
      pgp.userids = [uid];
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/max/src/keybase/node-client/src/keypatch.iced",
            funcname: "KeyPatcher.run_patch"
          });
          pgp.self_sign_primary({
            raw_payload: true
          }, esc(__iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                return raw = arguments[0];
              };
            })(),
            lineno: 41
          })));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          gargs = {
            args: ["-u", _this.key.fingerprint(), "--detach-sign"],
            stdin: raw,
            quiet: true
          };
          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "/Users/max/src/keybase/node-client/src/keypatch.iced",
              funcname: "KeyPatcher.run_patch"
            });
            _this.key.gpg(gargs, esc(__iced_deferrals.defer({
              assign_fn: (function() {
                return function() {
                  return out = arguments[0];
                };
              })(),
              lineno: 46
            })));
            __iced_deferrals._fulfill();
          })(function() {
            var _ref;
            _ref = _this.lib.parse(out), err = _ref[0], packets = _ref[1];
            console.log(err);
            console.log(packets);
            console.log(packets[0].hashed_subpackets);
            return cb(new Error("bailing out for debugging purposes"));
          });
        };
      })(this));
    };

    KeyPatcher.prototype.run = function(_arg, cb) {
      var esc, go, interactive, prompt, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      interactive = _arg.interactive;
      esc = make_esc(cb, "KeyPatcher::run_patch");
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/max/src/keybase/node-client/src/keypatch.iced",
            funcname: "KeyPatcher.run"
          });
          _this.import_key(esc(__iced_deferrals.defer({
            lineno: 57
          })));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          (function(__iced_k) {
            if (_this.needs_patch()) {
              prompt = "Add the userid <" + _this.em + "> to your key";
              (function(__iced_k) {
                __iced_deferrals = new iced.Deferrals(__iced_k, {
                  parent: ___iced_passed_deferral,
                  filename: "/Users/max/src/keybase/node-client/src/keypatch.iced",
                  funcname: "KeyPatcher.run"
                });
                prompt_yn({
                  prompt: prompt,
                  defval: true
                }, esc(__iced_deferrals.defer({
                  assign_fn: (function() {
                    return function() {
                      return go = arguments[0];
                    };
                  })(),
                  lineno: 61
                })));
                __iced_deferrals._fulfill();
              })(__iced_k);
            } else {
              return __iced_k(go = false);
            }
          })(function() {
            (function(__iced_k) {
              if (go) {
                (function(__iced_k) {
                  __iced_deferrals = new iced.Deferrals(__iced_k, {
                    parent: ___iced_passed_deferral,
                    filename: "/Users/max/src/keybase/node-client/src/keypatch.iced",
                    funcname: "KeyPatcher.run"
                  });
                  _this.run_patch(esc(__iced_deferrals.defer({
                    lineno: 65
                  })));
                  __iced_deferrals._fulfill();
                })(__iced_k);
              } else {
                return __iced_k();
              }
            })(function() {
              return cb(null, _this.did_patch);
            });
          });
        };
      })(this));
    };

    return KeyPatcher;

  })();

}).call(this);
