// Generated by IcedCoffeeScript 1.7.1-a
(function() {
  var E, KeyPatcher, constants, env, iced, load_key, log, make_esc, master_ring, prompt_for_int, prompt_passphrase, __iced_k, __iced_k_noop, _ref, _ref1;

  iced = require('iced-coffee-script').iced;
  __iced_k = __iced_k_noop = function() {};

  constants = require('./constants').constants;

  make_esc = require('iced-error').make_esc;

  _ref = require('./keyring'), load_key = _ref.load_key, master_ring = _ref.master_ring;

  _ref1 = require('./prompter'), prompt_passphrase = _ref1.prompt_passphrase, prompt_for_int = _ref1.prompt_for_int;

  env = require('./env').env;

  log = require('./log');

  E = require('./err').E;

  exports.KeyPatcher = KeyPatcher = (function() {
    function KeyPatcher(_arg) {
      var kbpgp;
      this.key = _arg.key;
      this.ring || (this.ring = master_ring());
      kbpgp = require('kbpgp');
      this.lib = {
        KeyManager: kbpgp.KeyManager,
        UserID: kbpgp.opkts.UserID,
        parse: kbpgp.parser.parse
      };
      this.did_patch = false;
      this.em = env().keybase_email();
    }

    KeyPatcher.prototype.import_key = function(cb) {
      var err, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/max/src/keybase/node-client/src/keypatch.iced",
            funcname: "KeyPatcher.import_key"
          });
          _this.lib.KeyManager.import_from_armored_pgp({
            raw: _this.key.key_data()
          }, __iced_deferrals.defer({
            assign_fn: (function(__slot_1) {
              return function() {
                err = arguments[0];
                return __slot_1.km = arguments[1];
              };
            })(_this),
            lineno: 28
          }));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          return cb(err);
        };
      })(this));
    };

    KeyPatcher.prototype.import_secret_key = function(cb) {
      var esc, k, passphrase, uid, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      esc = make_esc(cb, "KeyPatcher::import_secret_key");
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/max/src/keybase/node-client/src/keypatch.iced",
            funcname: "KeyPatcher.import_secret_key"
          });
          load_key({
            fingerprint: _this.key.fingerprint(),
            secret: true
          }, esc(__iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                return k = arguments[0];
              };
            })(),
            lineno: 35
          })));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "/Users/max/src/keybase/node-client/src/keypatch.iced",
              funcname: "KeyPatcher.import_secret_key"
            });
            _this.lib.KeyManager.import_from_armored_pgp({
              raw: k.key_data()
            }, esc(__iced_deferrals.defer({
              assign_fn: (function(__slot_1) {
                return function() {
                  return __slot_1.skm = arguments[0];
                };
              })(_this),
              lineno: 36
            })));
            __iced_deferrals._fulfill();
          })(function() {
            uid = _this.lib.UserID.make(k.uid());
            (function(__iced_k) {
              if (_this.skm.is_pgp_locked()) {
                (function(__iced_k) {
                  __iced_deferrals = new iced.Deferrals(__iced_k, {
                    parent: ___iced_passed_deferral,
                    filename: "/Users/max/src/keybase/node-client/src/keypatch.iced",
                    funcname: "KeyPatcher.import_secret_key"
                  });
                  prompt_passphrase({
                    prompt: "Passphrase for key '" + (uid.utf8()) + "'",
                    short: true
                  }, esc(__iced_deferrals.defer({
                    assign_fn: (function() {
                      return function() {
                        return passphrase = arguments[0];
                      };
                    })(),
                    lineno: 39
                  })));
                  __iced_deferrals._fulfill();
                })(function() {
                  log.debug("+ unlock_pgp");
                  (function(__iced_k) {
                    __iced_deferrals = new iced.Deferrals(__iced_k, {
                      parent: ___iced_passed_deferral,
                      filename: "/Users/max/src/keybase/node-client/src/keypatch.iced",
                      funcname: "KeyPatcher.import_secret_key"
                    });
                    _this.skm.unlock_pgp({
                      passphrase: passphrase
                    }, esc(__iced_deferrals.defer({
                      lineno: 41
                    })));
                    __iced_deferrals._fulfill();
                  })(function() {
                    return __iced_k(log.debug("- unlock_pgp"));
                  });
                });
              } else {
                return __iced_k();
              }
            })(function() {
              return cb(null);
            });
          });
        };
      })(this));
    };

    KeyPatcher.prototype.needs_patch = function() {
      return !this.key.has_canonical_username();
    };

    KeyPatcher.prototype.export_patch = function(cb) {
      var esc, msg, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      log.debug("+ KeyPatcher::export_patch");
      esc = make_esc(cb, "KeyPatcher::export_patch");
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/max/src/keybase/node-client/src/keypatch.iced",
            funcname: "KeyPatcher.export_patch"
          });
          _this.skm.export_pgp_public({
            regen: true
          }, esc(__iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                return msg = arguments[0];
              };
            })(),
            lineno: 54
          })));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "/Users/max/src/keybase/node-client/src/keypatch.iced",
              funcname: "KeyPatcher.export_patch"
            });
            _this.ring.gpg({
              args: ["--import"],
              quiet: true,
              stdin: msg
            }, esc(__iced_deferrals.defer({
              lineno: 55
            })));
            __iced_deferrals._fulfill();
          })(function() {
            log.debug("- KeyPatcher::export_patch");
            return cb(null);
          });
        };
      })(this));
    };

    KeyPatcher.prototype.reload_key = function(cb) {
      var err, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/max/src/keybase/node-client/src/keypatch.iced",
            funcname: "KeyPatcher.reload_key"
          });
          load_key({
            fingerprint: _this.key.fingerprint(),
            secret: false
          }, __iced_deferrals.defer({
            assign_fn: (function(__slot_1) {
              return function() {
                err = arguments[0];
                return __slot_1.key = arguments[1];
              };
            })(_this),
            lineno: 62
          }));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          return cb(err);
        };
      })(this));
    };

    KeyPatcher.prototype.verify = function(cb) {
      var err;
      err = this.key.has_canonical_username() ? null : new E.PatchError("Key update filaed; please report this bug");
      return cb(err);
    };

    KeyPatcher.prototype.run_patch_sequence = function(cb) {
      var esc, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      esc = make_esc(cb, "KeyPatcher::run_patch_sequence");
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/max/src/keybase/node-client/src/keypatch.iced",
            funcname: "KeyPatcher.run_patch_sequence"
          });
          _this.import_secret_key(esc(__iced_deferrals.defer({
            lineno: 76
          })));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "/Users/max/src/keybase/node-client/src/keypatch.iced",
              funcname: "KeyPatcher.run_patch_sequence"
            });
            _this.patch_key(esc(__iced_deferrals.defer({
              lineno: 77
            })));
            __iced_deferrals._fulfill();
          })(function() {
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "/Users/max/src/keybase/node-client/src/keypatch.iced",
                funcname: "KeyPatcher.run_patch_sequence"
              });
              _this.export_patch(esc(__iced_deferrals.defer({
                lineno: 78
              })));
              __iced_deferrals._fulfill();
            })(function() {
              (function(__iced_k) {
                __iced_deferrals = new iced.Deferrals(__iced_k, {
                  parent: ___iced_passed_deferral,
                  filename: "/Users/max/src/keybase/node-client/src/keypatch.iced",
                  funcname: "KeyPatcher.run_patch_sequence"
                });
                _this.reload_key(esc(__iced_deferrals.defer({
                  lineno: 79
                })));
                __iced_deferrals._fulfill();
              })(function() {
                (function(__iced_k) {
                  __iced_deferrals = new iced.Deferrals(__iced_k, {
                    parent: ___iced_passed_deferral,
                    filename: "/Users/max/src/keybase/node-client/src/keypatch.iced",
                    funcname: "KeyPatcher.run_patch_sequence"
                  });
                  _this.verify(esc(__iced_deferrals.defer({
                    lineno: 80
                  })));
                  __iced_deferrals._fulfill();
                })(function() {
                  return cb(null);
                });
              });
            });
          });
        };
      })(this));
    };

    KeyPatcher.prototype.get_key = function() {
      return this.key;
    };

    KeyPatcher.prototype.patch_key = function(cb) {
      var esc, pgp, uid, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      esc = make_esc(cb, "KeyPatcher::run_patch");
      pgp = this.skm.pgp;
      uid = this.lib.UserID.make(env().make_pgp_uid());
      pgp.userids = [uid];
      pgp.subkeys = [];
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/max/src/keybase/node-client/src/keypatch.iced",
            funcname: "KeyPatcher.patch_key"
          });
          _this.skm.sign({}, esc(__iced_deferrals.defer({
            lineno: 95
          })));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          return cb(null);
        };
      })(this));
    };

    KeyPatcher.prototype.prompt_patch = function(cb) {
      var em, err, go, i, prompt, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      em = this.uid.get_email();
      log.console.log("\nKeybase forwards mail for its users to the email addresses of their choice.\nThis feature works much better (and your email is less likely to be marked as spam)\nif you add your Keybase.io identity --- <" + em + "> --- to your key.\nWould you like to:\n\n    (1) Allow this program to add your keybase email to your key (we'll prompt your for your password)\n    (2) Quit out and edit your key via GPG (add email " + em + ")\n    (3) Skip this step\n");
      prompt = "Your choice";
      err = null;
      go = false;
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/max/src/keybase/node-client/src/keypatch.iced",
            funcname: "KeyPatcher.prompt_patch"
          });
          prompt_for_int(prompt, 1, 3, __iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                err = arguments[0];
                return i = arguments[1];
              };
            })(),
            lineno: 117
          }));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          if (err == null) {
            switch (i) {
              case 1:
                go = true;
                break;
              case 2:
                err = new E.CancelError("please edit your key and rerun this command");
                break;
              case 3:
                go = false;
            }
          }
          return cb(err, go);
        };
      })(this));
    };

    KeyPatcher.prototype.run = function(_arg, cb) {
      var esc, go_patch, interactive, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      interactive = _arg.interactive;
      esc = make_esc(cb, "KeyPatcher::run_patch");
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/max/src/keybase/node-client/src/keypatch.iced",
            funcname: "KeyPatcher.run"
          });
          _this.import_key(esc(__iced_deferrals.defer({
            lineno: 132
          })));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          (function(__iced_k) {
            if (_this.needs_patch()) {
              _this.uid = _this.lib.UserID.make(env().make_pgp_uid());
              (function(__iced_k) {
                __iced_deferrals = new iced.Deferrals(__iced_k, {
                  parent: ___iced_passed_deferral,
                  filename: "/Users/max/src/keybase/node-client/src/keypatch.iced",
                  funcname: "KeyPatcher.run"
                });
                _this.prompt_patch(esc(__iced_deferrals.defer({
                  assign_fn: (function() {
                    return function() {
                      return go_patch = arguments[0];
                    };
                  })(),
                  lineno: 136
                })));
                __iced_deferrals._fulfill();
              })(function() {
                (function(__iced_k) {
                  if (go_patch) {
                    (function(__iced_k) {
                      __iced_deferrals = new iced.Deferrals(__iced_k, {
                        parent: ___iced_passed_deferral,
                        filename: "/Users/max/src/keybase/node-client/src/keypatch.iced",
                        funcname: "KeyPatcher.run"
                      });
                      _this.run_patch_sequence(esc(__iced_deferrals.defer({
                        lineno: 137
                      })));
                      __iced_deferrals._fulfill();
                    })(__iced_k);
                  } else {
                    return __iced_k();
                  }
                })(__iced_k);
              });
            } else {
              return __iced_k();
            }
          })(function() {
            return cb(null, go_patch);
          });
        };
      })(this));
    };

    return KeyPatcher;

  })();

}).call(this);
