// Generated by IcedCoffeeScript 1.6.3-g
(function() {
  var KeyManager, KeySelector, find_short_id, gpg, iced, log, log_10, make_esc, pad, prompt_for_int, repeat, spc, __iced_k, __iced_k_noop;

  iced = require('iced-coffee-script/lib/coffee-script/iced').runtime;
  __iced_k = __iced_k_noop = function() {};

  log = require('./log');

  gpg = require('./gpg').gpg;

  make_esc = require('iced-error').make_esc;

  prompt_for_int = require('./prompter').prompt_for_int;

  KeyManager = require('./keymanager').KeyManager;

  find_short_id = function(raw) {
    var m, x;
    x = /^pub\s+[0-9]{4}R\/([0-9A-F]{8}) /;
    if ((m = raw.match(x))) {
      return m[1];
    } else {
      return null;
    }
  };

  log_10 = function(x) {
    var val;
    val = 0;
    while (x > 0) {
      val++;
      x = Math.floor(x / 10);
    }
    return val;
  };

  pad = function(i, places) {
    var n;
    n = places - (log_10(i));
    if (n < 0) {
      n = 0;
    }
    return spc(n) + i;
  };

  spc = function(i) {
    return repeat(' ', i);
  };

  repeat = function(c, i) {
    return ((function() {
      var _i, _results;
      _results = [];
      for (_i = 0; 0 <= i ? _i < i : _i > i; 0 <= i ? _i++ : _i--) {
        _results.push(c);
      }
      return _results;
    })()).join('');
  };

  exports.KeySelector = KeySelector = (function() {
    function KeySelector(_arg) {
      this.query = _arg.query;
    }

    KeySelector.prototype.select = function(cb) {
      var esc, key, keys, km, ___iced_passed_deferral, __iced_deferrals, __iced_k,
        _this = this;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      esc = make_esc(cb, "KeySelector::select");
      (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "src/keyselector.iced",
          funcname: "KeySelector.select"
        });
        _this.query_keys(esc(__iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              return keys = arguments[0];
            };
          })(),
          lineno: 38
        })));
        __iced_deferrals._fulfill();
      })(function() {
        (function(__iced_k) {
          if (keys.length > 1) {
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "src/keyselector.iced",
                funcname: "KeySelector.select"
              });
              _this.select_key(keys, esc(__iced_deferrals.defer({
                assign_fn: (function() {
                  return function() {
                    return key = arguments[0];
                  };
                })(),
                lineno: 40
              })));
              __iced_deferrals._fulfill();
            })(__iced_k);
          } else {
            return __iced_k(key = keys[0]);
          }
        })(function() {
          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "src/keyselector.iced",
              funcname: "KeySelector.select"
            });
            KeyManager.load(key.short_id, esc(__iced_deferrals.defer({
              assign_fn: (function() {
                return function() {
                  return km = arguments[0];
                };
              })(),
              lineno: 42
            })));
            __iced_deferrals._fulfill();
          })(function() {
            return cb(null, km);
          });
        });
      });
    };

    KeySelector.prototype.query_keys = function(cb) {
      var args, err, f, keys, out, r, raw, ___iced_passed_deferral, __iced_deferrals, __iced_k,
        _this = this;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      this.keys = null;
      args = ["-k"];
      if (this.query) {
        args.push(this.query);
      }
      (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "src/keyselector.iced",
          funcname: "KeySelector.query_keys"
        });
        gpg({
          args: args
        }, __iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              err = arguments[0];
              return out = arguments[1];
            };
          })(),
          lineno: 51
        }));
        __iced_deferrals._fulfill();
      })(function() {
        if (typeof err === "undefined" || err === null) {
          raw = out.toString().split("\n\n");
          keys = (function() {
            var _i, _len, _results;
            _results = [];
            for (_i = 0, _len = raw.length; _i < _len; _i++) {
              r = raw[_i];
              if ((f = find_short_id(r))) {
                _results.push({
                  lines: r.split("\n"),
                  short_id: f
                });
              }
            }
            return _results;
          })();
        }
        return cb(err, keys);
      });
    };

    KeySelector.prototype.longest_line = function(keys) {
      var key, l, line, longest, _i, _j, _len, _len1, _ref;
      longest = 0;
      for (_i = 0, _len = keys.length; _i < _len; _i++) {
        key = keys[_i];
        _ref = key.lines;
        for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
          line = _ref[_j];
          if ((l = line.length) > longest) {
            longest = l;
          }
        }
      }
      return longest;
    };

    KeySelector.prototype.select_key_menu = function(keys) {
      var i, j, k, line, lines, longest, sep, width, _i, _j, _len, _len1, _ref, _results;
      width = log_10(keys.length + 1);
      longest = this.longest_line(keys) + width + 3;
      sep = function() {
        return console.log("\n" + (repeat('~', longest)) + "\n");
      };
      sep();
      _results = [];
      for (i = _i = 0, _len = keys.length; _i < _len; i = ++_i) {
        k = keys[i];
        lines = k.lines;
        j = i + 1;
        console.log(("(" + (pad(j, width)) + ") ") + lines[0]);
        _ref = lines.slice(1);
        for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
          line = _ref[_j];
          console.log(spc(width + 3) + line);
        }
        _results.push(sep());
      }
      return _results;
    };

    KeySelector.prototype.select_key = function(keys, cb) {
      var err, out, sel, ___iced_passed_deferral, __iced_deferrals, __iced_k,
        _this = this;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      if (this.query) {
        console.log("Multiple keys were found that matched '" + this.query + "':");
      } else {
        console.log("Multiple keys found, please pick one:");
      }
      this.select_key_menu(keys);
      (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "src/keyselector.iced",
          funcname: "KeySelector.select_key"
        });
        prompt_for_int(1, keys.length, __iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              err = arguments[0];
              return sel = arguments[1];
            };
          })(),
          lineno: 91
        }));
        __iced_deferrals._fulfill();
      })(function() {
        out = typeof err !== "undefined" && err !== null ? null : keys[sel - 1];
        if (out != null) {
          log.info("Picked key: " + out.short_id);
        }
        return cb(err, out);
      });
    };

    return KeySelector;

  })();

  exports.key_select = function(query, cb) {
    return (new KeySelector({
      query: query
    })).select(cb);
  };

}).call(this);
