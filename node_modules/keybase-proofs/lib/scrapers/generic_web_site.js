// Generated by IcedCoffeeScript 1.7.1-b
(function() {
  var BaseScraper, GenericWebSiteScraper, constants, decode, iced, urlmod, v_codes, __iced_k, __iced_k_noop,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  iced = require('iced-coffee-script/lib/coffee-script/iced').runtime;
  __iced_k = __iced_k_noop = function() {};

  BaseScraper = require('./base').BaseScraper;

  constants = require('../constants').constants;

  v_codes = constants.v_codes;

  decode = require('pgp-utils').armor.decode;

  urlmod = require('url');

  exports.GenericWebSiteScraper = GenericWebSiteScraper = (function(_super) {
    __extends(GenericWebSiteScraper, _super);

    GenericWebSiteScraper.FILE = ".well-known/keybase.txt";

    GenericWebSiteScraper.prototype.FILE = GenericWebSiteScraper.FILE;

    function GenericWebSiteScraper(opts) {
      GenericWebSiteScraper.__super__.constructor.call(this, opts);
    }

    GenericWebSiteScraper.prototype._check_args = function(args) {
      var _ref;
      if (!(args.hostname != null)) {
        return new Error("Bad args to generic website proof: no hostname given");
      } else if (!(args.protocol != null)) {
        return new Error("Not protocol given");
      } else if (!((_ref = args.protocol) === 'https:' || _ref === 'http:')) {
        return new Error("Unknown protocol given: " + args.protocol);
      } else {
        return null;
      }
    };

    GenericWebSiteScraper.prototype.make_url = function(_arg) {
      var hostname, protocol;
      protocol = _arg.protocol, hostname = _arg.hostname;
      return urlmod.format({
        hostname: hostname,
        protocol: protocol,
        pathname: this.FILE
      });
    };

    GenericWebSiteScraper.prototype.hunt2 = function(_arg, cb) {
      var err, hostname, out, protocol, url;
      hostname = _arg.hostname, protocol = _arg.protocol;
      err = null;
      if ((hostname == null) || (protocol == null)) {
        err = new Error("invalid arguments: expected a hostname and protocol");
      } else {
        url = this.make_url({
          hostname: hostname,
          protocol: protocol
        });
        out = {
          api_url: url,
          human_url: url,
          remote_id: url,
          rc: v_codes.OK
        };
      }
      return cb(err, out);
    };

    GenericWebSiteScraper.prototype._check_api_url = function(_arg) {
      var api_url, hostname, protocol;
      api_url = _arg.api_url, hostname = _arg.hostname, protocol = _arg.protocol;
      return api_url.toLowerCase().indexOf(this.make_url({
        hostname: hostname,
        protocol: protocol
      })) >= 0;
    };

    GenericWebSiteScraper.prototype._validate_text_check = function(_arg) {
      var err, msg, proof_text_check, signature, _ref;
      signature = _arg.signature, proof_text_check = _arg.proof_text_check;
      _ref = decode(signature), err = _ref[0], msg = _ref[1];
      if ((err == null) && ("\n\n" + msg.payload + "\n") !== proof_text_check) {
        err = new Error("Bad payload text_check");
      }
      return err;
    };

    GenericWebSiteScraper.prototype.check_status = function(_arg, cb) {
      var api_url, err, hostname, proof_text_check, protocol, raw, rc, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      protocol = _arg.protocol, hostname = _arg.hostname, api_url = _arg.api_url, proof_text_check = _arg.proof_text_check;
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/home/max/src/keybase/proofs/src/scrapers/generic_web_site.iced",
            funcname: "GenericWebSiteScraper.check_status"
          });
          _this._get_url_body({
            url: api_url
          }, __iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                err = arguments[0];
                rc = arguments[1];
                return raw = arguments[2];
              };
            })(),
            lineno: 72
          }));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          rc = rc !== v_codes.OK ? rc : (_this._stripr(raw).indexOf(proof_text_check)) >= 0 ? v_codes.OK : v_codes.NOT_FOUND;
          return cb(err, rc);
        };
      })(this));
    };

    return GenericWebSiteScraper;

  })(BaseScraper);

}).call(this);
