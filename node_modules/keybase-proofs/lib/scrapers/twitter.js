// Generated by IcedCoffeeScript 1.7.1-b
(function() {
  var BaseScraper, TwitterScraper, constants, decode, iced, make_ids, sncmp, v_codes, __iced_k, __iced_k_noop,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  iced = require('iced-coffee-script/lib/coffee-script/iced').runtime;
  __iced_k = __iced_k_noop = function() {};

  BaseScraper = require('./base').BaseScraper;

  make_ids = require('../base').make_ids;

  constants = require('../constants').constants;

  v_codes = constants.v_codes;

  decode = require('pgp-utils').armor.decode;

  sncmp = function(a, b) {
    if ((a == null) || (b == null)) {
      return false;
    } else {
      a = ("" + a).toLowerCase();
      b = ("" + b).toLowerCase();
      return a === b;
    }
  };

  exports.TwitterScraper = TwitterScraper = (function(_super) {
    __extends(TwitterScraper, _super);

    function TwitterScraper(opts) {
      TwitterScraper.__super__.constructor.call(this, opts);
    }

    TwitterScraper.prototype._check_args = function(args) {
      if (!(args.username != null)) {
        return new Error("Bad args to Twitter proof: no username given");
      } else if (!(args.name != null) || (args.name !== 'twitter')) {
        return new Error("Bad args to Twitter proof: type is " + args.name);
      } else {
        return null;
      }
    };

    TwitterScraper.prototype.hunt2 = function(_arg, cb) {
      var $, api_url, err, html, human_url, i, item, name, out, p, proof_text_check, rc, remote_id, stream, stream_item, u, username, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      username = _arg.username, name = _arg.name, proof_text_check = _arg.proof_text_check;
      out = {};
      rc = v_codes.OK;
      if ((err = this._check_args({
        username: username,
        name: name
      })) != null) {
        return cb(err);
      }
      u = "https://twitter.com/" + username;
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/home/max/src/keybase/proofs/src/scrapers/twitter.iced",
            funcname: "TwitterScraper.hunt2"
          });
          _this._get_url_body({
            url: u
          }, __iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                err = arguments[0];
                rc = arguments[1];
                return html = arguments[2];
              };
            })(),
            lineno: 42
          }));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          var _i, _len;
          _this.log("| search index " + u + " -> " + rc);
          if (rc === v_codes.OK) {
            $ = _this.libs.cheerio.load(html);
            stream = $('.profile-stream li.stream-item .tweet');
            if (!stream.length) {
              rc = v_codes.CONTENT_FAILURE;
              if ($('.stream-protected').length) {
                rc = v_codes.PERMISSION_DENIED;
              }
            } else {
              rc = v_codes.NOT_FOUND;
              for (i = _i = 0, _len = stream.length; _i < _len; i = ++_i) {
                stream_item = stream[i];
                item = $(stream_item);
                if (sncmp(item.data('screenName'), username) && (item.data('tweetId') != null)) {
                  p = item.find('p.tweet-text');
                  if ((_this.find_sig_in_tweet({
                    tweet_p: p.first(),
                    proof_text_check: proof_text_check
                  })) === v_codes.OK) {
                    _this.log("| found valid tweet in stream @ " + i);
                    rc = v_codes.OK;
                    remote_id = item.data('tweetId');
                    api_url = human_url = _this._id_to_url(username, remote_id);
                    out = {
                      remote_id: remote_id,
                      api_url: api_url,
                      human_url: human_url
                    };
                    break;
                  }
                }
              }
            }
          }
          out.rc = rc;
          return cb(err, out);
        };
      })(this));
    };

    TwitterScraper.prototype._id_to_url = function(username, status_id) {
      return "https://twitter.com/" + username + "/status/" + status_id;
    };

    TwitterScraper.prototype._check_api_url = function(_arg) {
      var api_url, username;
      api_url = _arg.api_url, username = _arg.username;
      return api_url.indexOf("https://twitter.com/" + username + "/") === 0;
    };

    TwitterScraper.prototype._validate_text_check = function(_arg) {
      var err, msg, proof_text_check, short_id, signature, _ref;
      signature = _arg.signature, proof_text_check = _arg.proof_text_check;
      _ref = decode(signature), err = _ref[0], msg = _ref[1];
      if (err == null) {
        short_id = make_ids(msg.body).short_id;
        if (proof_text_check.indexOf(" " + short_id + " ") < 0) {
          err = new Error("Cannot find " + short_id + " in " + proof_text_check);
        }
      }
      return err;
    };

    TwitterScraper.prototype.find_sig_in_tweet = function(_arg) {
      var inside, m, p, proof_text_check, rc, tweet_p, x;
      tweet_p = _arg.tweet_p, proof_text_check = _arg.proof_text_check;
      inside = tweet_p.text();
      x = /^(@[a-zA-Z0-9_-]+\s+)/;
      this.log("+ Checking tweet '" + (tweet_p.text()) + "' for signature '" + proof_text_check + "'");
      this.log("| html is: " + (tweet_p.html()));
      while ((m = inside.match(x)) != null) {
        p = m[1];
        inside = inside.slice(p.length);
        this.log("| Stripping off @prefix: " + p);
      }
      rc = inside.indexOf(proof_text_check) === 0 ? v_codes.OK : v_codes.DELETED;
      this.log("- Result -> " + rc);
      return rc;
    };

    TwitterScraper.prototype.check_status = function(_arg, cb) {
      var $, api_url, div, err, html, p, proof_text_check, rc, remote_id, username, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      username = _arg.username, api_url = _arg.api_url, proof_text_check = _arg.proof_text_check, remote_id = _arg.remote_id;
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/home/max/src/keybase/proofs/src/scrapers/twitter.iced",
            funcname: "TwitterScraper.check_status"
          });
          _this._get_url_body({
            url: api_url
          }, __iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                err = arguments[0];
                rc = arguments[1];
                return html = arguments[2];
              };
            })(),
            lineno: 121
          }));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          if (rc === v_codes.OK) {
            $ = _this.libs.cheerio.load(html);
            div = $('.permalink-tweet-container .permalink-tweet');
            if (!div.length) {
              rc = v_codes.FAILED_PARSE;
            } else {
              div = div.first();
              rc = !(sncmp(username, div.data('screenName'))) ? v_codes.BAD_USERNAME : ("" + remote_id) !== ("" + div.data('tweetId')) ? v_codes.BAD_REMOTE_ID : ((p = div.find('p.tweet-text')) == null) || !p.length ? v_codes.MISSING : _this.find_sig_in_tweet({
                tweet_p: p.first(),
                proof_text_check: proof_text_check
              });
            }
          }
          return cb(err, rc);
        };
      })(this));
    };

    return TwitterScraper;

  })(BaseScraper);

}).call(this);
