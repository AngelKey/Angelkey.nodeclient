// Generated by IcedCoffeeScript 1.8.0-c
(function() {
  var Base, Subkey, SubkeyBase, bufeq_secure, constants, iced, make_esc, pgp_utils, __iced_k, __iced_k_noop,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  iced = require('iced-runtime');
  __iced_k = __iced_k_noop = function() {};

  Base = require('./base').Base;

  constants = require('./constants').constants;

  make_esc = require('iced-error').make_esc;

  pgp_utils = require('pgp-utils');

  bufeq_secure = pgp_utils.util.bufeq_secure;

  exports.SubkeyBase = SubkeyBase = (function(_super) {
    __extends(SubkeyBase, _super);

    SubkeyBase.prototype.get_subkey = function() {
      return null;
    };

    SubkeyBase.prototype.get_subkm = function() {
      return null;
    };

    SubkeyBase.prototype.set_subkey = function(s) {};

    SubkeyBase.prototype.get_field = function() {
      return null;
    };

    SubkeyBase.prototype._v_generate = function(opts, cb) {
      var armored, eng, esc, msg, obj, reverse_sig, type, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      esc = make_esc(cb, "_v_generate");
      (function(_this) {
        return (function(__iced_k) {
          if ((_this.get_subkey() == null) && (_this.get_subkm() != null)) {
            reverse_sig = null;
            (function(__iced_k) {
              if (_this.get_subkm().get_keypair().can_sign()) {
                eng = _this.get_subkm().make_sig_eng();
                msg = _this.km().get_ekid();
                (function(__iced_k) {
                  __iced_deferrals = new iced.Deferrals(__iced_k, {
                    parent: ___iced_passed_deferral,
                    filename: "/Users/max/src/keybase/proofs/src/subkey.iced",
                    funcname: "SubkeyBase._v_generate"
                  });
                  eng.box(msg, esc(__iced_deferrals.defer({
                    assign_fn: (function() {
                      return function() {
                        armored = arguments[0].armored;
                        return type = arguments[0].type;
                      };
                    })(),
                    lineno: 23
                  })));
                  __iced_deferrals._fulfill();
                })(function() {
                  return __iced_k(reverse_sig = {
                    sig: armored,
                    type: type
                  });
                });
              } else {
                return __iced_k();
              }
            })(function() {
              obj = {
                kid: _this.get_subkm().get_ekid().toString('hex'),
                reverse_sig: reverse_sig
              };
              _this.set_subkey(obj);
              return __iced_k(_this.notes != null ? obj.notes = _this.notes : void 0);
            });
          } else {
            return __iced_k();
          }
        });
      })(this)((function(_this) {
        return function() {
          return cb(null);
        };
      })(this));
    };

    SubkeyBase.prototype._json = function() {
      var ret;
      ret = SubkeyBase.__super__._json.call(this, {});
      ret.body[this.get_field()] = this.get_subkey();
      return ret;
    };

    SubkeyBase.prototype._v_check = function(_arg, cb) {
      var a, b, eng, err, esc, json, payload, sig, skm, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      json = _arg.json;
      esc = make_esc(cb, "SubkeyBase::_v_check");
      err = null;
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/max/src/keybase/proofs/src/subkey.iced",
            funcname: "SubkeyBase._v_check"
          });
          SubkeyBase.__super__._v_check.call(_this, {
            json: json
          }, esc(__iced_deferrals.defer({
            lineno: 42
          })));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          (function(__iced_k) {
            var _ref, _ref1, _ref2;
            if (((sig = json != null ? (_ref = json.body) != null ? (_ref1 = _ref[_this.get_field()]) != null ? (_ref2 = _ref1.reverse_sig) != null ? _ref2.sig : void 0 : void 0 : void 0 : void 0) != null) && ((skm = _this.get_subkm()) != null)) {
              eng = skm.make_sig_eng();
              (function(__iced_k) {
                __iced_deferrals = new iced.Deferrals(__iced_k, {
                  parent: ___iced_passed_deferral,
                  filename: "/Users/max/src/keybase/proofs/src/subkey.iced",
                  funcname: "SubkeyBase._v_check"
                });
                eng.unbox(sig, esc(__iced_deferrals.defer({
                  assign_fn: (function() {
                    return function() {
                      return payload = arguments[0];
                    };
                  })(),
                  lineno: 45
                })));
                __iced_deferrals._fulfill();
              })(function() {
                return __iced_k(!bufeq_secure((a = _this.km().get_ekid()), (b = payload)) ? err = new Error("Bad reverse sig payload: " + (a.toString('hex')) + " != " + (b.toString('hex'))) : void 0);
              });
            } else {
              return __iced_k();
            }
          })(function() {
            return cb(err);
          });
        };
      })(this));
    };

    function SubkeyBase(obj) {
      this.notes = obj.notes;
      SubkeyBase.__super__.constructor.call(this, obj);
    }

    return SubkeyBase;

  })(Base);

  exports.Subkey = Subkey = (function(_super) {
    __extends(Subkey, _super);

    Subkey.prototype.get_field = function() {
      return "subkey";
    };

    Subkey.prototype.get_subkey = function() {
      return this.subkey;
    };

    Subkey.prototype.get_subkm = function() {
      return this.subkm;
    };

    Subkey.prototype.set_subkey = function(s) {
      return this.subkey = s;
    };

    Subkey.prototype._type = function() {
      return constants.sig_types.subkey;
    };

    function Subkey(obj) {
      this.subkey = obj.subkey;
      this.subkm = obj.subkm;
      Subkey.__super__.constructor.call(this, obj);
    }

    return Subkey;

  })(SubkeyBase);

}).call(this);
